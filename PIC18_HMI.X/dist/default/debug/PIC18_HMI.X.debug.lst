

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 05 13:18:10 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43  0000                     
    44                           ; Version 1.44
    45                           ; Generated 14/09/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4550 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	mediumconst
    80  007BB6                     __pmediumconst:
    81                           	opt stack 0
    82  007BB6  00                 	db	0
    83  007BB7                     _dpowers:
    84                           	opt stack 0
    85  007BB7  0001               	dw	1
    86  007BB9  000A               	dw	10
    87  007BBB  0064               	dw	100
    88  007BBD  03E8               	dw	1000
    89  007BBF  2710               	dw	10000
    90  007BC1                     __end_of_dpowers:
    91                           	opt stack 0
    92  0000                     _TRISDbits	set	3989
    93  0000                     _LATDbits	set	3980
    94  0000                     _PORTBbits	set	3969
    95  0000                     _TRISB	set	3987
    96  0000                     _LATB	set	3978
    97  0000                     _LATB4	set	31828
    98  0000                     _LATB5	set	31829
    99  0000                     _LATB6	set	31830
   100  0000                     _LATB7	set	31831
   101  0000                     _TRISC6	set	31910
   102  0000                     _TRISC7	set	31911
   103  0000                     _OSCCON	set	4051
   104  0000                     _RCREG	set	4014
   105  0000                     _TXREG	set	4013
   106  0000                     _SPBRG	set	4015
   107  0000                     _RCIF	set	31989
   108  0000                     _TRMT	set	32097
   109  0000                     _TXEN	set	32101
   110  0000                     _CREN	set	32092
   111  0000                     _SPEN	set	32095
   112  0000                     _SYNC	set	32100
   113  0000                     _BRGH	set	32098
   114  007BC1                     STR_35:
   115  007BC1  20                 	db	32
   116  007BC2  20                 	db	32
   117  007BC3  20                 	db	32
   118  007BC4  31                 	db	49	;'1'
   119  007BC5  29                 	db	41
   120  007BC6  54                 	db	84	;'T'
   121  007BC7  72                 	db	114	;'r'
   122  007BC8  61                 	db	97	;'a'
   123  007BC9  62                 	db	98	;'b'
   124  007BCA  61                 	db	97	;'a'
   125  007BCB  6A                 	db	106	;'j'
   126  007BCC  6F                 	db	111	;'o'
   127  007BCD  20                 	db	32
   128  007BCE  32                 	db	50	;'2'
   129  007BCF  29                 	db	41
   130  007BD0  43                 	db	67	;'C'
   131  007BD1  61                 	db	97	;'a'
   132  007BD2  6C                 	db	108	;'l'
   133  007BD3  69                 	db	105	;'i'
   134  007BD4  62                 	db	98	;'b'
   135  007BD5  72                 	db	114	;'r'
   136  007BD6  61                 	db	97	;'a'
   137  007BD7  63                 	db	99	;'c'
   138  007BD8  69                 	db	105	;'i'
   139  007BD9  6F                 	db	111	;'o'
   140  007BDA  6E                 	db	110	;'n'
   141  007BDB  00                 	db	0
   142  007BDC                     STR_28:
   143  007BDC  4D                 	db	77	;'M'
   144  007BDD  6F                 	db	111	;'o'
   145  007BDE  76                 	db	118	;'v'
   146  007BDF  69                 	db	105	;'i'
   147  007BE0  65                 	db	101	;'e'
   148  007BE1  6E                 	db	110	;'n'
   149  007BE2  64                 	db	100	;'d'
   150  007BE3  6F                 	db	111	;'o'
   151  007BE4  2E                 	db	46
   152  007BE5  2E                 	db	46
   153  007BE6  2E                 	db	46
   154  007BE7  20                 	db	32
   155  007BE8  20                 	db	32
   156  007BE9  20                 	db	32
   157  007BEA  20                 	db	32
   158  007BEB  20                 	db	32
   159  007BEC  20                 	db	32
   160  007BED  20                 	db	32
   161  007BEE  20                 	db	32
   162  007BEF  20                 	db	32
   163  007BF0  00                 	db	0
   164  007BF1                     STR_36:
   165  007BF1  45                 	db	69	;'E'
   166  007BF2  6C                 	db	108	;'l'
   167  007BF3  69                 	db	105	;'i'
   168  007BF4  6A                 	db	106	;'j'
   169  007BF5  61                 	db	97	;'a'
   170  007BF6  20                 	db	32
   171  007BF7  75                 	db	117	;'u'
   172  007BF8  6E                 	db	110	;'n'
   173  007BF9  20                 	db	32
   174  007BFA  43                 	db	67	;'C'
   175  007BFB  6F                 	db	111	;'o'
   176  007BFC  6D                 	db	109	;'m'
   177  007BFD  61                 	db	97	;'a'
   178  007BFE  6E                 	db	110	;'n'
   179  007BFF  64                 	db	100	;'d'
   180  007C00  6F                 	db	111	;'o'
   181  007C01  3A                 	db	58	;':'
   182  007C02  00                 	db	0
   183  007C03                     STR_29:
   184  007C03  4C                 	db	76	;'L'
   185  007C04  69                 	db	105	;'i'
   186  007C05  73                 	db	115	;'s'
   187  007C06  74                 	db	116	;'t'
   188  007C07  6F                 	db	111	;'o'
   189  007C08  20                 	db	32
   190  007C09  20                 	db	32
   191  007C0A  20                 	db	32
   192  007C0B  20                 	db	32
   193  007C0C  20                 	db	32
   194  007C0D  20                 	db	32
   195  007C0E  20                 	db	32
   196  007C0F  20                 	db	32
   197  007C10  20                 	db	32
   198  007C11  20                 	db	32
   199  007C12  00                 	db	0
   200  007C13                     STR_30:
   201  007C13  45                 	db	69	;'E'
   202  007C14  72                 	db	114	;'r'
   203  007C15  72                 	db	114	;'r'
   204  007C16  6F                 	db	111	;'o'
   205  007C17  72                 	db	114	;'r'
   206  007C18  21                 	db	33
   207  007C19  20                 	db	32
   208  007C1A  20                 	db	32
   209  007C1B  20                 	db	32
   210  007C1C  20                 	db	32
   211  007C1D  20                 	db	32
   212  007C1E  20                 	db	32
   213  007C1F  20                 	db	32
   214  007C20  20                 	db	32
   215  007C21  20                 	db	32
   216  007C22  00                 	db	0
   217  007C23                     STR_17:
   218  007C23  4C                 	db	76	;'L'
   219  007C24  69                 	db	105	;'i'
   220  007C25  6D                 	db	109	;'m'
   221  007C26  69                 	db	105	;'i'
   222  007C27  74                 	db	116	;'t'
   223  007C28  65                 	db	101	;'e'
   224  007C29  20                 	db	32
   225  007C2A  65                 	db	101	;'e'
   226  007C2B  78                 	db	120	;'x'
   227  007C2C  63                 	db	99	;'c'
   228  007C2D  65                 	db	101	;'e'
   229  007C2E  64                 	db	100	;'d'
   230  007C2F  69                 	db	105	;'i'
   231  007C30  64                 	db	100	;'d'
   232  007C31  6F                 	db	111	;'o'
   233  007C32  00                 	db	0
   234  007C33                     STR_8:
   235  007C33  49                 	db	73	;'I'
   236  007C34  6E                 	db	110	;'n'
   237  007C35  67                 	db	103	;'g'
   238  007C36  72                 	db	114	;'r'
   239  007C37  65                 	db	101	;'e'
   240  007C38  73                 	db	115	;'s'
   241  007C39  65                 	db	101	;'e'
   242  007C3A  20                 	db	32
   243  007C3B  4E                 	db	78	;'N'
   244  007C3C  75                 	db	117	;'u'
   245  007C3D  6D                 	db	109	;'m'
   246  007C3E  65                 	db	101	;'e'
   247  007C3F  72                 	db	114	;'r'
   248  007C40  6F                 	db	111	;'o'
   249  007C41  00                 	db	0
   250  007C42                     STR_32:
   251  007C42  53                 	db	83	;'S'
   252  007C43  69                 	db	105	;'i'
   253  007C44  67                 	db	103	;'g'
   254  007C45  75                 	db	117	;'u'
   255  007C46  69                 	db	105	;'i'
   256  007C47  65                 	db	101	;'e'
   257  007C48  6E                 	db	110	;'n'
   258  007C49  74                 	db	116	;'t'
   259  007C4A  65                 	db	101	;'e'
   260  007C4B  20                 	db	32
   261  007C4C  28                 	db	40
   262  007C4D  41                 	db	65	;'A'
   263  007C4E  29                 	db	41
   264  007C4F  00                 	db	0
   265  007C50                     STR_1:
   266  007C50  43                 	db	67	;'C'
   267  007C51  61                 	db	97	;'a'
   268  007C52  6C                 	db	108	;'l'
   269  007C53  69                 	db	105	;'i'
   270  007C54  62                 	db	98	;'b'
   271  007C55  72                 	db	114	;'r'
   272  007C56  61                 	db	97	;'a'
   273  007C57  6E                 	db	110	;'n'
   274  007C58  64                 	db	100	;'d'
   275  007C59  6F                 	db	111	;'o'
   276  007C5A  2E                 	db	46
   277  007C5B  2E                 	db	46
   278  007C5C  2E                 	db	46
   279  007C5D  00                 	db	0
   280  007C5E                     STR_39:
   281  007C5E  20                 	db	32
   282  007C5F  20                 	db	32
   283  007C60  20                 	db	32
   284  007C61  42                 	db	66	;'B'
   285  007C62  69                 	db	105	;'i'
   286  007C63  65                 	db	101	;'e'
   287  007C64  6E                 	db	110	;'n'
   288  007C65  76                 	db	118	;'v'
   289  007C66  65                 	db	101	;'e'
   290  007C67  6E                 	db	110	;'n'
   291  007C68  69                 	db	105	;'i'
   292  007C69  64                 	db	100	;'d'
   293  007C6A  6F                 	db	111	;'o'
   294  007C6B  00                 	db	0
   295  007C6C                     STR_38:
   296  007C6C  43                 	db	67	;'C'
   297  007C6D  61                 	db	97	;'a'
   298  007C6E  6C                 	db	108	;'l'
   299  007C6F  69                 	db	105	;'i'
   300  007C70  62                 	db	98	;'b'
   301  007C71  72                 	db	114	;'r'
   302  007C72  61                 	db	97	;'a'
   303  007C73  63                 	db	99	;'c'
   304  007C74  69                 	db	105	;'i'
   305  007C75  6F                 	db	111	;'o'
   306  007C76  6E                 	db	110	;'n'
   307  007C77  21                 	db	33
   308  007C78  00                 	db	0
   309  007C79                     STR_31:
   310  007C79  54                 	db	84	;'T'
   311  007C7A  65                 	db	101	;'e'
   312  007C7B  72                 	db	114	;'r'
   313  007C7C  6D                 	db	109	;'m'
   314  007C7D  69                 	db	105	;'i'
   315  007C7E  6E                 	db	110	;'n'
   316  007C7F  61                 	db	97	;'a'
   317  007C80  72                 	db	114	;'r'
   318  007C81  20                 	db	32
   319  007C82  28                 	db	40
   320  007C83  41                 	db	65	;'A'
   321  007C84  29                 	db	41
   322  007C85  00                 	db	0
   323  007C86                     STR_6:
   324  007C86  43                 	db	67	;'C'
   325  007C87  61                 	db	97	;'a'
   326  007C88  6E                 	db	110	;'n'
   327  007C89  63                 	db	99	;'c'
   328  007C8A  65                 	db	101	;'e'
   329  007C8B  6C                 	db	108	;'l'
   330  007C8C  61                 	db	97	;'a'
   331  007C8D  64                 	db	100	;'d'
   332  007C8E  6F                 	db	111	;'o'
   333  007C8F  2E                 	db	46
   334  007C90  2E                 	db	46
   335  007C91  2E                 	db	46
   336  007C92  00                 	db	0
   337  007C93                     STR_34:
   338  007C93  54                 	db	84	;'T'
   339  007C94  65                 	db	101	;'e'
   340  007C95  72                 	db	114	;'r'
   341  007C96  6D                 	db	109	;'m'
   342  007C97  69                 	db	105	;'i'
   343  007C98  6E                 	db	110	;'n'
   344  007C99  61                 	db	97	;'a'
   345  007C9A  64                 	db	100	;'d'
   346  007C9B  6F                 	db	111	;'o'
   347  007C9C  2E                 	db	46
   348  007C9D  2E                 	db	46
   349  007C9E  2E                 	db	46
   350  007C9F  00                 	db	0
   351  007CA0                     STR_16:
   352  007CA0  44                 	db	68	;'D'
   353  007CA1  69                 	db	105	;'i'
   354  007CA2  73                 	db	115	;'s'
   355  007CA3  74                 	db	116	;'t'
   356  007CA4  61                 	db	97	;'a'
   357  007CA5  6E                 	db	110	;'n'
   358  007CA6  63                 	db	99	;'c'
   359  007CA7  69                 	db	105	;'i'
   360  007CA8  61                 	db	97	;'a'
   361  007CA9  3A                 	db	58	;':'
   362  007CAA  20                 	db	32
   363  007CAB  00                 	db	0
   364  007CAC                     STR_4:
   365  007CAC  44                 	db	68	;'D'
   366  007CAD  69                 	db	105	;'i'
   367  007CAE  73                 	db	115	;'s'
   368  007CAF  74                 	db	116	;'t'
   369  007CB0  61                 	db	97	;'a'
   370  007CB1  6E                 	db	110	;'n'
   371  007CB2  63                 	db	99	;'c'
   372  007CB3  69                 	db	105	;'i'
   373  007CB4  61                 	db	97	;'a'
   374  007CB5  3A                 	db	58	;':'
   375  007CB6  00                 	db	0
   376  007CB7                     STR_9:
   377  007CB7  64                 	db	100	;'d'
   378  007CB8  65                 	db	101	;'e'
   379  007CB9  20                 	db	32
   380  007CBA  43                 	db	67	;'C'
   381  007CBB  6F                 	db	111	;'o'
   382  007CBC  72                 	db	114	;'r'
   383  007CBD  74                 	db	116	;'t'
   384  007CBE  65                 	db	101	;'e'
   385  007CBF  73                 	db	115	;'s'
   386  007CC0  3A                 	db	58	;':'
   387  007CC1  00                 	db	0
   388  007CC2                     STR_11:
   389  007CC2  43                 	db	67	;'C'
   390  007CC3  61                 	db	97	;'a'
   391  007CC4  6E                 	db	110	;'n'
   392  007CC5  63                 	db	99	;'c'
   393  007CC6  65                 	db	101	;'e'
   394  007CC7  6C                 	db	108	;'l'
   395  007CC8  61                 	db	97	;'a'
   396  007CC9  64                 	db	100	;'d'
   397  007CCA  61                 	db	97	;'a'
   398  007CCB  00                 	db	0
   399  007CCC                     STR_10:
   400  007CCC  4F                 	db	79	;'O'
   401  007CCD  70                 	db	112	;'p'
   402  007CCE  65                 	db	101	;'e'
   403  007CCF  72                 	db	114	;'r'
   404  007CD0  61                 	db	97	;'a'
   405  007CD1  63                 	db	99	;'c'
   406  007CD2  69                 	db	105	;'i'
   407  007CD3  6F                 	db	111	;'o'
   408  007CD4  6E                 	db	110	;'n'
   409  007CD5  00                 	db	0
   410  007CD6                     STR_37:
   411  007CD6  45                 	db	69	;'E'
   412  007CD7  6A                 	db	106	;'j'
   413  007CD8  65                 	db	101	;'e'
   414  007CD9  63                 	db	99	;'c'
   415  007CDA  75                 	db	117	;'u'
   416  007CDB  74                 	db	116	;'t'
   417  007CDC  61                 	db	97	;'a'
   418  007CDD  72                 	db	114	;'r'
   419  007CDE  00                 	db	0
   420  007CDF                     STR_3:
   421  007CDF  45                 	db	69	;'E'
   422  007CE0  78                 	db	120	;'x'
   423  007CE1  69                 	db	105	;'i'
   424  007CE2  74                 	db	116	;'t'
   425  007CE3  6F                 	db	111	;'o'
   426  007CE4  73                 	db	115	;'s'
   427  007CE5  61                 	db	97	;'a'
   428  007CE6  00                 	db	0
   429  007CE7                     STR_13:
   430  007CE7  43                 	db	67	;'C'
   431  007CE8  6F                 	db	111	;'o'
   432  007CE9  72                 	db	114	;'r'
   433  007CEA  74                 	db	116	;'t'
   434  007CEB  65                 	db	101	;'e'
   435  007CEC  20                 	db	32
   436  007CED  00                 	db	0
   437  007CEE                     STR_7:
   438  007CEE  45                 	db	69	;'E'
   439  007CEF  72                 	db	114	;'r'
   440  007CF0  72                 	db	114	;'r'
   441  007CF1  6F                 	db	111	;'o'
   442  007CF2  72                 	db	114	;'r'
   443  007CF3  21                 	db	33
   444  007CF4  00                 	db	0
   445  007CF5                     STR_5:
   446  007CF5  20                 	db	32
   447  007CF6  6D                 	db	109	;'m'
   448  007CF7  6D                 	db	109	;'m'
   449  007CF8  00                 	db	0
   450  007CF9                     STR_12:
   451  007CF9  25                 	db	37
   452  007CFA  64                 	db	100	;'d'
   453  007CFB  00                 	db	0
   454  007CFC                     STR_15:
   455  007CFC  2F                 	db	47
   456  007CFD  00                 	db	0
   457  0000                     
   458                           ; #config settings
   459  007CFE  00                 	db	0	; dummy byte at the end
   460  0000                     
   461                           	psect	cinit
   462  00660E                     __pcinit:
   463                           	opt stack 0
   464  00660E                     start_initialization:
   465                           	opt stack 0
   466  00660E                     __initialization:
   467                           	opt stack 0
   468                           
   469                           ; Clear objects allocated to BANK1 (2 bytes)
   470  00660E  0101               	movlb	1
   471  006610  6BA9               	clrf	(__pbssBANK1+1)& (0+255),b
   472  006612  6BA8               	clrf	__pbssBANK1& (0+255),b
   473                           
   474                           ; Clear objects allocated to COMRAM (2 bytes)
   475  006614  6A40               	clrf	(__pbssCOMRAM+1)& (0+255),c
   476  006616  6A3F               	clrf	__pbssCOMRAM& (0+255),c
   477  006618                     end_of_initialization:
   478                           	opt stack 0
   479  006618                     __end_of__initialization:
   480                           	opt stack 0
   481  006618  0E00               	movlw	low (__Lmediumconst shr (0+16))
   482  00661A  6EF8               	movwf	tblptru,c
   483  00661C  0100               	movlb	0
   484  00661E  EFF4  F033         	goto	_main	;jump to C main() function
   485                           tblptru	equ	0xFF8
   486                           
   487                           	psect	bssCOMRAM
   488  00003F                     __pbssCOMRAM:
   489                           	opt stack 0
   490  00003F                     _errno:
   491                           	opt stack 0
   492  00003F                     	ds	2
   493                           tblptru	equ	0xFF8
   494                           
   495                           	psect	bssBANK1
   496  0001A8                     __pbssBANK1:
   497                           	opt stack 0
   498  0001A8                     _steps:
   499                           	opt stack 0
   500  0001A8                     	ds	2
   501                           tblptru	equ	0xFF8
   502                           
   503                           	psect	cstackBANK1
   504  000100                     __pcstackBANK1:
   505                           	opt stack 0
   506  000100                     trabajo@distancias:
   507                           	opt stack 0
   508                           
   509                           ; 100 bytes @ 0x0
   510  000100                     	ds	100
   511  000164                     trabajo@cutx:
   512                           	opt stack 0
   513                           
   514                           ; 20 bytes @ 0x64
   515  000164                     	ds	20
   516  000178                     trabajo@outx:
   517                           	opt stack 0
   518                           
   519                           ; 20 bytes @ 0x78
   520  000178                     	ds	20
   521  00018C                     trabajo@mx:
   522                           	opt stack 0
   523                           
   524                           ; 20 bytes @ 0x8C
   525  00018C                     	ds	20
   526  0001A0                     trabajo@i:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0xA0
   530  0001A0                     	ds	2
   531  0001A2                     trabajo@m_281:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0xA2
   535  0001A2                     	ds	2
   536  0001A4                     trabajo@cuts:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0xA4
   540  0001A4                     	ds	1
   541  0001A5                     trabajo@m:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0xA5
   545  0001A5                     	ds	2
   546  0001A7                     trabajo@num:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0xA7
   550  0001A7                     	ds	1
   551                           tblptru	equ	0xFF8
   552                           
   553                           	psect	cstackCOMRAM
   554  000001                     __pcstackCOMRAM:
   555                           	opt stack 0
   556  000001                     ??_leer_teclado:
   557  000001                     ??_lcdcmd:
   558  000001                     ??_lcdwrite:
   559  000001                     ?___wmul:
   560                           	opt stack 0
   561  000001                     ?___awdiv:
   562                           	opt stack 0
   563  000001                     ?___lwdiv:
   564                           	opt stack 0
   565  000001                     ?___ftpack:
   566                           	opt stack 0
   567  000001                     ?___aldiv:
   568                           	opt stack 0
   569  000001                     ?___fttol:
   570                           	opt stack 0
   571  000001                     UART_Write@data:
   572                           	opt stack 0
   573  000001                     ___lbdiv@divisor:
   574                           	opt stack 0
   575  000001                     ___wmul@multiplier:
   576                           	opt stack 0
   577  000001                     ___awdiv@dividend:
   578                           	opt stack 0
   579  000001                     ___lwdiv@dividend:
   580                           	opt stack 0
   581  000001                     ___ftpack@arg:
   582                           	opt stack 0
   583  000001                     ___fttol@f1:
   584                           	opt stack 0
   585  000001                     frexp@value:
   586                           	opt stack 0
   587  000001                     ___aldiv@dividend:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0x0
   591  000001                     	ds	1
   592  000002                     lcdcmd@cmdout:
   593                           	opt stack 0
   594  000002                     lcdwrite@dataout:
   595                           	opt stack 0
   596  000002                     ___lbdiv@dividend:
   597                           	opt stack 0
   598  000002                     leer_teclado@j:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x1
   602  000002                     	ds	1
   603  000003                     ??_lcdinitialize:
   604  000003                     ??_lcdclear:
   605  000003                     ??_lcdsetCursor:
   606  000003                     ??_lcdshiftCursor:
   607  000003                     ___lbdiv@counter:
   608                           	opt stack 0
   609  000003                     lcdtext@t:
   610                           	opt stack 0
   611  000003                     ___wmul@multiplicand:
   612                           	opt stack 0
   613  000003                     ___awdiv@divisor:
   614                           	opt stack 0
   615  000003                     ___lwdiv@divisor:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x2
   619  000003                     	ds	1
   620  000004                     leer_teclado@tecla:
   621                           	opt stack 0
   622  000004                     lcdsetCursor@value:
   623                           	opt stack 0
   624  000004                     lcdshiftCursor@value:
   625                           	opt stack 0
   626  000004                     ___ftpack@exp:
   627                           	opt stack 0
   628  000004                     ___lbdiv@quotient:
   629                           	opt stack 0
   630  000004                     frexp@eptr:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x3
   634  000004                     	ds	1
   635  000005                     ??_lcdtext:
   636  000005                     ??___fttol:
   637  000005                     ___awdiv@counter:
   638                           	opt stack 0
   639  000005                     ___ftpack@sign:
   640                           	opt stack 0
   641  000005                     ___wmul@product:
   642                           	opt stack 0
   643  000005                     ___lwdiv@quotient:
   644                           	opt stack 0
   645  000005                     ___aldiv@divisor:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0x4
   649  000005                     	ds	1
   650  000006                     ??___ftpack:
   651  000006                     ??_frexp:
   652  000006                     ___awdiv@sign:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x5
   656  000006                     	ds	1
   657  000007                     ___lwdiv@counter:
   658                           	opt stack 0
   659  000007                     lcdtext@i:
   660                           	opt stack 0
   661  000007                     ___awdiv@quotient:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x6
   665  000007                     	ds	1
   666  000008                     ?___lwmod:
   667                           	opt stack 0
   668  000008                     ___lwmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x7
   672  000008                     	ds	1
   673  000009                     ?_calibracion:
   674                           	opt stack 0
   675  000009                     ?___awtoft:
   676                           	opt stack 0
   677  000009                     ?___lbtoft:
   678                           	opt stack 0
   679  000009                     ___aldiv@counter:
   680                           	opt stack 0
   681  000009                     calibracion@Input:
   682                           	opt stack 0
   683  000009                     ___awtoft@c:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x8
   687  000009                     	ds	1
   688  00000A                     ___aldiv@sign:
   689                           	opt stack 0
   690  00000A                     ___fttol@sign1:
   691                           	opt stack 0
   692  00000A                     ___lwmod@divisor:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x9
   696  00000A                     	ds	1
   697  00000B                     ??_calibracion:
   698  00000B                     ___aldiv@quotient:
   699                           	opt stack 0
   700  00000B                     ___fttol@lval:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0xA
   704  00000B                     	ds	1
   705  00000C                     ___awtoft@sign:
   706                           	opt stack 0
   707  00000C                     ___lbtoft@c:
   708                           	opt stack 0
   709  00000C                     ___lwmod@counter:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0xB
   713  00000C                     	ds	1
   714  00000D                     ?_sprintf:
   715                           	opt stack 0
   716  00000D                     sprintf@sp:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0xC
   720  00000D                     	ds	2
   721  00000F                     ___fttol@exp1:
   722                           	opt stack 0
   723  00000F                     sprintf@f:
   724                           	opt stack 0
   725  00000F                     UART_Init@baudrate:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0xE
   729  00000F                     	ds	1
   730  000010                     ?___altoft:
   731                           	opt stack 0
   732  000010                     calibracion@i:
   733                           	opt stack 0
   734  000010                     ___altoft@c:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0xF
   738  000010                     	ds	2
   739  000012                     calibracion@stepx:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x11
   743  000012                     	ds	1
   744  000013                     ??_sprintf:
   745  000013                     ??_UART_Init:
   746                           
   747                           ; 1 bytes @ 0x12
   748  000013                     	ds	1
   749  000014                     ??___altoft:
   750  000014                     sprintf@ap:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x13
   754  000014                     	ds	2
   755  000016                     sprintf@flag:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x15
   759  000016                     	ds	1
   760  000017                     sprintf@prec:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x16
   764  000017                     	ds	1
   765  000018                     ___altoft@exp:
   766                           	opt stack 0
   767  000018                     sprintf@val:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x17
   771  000018                     	ds	1
   772  000019                     ___altoft@sign:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x18
   776  000019                     	ds	1
   777  00001A                     sprintf@c:
   778                           	opt stack 0
   779  00001A                     trunc@x:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0x19
   783  00001A                     	ds	1
   784  00001B                     UART_Init@x:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x1A
   788  00001B                     	ds	2
   789  00001D                     trunc@i:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x1C
   793  00001D                     	ds	3
   794  000020                     trunc@expon:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x1F
   798  000020                     	ds	2
   799  000022                     ??_trabajo:
   800                           
   801                           ; 1 bytes @ 0x21
   802  000022                     	ds	4
   803  000026                     ??_menu:
   804                           
   805                           ; 1 bytes @ 0x25
   806  000026                     	ds	4
   807  00002A                     menu@stepx:
   808                           	opt stack 0
   809                           
   810                           ; 10 bytes @ 0x29
   811  00002A                     	ds	10
   812  000034                     menu@l:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x33
   816  000034                     	ds	2
   817  000036                     menu@k:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x35
   821  000036                     	ds	2
   822  000038                     menu@comandos:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x37
   826  000038                     	ds	2
   827  00003A                     menu@i:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x39
   831  00003A                     	ds	2
   832  00003C                     menu@c:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x3B
   836  00003C                     	ds	1
   837  00003D                     ??_main:
   838                           
   839                           ; 1 bytes @ 0x3C
   840  00003D                     	ds	2
   841                           tblptru	equ	0xFF8
   842                           
   843 ;;
   844 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   845 ;;
   846 ;; *************** function _main *****************
   847 ;; Defined at:
   848 ;;		line 424 in file "receptor.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;		None
   851 ;; Auto vars:     Size  Location     Type
   852 ;;		None
   853 ;; Return value:  Size  Location     Type
   854 ;;                  1    wreg      void 
   855 ;; Registers used:
   856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   857 ;; Tracked objects:
   858 ;;		On entry : 0/0
   859 ;;		On exit  : 0/0
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   862 ;;      Params:         0       0       0       0       0       0       0       0       0
   863 ;;      Locals:         0       0       0       0       0       0       0       0       0
   864 ;;      Temps:          2       0       0       0       0       0       0       0       0
   865 ;;      Totals:         2       0       0       0       0       0       0       0       0
   866 ;;Total ram usage:        2 bytes
   867 ;; Hardware stack levels required when called:    5
   868 ;; This function calls:
   869 ;;		_UART_Init
   870 ;;		_lcdinitialize
   871 ;;		_lcdtext
   872 ;;		_menu
   873 ;; This function is called by:
   874 ;;		Startup code after reset
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text0
   879  0067E8                     __ptext0:
   880                           	opt stack 0
   881  0067E8                     _main:
   882                           	opt stack 26
   883                           
   884                           ;receptor.c: 425: OSCCON = 0b01111110;
   885                           
   886                           ;incstack = 0
   887  0067E8  0E7E               	movlw	126
   888  0067EA  6ED3               	movwf	4051,c	;volatile
   889                           
   890                           ;receptor.c: 426: TRISB = 0;
   891  0067EC  0E00               	movlw	0
   892  0067EE  6E93               	movwf	3987,c	;volatile
   893                           
   894                           ;receptor.c: 427: TRISDbits.RD0 = 0;
   895  0067F0  9095               	bcf	3989,0,c	;volatile
   896                           
   897                           ;receptor.c: 428: TRISDbits.RD1 = 0;
   898  0067F2  9295               	bcf	3989,1,c	;volatile
   899                           
   900                           ;receptor.c: 429: lcdinitialize();
   901  0067F4  EC6E  F033         	call	_lcdinitialize	;wreg free
   902                           
   903                           ;receptor.c: 430: UART_Init(9600);
   904  0067F8  0E80               	movlw	128
   905  0067FA  6E0F               	movwf	UART_Init@baudrate,c
   906  0067FC  0E25               	movlw	37
   907  0067FE  6E10               	movwf	UART_Init@baudrate+1,c
   908  006800  0E00               	movlw	0
   909  006802  6E11               	movwf	UART_Init@baudrate+2,c
   910  006804  0E00               	movlw	0
   911  006806  6E12               	movwf	UART_Init@baudrate+3,c
   912  006808  EC9C  F036         	call	_UART_Init	;wreg free
   913                           
   914                           ;receptor.c: 431: lcdtext("   Bienvenido");
   915  00680C  0E5E               	movlw	low STR_39
   916  00680E  6E03               	movwf	lcdtext@t,c
   917  006810  0E7C               	movlw	high STR_39
   918  006812  6E04               	movwf	lcdtext@t+1,c
   919  006814  EC72  F034         	call	_lcdtext	;wreg free
   920                           
   921                           ;receptor.c: 432: _delay((unsigned long)((2000)*(8000000/4000.0)));
   922  006818  0E15               	movlw	21
   923  00681A  6E3E               	movwf	(??_main+1)& (0+255),c
   924  00681C  0E4B               	movlw	75
   925  00681E  6E3D               	movwf	??_main& (0+255),c
   926  006820  0EBE               	movlw	190
   927  006822                     u2937:
   928  006822  2EE8               	decfsz	wreg,f,c
   929  006824  D7FE               	bra	u2937
   930  006826  2E3D               	decfsz	??_main& (0+255),f,c
   931  006828  D7FC               	bra	u2937
   932  00682A  2E3E               	decfsz	(??_main+1)& (0+255),f,c
   933  00682C  D7FA               	bra	u2937
   934  00682E  D000               	nop2	
   935  006830  EC60  F039         	call	_menu	;wreg free
   936  006834  D7FD               	goto	l286
   937  006836                     __end_of_main:
   938                           	opt stack 0
   939                           tblptru	equ	0xFF8
   940                           wreg	equ	0xFE8
   941                           
   942 ;; *************** function _menu *****************
   943 ;; Defined at:
   944 ;;		line 381 in file "receptor.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;		None
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  k               2   53[COMRAM] int 
   949 ;;  i               2   57[COMRAM] int 
   950 ;;  stepx          10   41[COMRAM] unsigned char [10]
   951 ;;  comandos        2   55[COMRAM] PTR const unsigned char 
   952 ;;		 -> STR_35(27), 
   953 ;;  l               2   51[COMRAM] int 
   954 ;;  c               1   59[COMRAM] unsigned char 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   964 ;;      Params:         0       0       0       0       0       0       0       0       0
   965 ;;      Locals:        19       0       0       0       0       0       0       0       0
   966 ;;      Temps:          4       0       0       0       0       0       0       0       0
   967 ;;      Totals:        23       0       0       0       0       0       0       0       0
   968 ;;Total ram usage:       23 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    4
   971 ;; This function calls:
   972 ;;		___wmul
   973 ;;		_calibracion
   974 ;;		_lcdclear
   975 ;;		_lcdsetCursor
   976 ;;		_lcdtext
   977 ;;		_lcdwrite
   978 ;;		_leer_teclado
   979 ;;		_trabajo
   980 ;; This function is called by:
   981 ;;		_main
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           	psect	text1
   986  0072C0                     __ptext1:
   987                           	opt stack 0
   988  0072C0                     _menu:
   989                           	opt stack 26
   990                           
   991                           ;receptor.c: 382: const char *comandos = "   1)Trabajo 2)Calibracion";
   992                           
   993                           ;incstack = 0
   994  0072C0  0EC1               	movlw	low STR_35
   995  0072C2  6E38               	movwf	menu@comandos,c
   996  0072C4  0E7B               	movlw	high STR_35
   997  0072C6  6E39               	movwf	menu@comandos+1,c
   998                           
   999                           ;receptor.c: 383: int l;
  1000                           ;receptor.c: 384: char stepx[10];
  1001                           ;receptor.c: 385: unsigned char c = 0;
  1002  0072C8  0E00               	movlw	0
  1003  0072CA  6E3C               	movwf	menu@c,c
  1004                           
  1005                           ;receptor.c: 386: for (l = 0; comandos[l] != '\0'; l++);
  1006  0072CC  0E00               	movlw	0
  1007  0072CE  6E35               	movwf	menu@l+1,c
  1008  0072D0  0E00               	movlw	0
  1009  0072D2  6E34               	movwf	menu@l,c
  1010  0072D4  D002               	goto	l260
  1011  0072D6  4A34               	infsnz	menu@l,f,c
  1012  0072D8  2A35               	incf	menu@l+1,f,c
  1013  0072DA                     l260:
  1014  0072DA  5034               	movf	menu@l,w,c
  1015  0072DC  2438               	addwf	menu@comandos,w,c
  1016  0072DE  6E26               	movwf	??_menu& (0+255),c
  1017  0072E0  5035               	movf	menu@l+1,w,c
  1018  0072E2  2039               	addwfc	menu@comandos+1,w,c
  1019  0072E4  6E27               	movwf	(??_menu+1)& (0+255),c
  1020  0072E6  C026  FFF6         	movff	??_menu,tblptrl
  1021  0072EA  C027  FFF7         	movff	??_menu+1,tblptrh
  1022  0072EE                     	if	0	;tblptru may be non-zero
  1023  0072EE                     	endif
  1024  0072EE                     	if	0	;tblptru may be non-zero
  1025  0072EE                     	endif
  1026  0072EE  0008               	tblrd		*
  1027  0072F0  50F5               	movf	tablat,w,c
  1028  0072F2  0900               	iorlw	0
  1029  0072F4  A4D8               	btfss	status,2,c
  1030  0072F6  D7EF               	goto	l261
  1031                           
  1032                           ;receptor.c: 387: lcdclear();
  1033  0072F8  EC11  F033         	call	_lcdclear	;wreg free
  1034                           
  1035                           ;receptor.c: 388: lcdtext("Elija un Comando:");
  1036  0072FC  0EF1               	movlw	low STR_36
  1037  0072FE  6E03               	movwf	lcdtext@t,c
  1038  007300  0E7B               	movlw	high STR_36
  1039  007302  6E04               	movwf	lcdtext@t+1,c
  1040  007304  EC72  F034         	call	_lcdtext	;wreg free
  1041                           
  1042                           ;receptor.c: 389: while (c == 0) {
  1043  007308  D0A8               	goto	l279
  1044  00730A                     
  1045                           ;receptor.c: 390: for (int i = 0; comandos[i + 13] != '\0'; i++) {
  1046  00730A  0E00               	movlw	0
  1047  00730C  6E3B               	movwf	menu@i+1,c
  1048  00730E  0E00               	movlw	0
  1049  007310  6E3A               	movwf	menu@i,c
  1050  007312  D089               	goto	l265
  1051  007314                     
  1052                           ;receptor.c: 391: lcdsetCursor(0x40);
  1053  007314  0E40               	movlw	64
  1054  007316  EC1D  F033         	call	_lcdsetCursor
  1055                           
  1056                           ;receptor.c: 392: lcdtext(comandos + i);
  1057  00731A  503A               	movf	menu@i,w,c
  1058  00731C  2438               	addwf	menu@comandos,w,c
  1059  00731E  6E03               	movwf	lcdtext@t,c
  1060  007320  503B               	movf	menu@i+1,w,c
  1061  007322  2039               	addwfc	menu@comandos+1,w,c
  1062  007324  6E04               	movwf	lcdtext@t+1,c
  1063  007326  EC72  F034         	call	_lcdtext	;wreg free
  1064                           
  1065                           ;receptor.c: 393: lcdsetCursor(0x40 + l - i);
  1066  00732A  503A               	movf	menu@i,w,c
  1067  00732C  0800               	sublw	0
  1068  00732E  2434               	addwf	menu@l,w,c
  1069  007330  0F40               	addlw	64
  1070  007332  EC1D  F033         	call	_lcdsetCursor
  1071                           
  1072                           ;receptor.c: 394: lcdwrite(' ');
  1073  007336  0E20               	movlw	32
  1074  007338  EC3A  F033         	call	_lcdwrite
  1075                           
  1076                           ;receptor.c: 395: c = leer_teclado();
  1077  00733C  ECD6  F037         	call	_leer_teclado	;wreg free
  1078  007340  6E3C               	movwf	menu@c,c
  1079                           
  1080                           ;receptor.c: 396: switch (c) {
  1081  007342  D064               	goto	l267
  1082  007344                     
  1083                           ;receptor.c: 398: if (steps != 0)trabajo();
  1084  007344  0101               	movlb	1	; () banked
  1085  007346  51A8               	movf	_steps& (0+255),w,b
  1086  007348  11A9               	iorwf	(_steps+1)& (0+255),w,b
  1087  00734A  B4D8               	btfsc	status,2,c
  1088  00734C  D003               	goto	l269
  1089                           
  1090                           ; BSR set to: 1
  1091  00734E  EC31  F03A         	call	_trabajo	;wreg free
  1092  007352  D064               	goto	l271
  1093  007354                     l269:
  1094                           
  1095                           ;receptor.c: 399: else {
  1096                           ;receptor.c: 400: lcdclear();
  1097  007354  EC11  F033         	call	_lcdclear	;wreg free
  1098                           
  1099                           ;receptor.c: 401: lcdtext("Ejecutar");
  1100  007358  0ED6               	movlw	low STR_37
  1101  00735A  6E03               	movwf	lcdtext@t,c
  1102  00735C  0E7C               	movlw	high STR_37
  1103  00735E  6E04               	movwf	lcdtext@t+1,c
  1104  007360  EC72  F034         	call	_lcdtext	;wreg free
  1105                           
  1106                           ;receptor.c: 402: lcdsetCursor(0x40);
  1107  007364  0E40               	movlw	64
  1108  007366  EC1D  F033         	call	_lcdsetCursor
  1109                           
  1110                           ;receptor.c: 403: lcdtext("Calibracion!");
  1111  00736A  0E6C               	movlw	low STR_38
  1112  00736C  6E03               	movwf	lcdtext@t,c
  1113  00736E  0E7C               	movlw	high STR_38
  1114  007370  6E04               	movwf	lcdtext@t+1,c
  1115  007372  EC72  F034         	call	_lcdtext	;wreg free
  1116                           
  1117                           ;receptor.c: 404: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1118  007376  0E15               	movlw	21
  1119  007378  6E27               	movwf	(??_menu+1)& (0+255),c
  1120  00737A  0E4B               	movlw	75
  1121  00737C  6E26               	movwf	??_menu& (0+255),c
  1122  00737E  0EBE               	movlw	190
  1123  007380                     u2947:
  1124  007380  2EE8               	decfsz	wreg,f,c
  1125  007382  D7FE               	bra	u2947
  1126  007384  2E26               	decfsz	??_menu& (0+255),f,c
  1127  007386  D7FC               	bra	u2947
  1128  007388  2E27               	decfsz	(??_menu+1)& (0+255),f,c
  1129  00738A  D7FA               	bra	u2947
  1130  00738C  D000               	nop2	
  1131                           
  1132                           ;receptor.c: 405: }
  1133                           ;receptor.c: 406: break;
  1134  00738E  D046               	goto	l271
  1135  007390                     
  1136                           ;receptor.c: 408: steps = 0;
  1137  007390  0E00               	movlw	0
  1138  007392  0101               	movlb	1	; () banked
  1139  007394  6FA9               	movwf	(_steps+1)& (0+255),b
  1140  007396  0E00               	movlw	0
  1141  007398  6FA8               	movwf	_steps& (0+255),b
  1142                           
  1143                           ; BSR set to: 1
  1144                           ;receptor.c: 409: *stepx = calibracion(stepx);
  1145  00739A  0E2A               	movlw	low menu@stepx
  1146  00739C  6E09               	movwf	calibracion@Input,c
  1147  00739E  0E00               	movlw	high menu@stepx
  1148  0073A0  6E0A               	movwf	calibracion@Input+1,c
  1149  0073A2  EC92  F038         	call	_calibracion	;wreg free
  1150  0073A6  5009               	movf	?_calibracion,w,c
  1151  0073A8  6E2A               	movwf	menu@stepx,c
  1152                           
  1153                           ;receptor.c: 410: for (int k = 0; stepx[k] != '\0'; k++) {
  1154  0073AA  0E00               	movlw	0
  1155  0073AC  6E37               	movwf	menu@k+1,c
  1156  0073AE  0E00               	movlw	0
  1157  0073B0  6E36               	movwf	menu@k,c
  1158  0073B2  D01F               	goto	l273
  1159  0073B4                     
  1160                           ;receptor.c: 411: steps = steps * 10 + stepx[k] - '0';
  1161  0073B4  C1A8  F001         	movff	_steps,___wmul@multiplier
  1162  0073B8  C1A9  F002         	movff	_steps+1,___wmul@multiplier+1
  1163  0073BC  0E00               	movlw	0
  1164  0073BE  6E04               	movwf	___wmul@multiplicand+1,c
  1165  0073C0  0E0A               	movlw	10
  1166  0073C2  6E03               	movwf	___wmul@multiplicand,c
  1167  0073C4  EC5B  F033         	call	___wmul	;wreg free
  1168  0073C8  0E2A               	movlw	low menu@stepx
  1169  0073CA  2436               	addwf	menu@k,w,c
  1170  0073CC  6ED9               	movwf	fsr2l,c
  1171  0073CE  0E00               	movlw	high menu@stepx
  1172  0073D0  2037               	addwfc	menu@k+1,w,c
  1173  0073D2  6EDA               	movwf	fsr2h,c
  1174  0073D4  50DF               	movf	indf2,w,c
  1175  0073D6  6E26               	movwf	??_menu& (0+255),c
  1176  0073D8  5026               	movf	??_menu,w,c
  1177  0073DA  2601               	addwf	?___wmul,f,c
  1178  0073DC  0E00               	movlw	0
  1179  0073DE  2202               	addwfc	?___wmul+1,f,c
  1180  0073E0  0ED0               	movlw	208
  1181  0073E2  2401               	addwf	?___wmul,w,c
  1182  0073E4  0101               	movlb	1	; () banked
  1183  0073E6  6FA8               	movwf	_steps& (0+255),b
  1184  0073E8  0EFF               	movlw	255
  1185  0073EA  2002               	addwfc	?___wmul+1,w,c
  1186  0073EC  6FA9               	movwf	(_steps+1)& (0+255),b
  1187                           
  1188                           ; BSR set to: 1
  1189  0073EE  4A36               	infsnz	menu@k,f,c
  1190  0073F0  2A37               	incf	menu@k+1,f,c
  1191  0073F2                     l273:
  1192                           
  1193                           ; BSR set to: 1
  1194  0073F2  0E2A               	movlw	low menu@stepx
  1195  0073F4  2436               	addwf	menu@k,w,c
  1196  0073F6  6ED9               	movwf	fsr2l,c
  1197  0073F8  0E00               	movlw	high menu@stepx
  1198  0073FA  2037               	addwfc	menu@k+1,w,c
  1199  0073FC  6EDA               	movwf	fsr2h,c
  1200  0073FE  50DF               	movf	indf2,w,c
  1201  007400  B4D8               	btfsc	status,2,c
  1202  007402  D00C               	goto	l271
  1203  007404  D7D7               	goto	l274
  1204  007406                     
  1205                           ;receptor.c: 415: c = 0;
  1206  007406  0E00               	movlw	0
  1207  007408  6E3C               	movwf	menu@c,c
  1208                           
  1209                           ;receptor.c: 417: }
  1210                           
  1211                           ;receptor.c: 416: break;
  1212  00740A  D008               	goto	l271
  1213  00740C                     l267:
  1214  00740C  503C               	movf	menu@c,w,c
  1215                           
  1216                           ; Switch size 1, requested type "space"
  1217                           ; Number of cases is 2, Range of values is 49 to 50
  1218                           ; switch strategies available:
  1219                           ; Name         Instructions Cycles
  1220                           ; simple_byte            7     4 (average)
  1221                           ;	Chosen strategy is simple_byte
  1222  00740E  0A31               	xorlw	49	; case 49
  1223  007410  B4D8               	btfsc	status,2,c
  1224  007412  D798               	goto	l268
  1225  007414  0A03               	xorlw	3	; case 50
  1226  007416  B4D8               	btfsc	status,2,c
  1227  007418  D7BB               	goto	l272
  1228  00741A  D7F5               	goto	l276
  1229  00741C                     l271:
  1230                           
  1231                           ;receptor.c: 418: if (c != 0)break;
  1232  00741C  503C               	movf	menu@c,w,c
  1233  00741E  A4D8               	btfss	status,2,c
  1234  007420  D019               	goto	u2880
  1235  007422  4A3A               	infsnz	menu@i,f,c
  1236  007424  2A3B               	incf	menu@i+1,f,c
  1237  007426                     l265:
  1238  007426  0E0D               	movlw	13
  1239  007428  243A               	addwf	menu@i,w,c
  1240  00742A  6E26               	movwf	??_menu& (0+255),c
  1241  00742C  0E00               	movlw	0
  1242  00742E  203B               	addwfc	menu@i+1,w,c
  1243  007430  6E27               	movwf	(??_menu+1)& (0+255),c
  1244  007432  C038  F028         	movff	menu@comandos,??_menu+2
  1245  007436  C039  F029         	movff	menu@comandos+1,??_menu+3
  1246  00743A  5026               	movf	??_menu,w,c
  1247  00743C  2628               	addwf	??_menu+2,f,c
  1248  00743E  5027               	movf	??_menu+1,w,c
  1249  007440  2229               	addwfc	??_menu+3,f,c
  1250  007442  C028  FFF6         	movff	??_menu+2,tblptrl
  1251  007446  C029  FFF7         	movff	??_menu+3,tblptrh
  1252  00744A                     	if	0	;tblptru may be non-zero
  1253  00744A                     	endif
  1254  00744A                     	if	0	;tblptru may be non-zero
  1255  00744A                     	endif
  1256  00744A  0008               	tblrd		*
  1257  00744C  50F5               	movf	tablat,w,c
  1258  00744E  0900               	iorlw	0
  1259  007450  A4D8               	btfss	status,2,c
  1260  007452  D760               	goto	l266
  1261  007454                     u2880:
  1262                           
  1263                           ;receptor.c: 419: }
  1264                           ;receptor.c: 420: if (c != 0)break;
  1265  007454  503C               	movf	menu@c,w,c
  1266  007456  A4D8               	btfss	status,2,c
  1267  007458  0012               	return	
  1268  00745A                     l279:
  1269  00745A  503C               	movf	menu@c,w,c
  1270  00745C  A4D8               	btfss	status,2,c
  1271  00745E  0012               	return	
  1272  007460  D754               	goto	l264
  1273  007462                     __end_of_menu:
  1274                           	opt stack 0
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           wreg	equ	0xFE8
  1280                           indf2	equ	0xFDF
  1281                           fsr2h	equ	0xFDA
  1282                           fsr2l	equ	0xFD9
  1283                           status	equ	0xFD8
  1284                           
  1285 ;; *************** function _trabajo *****************
  1286 ;; Defined at:
  1287 ;;		line 222 in file "receptor.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;		None
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  i               2  160[BANK1 ] int 
  1292 ;;  m               2  162[BANK1 ] int 
  1293 ;;  m               2  165[BANK1 ] int 
  1294 ;;  distancias    100    0[BANK1 ] int [50]
  1295 ;;  mx             20  140[BANK1 ] unsigned char [20]
  1296 ;;  outx           20  120[BANK1 ] unsigned char [20]
  1297 ;;  cutx           20  100[BANK1 ] unsigned char [20]
  1298 ;;  num             1  167[BANK1 ] unsigned char 
  1299 ;;  cuts            1  164[BANK1 ] unsigned char 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1309 ;;      Params:         0       0       0       0       0       0       0       0       0
  1310 ;;      Locals:         0       0     168       0       0       0       0       0       0
  1311 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1312 ;;      Totals:         4       0     168       0       0       0       0       0       0
  1313 ;;Total ram usage:      172 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    3
  1316 ;; This function calls:
  1317 ;;		_UART_Data_Ready
  1318 ;;		_UART_Read
  1319 ;;		_UART_Write
  1320 ;;		___awdiv
  1321 ;;		___awtoft
  1322 ;;		___lbdiv
  1323 ;;		___lbtoft
  1324 ;;		___wmul
  1325 ;;		_lcdclear
  1326 ;;		_lcdsetCursor
  1327 ;;		_lcdshiftCursor
  1328 ;;		_lcdtext
  1329 ;;		_lcdwrite
  1330 ;;		_leer_teclado
  1331 ;;		_sprintf
  1332 ;;		_trunc
  1333 ;; This function is called by:
  1334 ;;		_menu
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text2
  1339  007462                     __ptext2:
  1340                           	opt stack 0
  1341  007462                     _trabajo:
  1342                           	opt stack 26
  1343                           
  1344                           ;receptor.c: 223: unsigned char num = 0;
  1345                           
  1346                           ;incstack = 0
  1347  007462  0E00               	movlw	0
  1348  007464  0101               	movlb	1	; () banked
  1349  007466  6FA7               	movwf	trabajo@num& (0+255),b
  1350                           
  1351                           ;receptor.c: 224: unsigned char cuts = 0;
  1352  007468  0E00               	movlw	0
  1353  00746A  6FA4               	movwf	trabajo@cuts& (0+255),b
  1354                           
  1355                           ; BSR set to: 1
  1356                           ;receptor.c: 225: char cutx[20];
  1357                           ;receptor.c: 226: char mx[20];
  1358                           ;receptor.c: 227: char outx[20];
  1359                           ;receptor.c: 228: int distancias[50];
  1360                           ;receptor.c: 229: lcdclear();
  1361  00746C  EC11  F033         	call	_lcdclear	;wreg free
  1362                           
  1363                           ;receptor.c: 230: lcdtext("Ingrese Numero");
  1364  007470  0E33               	movlw	low STR_8
  1365  007472  6E03               	movwf	lcdtext@t,c
  1366  007474  0E7C               	movlw	high STR_8
  1367  007476  6E04               	movwf	lcdtext@t+1,c
  1368  007478  EC72  F034         	call	_lcdtext	;wreg free
  1369                           
  1370                           ;receptor.c: 231: lcdsetCursor(0x40);
  1371  00747C  0E40               	movlw	64
  1372  00747E  EC1D  F033         	call	_lcdsetCursor
  1373                           
  1374                           ;receptor.c: 232: lcdtext("de Cortes:");
  1375  007482  0EB7               	movlw	low STR_9
  1376  007484  6E03               	movwf	lcdtext@t,c
  1377  007486  0E7C               	movlw	high STR_9
  1378  007488  6E04               	movwf	lcdtext@t+1,c
  1379  00748A  EC72  F034         	call	_lcdtext	;wreg free
  1380                           
  1381                           ;receptor.c: 233: while (num != 'A') {
  1382  00748E  D044               	goto	l209
  1383  007490                     
  1384                           ;receptor.c: 234: num = leer_teclado();
  1385  007490  ECD6  F037         	call	_leer_teclado	;wreg free
  1386  007494  0101               	movlb	1	; () banked
  1387  007496  6FA7               	movwf	trabajo@num& (0+255),b
  1388                           
  1389                           ; BSR set to: 1
  1390                           ;receptor.c: 235: if (num >= '0' && num <= '9') {
  1391  007498  0E2F               	movlw	47
  1392  00749A  65A7               	cpfsgt	trabajo@num& (0+255),b
  1393  00749C  D015               	goto	l205
  1394                           
  1395                           ; BSR set to: 1
  1396  00749E  0E3A               	movlw	58
  1397  0074A0  61A7               	cpfslt	trabajo@num& (0+255),b
  1398  0074A2  D012               	goto	l205
  1399                           
  1400                           ; BSR set to: 1
  1401                           ;receptor.c: 236: if (!(cuts == 0 && num == '0')) {
  1402  0074A4  51A4               	movf	trabajo@cuts& (0+255),w,b
  1403  0074A6  A4D8               	btfss	status,2,c
  1404  0074A8  D004               	goto	u2400
  1405                           
  1406                           ; BSR set to: 1
  1407  0074AA  0E30               	movlw	48
  1408  0074AC  19A7               	xorwf	trabajo@num& (0+255),w,b
  1409  0074AE  B4D8               	btfsc	status,2,c
  1410  0074B0  D00B               	goto	l205
  1411  0074B2                     u2400:
  1412                           
  1413                           ; BSR set to: 1
  1414                           ;receptor.c: 237: lcdwrite(num);
  1415                           
  1416                           ; BSR set to: 1
  1417  0074B2  51A7               	movf	trabajo@num& (0+255),w,b
  1418  0074B4  EC3A  F033         	call	_lcdwrite
  1419                           
  1420                           ;receptor.c: 238: cuts *= 10;
  1421  0074B8  0E0A               	movlw	10
  1422  0074BA  0101               	movlb	1	; () banked
  1423  0074BC  03A4               	mulwf	trabajo@cuts& (0+255),b
  1424  0074BE  50F3               	movf	prodl,w,c
  1425  0074C0  6FA4               	movwf	trabajo@cuts& (0+255),b
  1426                           
  1427                           ; BSR set to: 1
  1428                           ;receptor.c: 239: cuts += num - '0';
  1429  0074C2  51A7               	movf	trabajo@num& (0+255),w,b
  1430  0074C4  0FD0               	addlw	208
  1431  0074C6  27A4               	addwf	trabajo@cuts& (0+255),f,b
  1432  0074C8                     l205:
  1433                           
  1434                           ; BSR set to: 1
  1435                           ;receptor.c: 240: }
  1436                           ;receptor.c: 241: }
  1437                           ;receptor.c: 242: if ((num == 'C') && (cuts > 0)) {
  1438                           
  1439                           ; BSR set to: 1
  1440                           
  1441                           ; BSR set to: 1
  1442  0074C8  0E43               	movlw	67
  1443  0074CA  19A7               	xorwf	trabajo@num& (0+255),w,b
  1444  0074CC  A4D8               	btfss	status,2,c
  1445  0074CE  D01F               	goto	l208
  1446                           
  1447                           ; BSR set to: 1
  1448  0074D0  51A4               	movf	trabajo@cuts& (0+255),w,b
  1449  0074D2  B4D8               	btfsc	status,2,c
  1450  0074D4  D01C               	goto	l208
  1451                           
  1452                           ; BSR set to: 1
  1453                           ;receptor.c: 243: lcdshiftCursor('L');
  1454  0074D6  0E4C               	movlw	76
  1455  0074D8  EC82  F033         	call	_lcdshiftCursor
  1456                           
  1457                           ;receptor.c: 244: lcdwrite(' ');
  1458  0074DC  0E20               	movlw	32
  1459  0074DE  EC3A  F033         	call	_lcdwrite
  1460                           
  1461                           ;receptor.c: 245: lcdshiftCursor('L');
  1462  0074E2  0E4C               	movlw	76
  1463  0074E4  EC82  F033         	call	_lcdshiftCursor
  1464                           
  1465                           ;receptor.c: 246: cuts /= 10;
  1466  0074E8  0E0A               	movlw	10
  1467  0074EA  6E01               	movwf	___lbdiv@divisor,c
  1468  0074EC  0101               	movlb	1	; () banked
  1469  0074EE  51A4               	movf	trabajo@cuts& (0+255),w,b
  1470  0074F0  ECB6  F033         	call	___lbdiv
  1471  0074F4  0101               	movlb	1	; () banked
  1472  0074F6  6FA4               	movwf	trabajo@cuts& (0+255),b
  1473                           
  1474                           ; BSR set to: 1
  1475                           ;receptor.c: 247: trunc(cuts);
  1476  0074F8  51A4               	movf	trabajo@cuts& (0+255),w,b
  1477  0074FA  EC49  F033         	call	___lbtoft
  1478  0074FE  C009  F01A         	movff	?___lbtoft,trunc@x
  1479  007502  C00A  F01B         	movff	?___lbtoft+1,trunc@x+1
  1480  007506  C00B  F01C         	movff	?___lbtoft+2,trunc@x+2
  1481  00750A  EC44  F034         	call	_trunc	;wreg free
  1482  00750E                     l208:
  1483                           
  1484                           ;receptor.c: 248: }
  1485                           ;receptor.c: 249: if (num == 'B')break;
  1486  00750E  0E42               	movlw	66
  1487  007510  0101               	movlb	1	; () banked
  1488  007512  19A7               	xorwf	trabajo@num& (0+255),w,b
  1489  007514  B4D8               	btfsc	status,2,c
  1490  007516  D005               	goto	u2440
  1491  007518                     l209:
  1492                           
  1493                           ; BSR set to: 1
  1494                           
  1495                           ; BSR set to: 1
  1496  007518  0E41               	movlw	65
  1497  00751A  0101               	movlb	1	; () banked
  1498  00751C  19A7               	xorwf	trabajo@num& (0+255),w,b
  1499  00751E  A4D8               	btfss	status,2,c
  1500  007520  D7B7               	goto	l203
  1501  007522                     u2440:
  1502                           
  1503                           ; BSR set to: 1
  1504                           ;receptor.c: 250: }
  1505                           ;receptor.c: 251: if (num == 'B') {
  1506                           
  1507                           ; BSR set to: 1
  1508  007522  0E42               	movlw	66
  1509  007524  19A7               	xorwf	trabajo@num& (0+255),w,b
  1510  007526  A4D8               	btfss	status,2,c
  1511  007528  D01E               	goto	l211
  1512                           
  1513                           ; BSR set to: 1
  1514                           ;receptor.c: 252: lcdclear();
  1515  00752A  EC11  F033         	call	_lcdclear	;wreg free
  1516                           
  1517                           ;receptor.c: 253: lcdtext("Operacion");
  1518  00752E  0ECC               	movlw	low STR_10
  1519  007530  6E03               	movwf	lcdtext@t,c
  1520  007532  0E7C               	movlw	high STR_10
  1521  007534  6E04               	movwf	lcdtext@t+1,c
  1522  007536  EC72  F034         	call	_lcdtext	;wreg free
  1523                           
  1524                           ;receptor.c: 254: lcdsetCursor(0x40);
  1525  00753A  0E40               	movlw	64
  1526  00753C  EC1D  F033         	call	_lcdsetCursor
  1527                           
  1528                           ;receptor.c: 255: lcdtext("Cancelada");
  1529  007540  0EC2               	movlw	low STR_11
  1530  007542  6E03               	movwf	lcdtext@t,c
  1531  007544  0E7C               	movlw	high STR_11
  1532  007546  6E04               	movwf	lcdtext@t+1,c
  1533  007548  EC72  F034         	call	_lcdtext	;wreg free
  1534                           
  1535                           ;receptor.c: 256: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1536  00754C  0E15               	movlw	21
  1537  00754E  6E23               	movwf	(??_trabajo+1)& (0+255),c
  1538  007550  0E4B               	movlw	75
  1539  007552  6E22               	movwf	??_trabajo& (0+255),c
  1540  007554  0EBE               	movlw	190
  1541  007556                     u2957:
  1542  007556  2EE8               	decfsz	wreg,f,c
  1543  007558  D7FE               	bra	u2957
  1544  00755A  2E22               	decfsz	??_trabajo& (0+255),f,c
  1545  00755C  D7FC               	bra	u2957
  1546  00755E  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  1547  007560  D7FA               	bra	u2957
  1548  007562  D000               	nop2	
  1549                           
  1550                           ;receptor.c: 257: } else {
  1551  007564  0012               	return	
  1552  007566                     l211:
  1553                           
  1554                           ;receptor.c: 258: sprintf(cutx, "%d", cuts);
  1555  007566  0E64               	movlw	low trabajo@cutx
  1556  007568  6E0D               	movwf	sprintf@sp,c
  1557  00756A  0E01               	movlw	high trabajo@cutx
  1558  00756C  6E0E               	movwf	sprintf@sp+1,c
  1559  00756E  0EF9               	movlw	low STR_12
  1560  007570  6E0F               	movwf	sprintf@f,c
  1561  007572  0E7C               	movlw	high STR_12
  1562  007574  6E10               	movwf	sprintf@f+1,c
  1563  007576  C1A4  F011         	movff	trabajo@cuts,?_sprintf+4
  1564  00757A  6A12               	clrf	?_sprintf+5,c
  1565  00757C  EC32  F037         	call	_sprintf	;wreg free
  1566                           
  1567                           ;receptor.c: 259: for (int m = 0; m < cuts; m++) {
  1568  007580  0E00               	movlw	0
  1569  007582  0101               	movlb	1	; () banked
  1570  007584  6FA6               	movwf	(trabajo@m+1)& (0+255),b
  1571  007586  0E00               	movlw	0
  1572  007588  6FA5               	movwf	trabajo@m& (0+255),b
  1573  00758A  D17D               	goto	l213
  1574  00758C                     
  1575                           ; BSR set to: 1
  1576                           ;receptor.c: 260: distancias[m] = 0;
  1577                           
  1578                           ; BSR set to: 1
  1579  00758C  90D8               	bcf	status,0,c
  1580  00758E  35A5               	rlcf	trabajo@m& (0+255),w,b
  1581  007590  6ED9               	movwf	fsr2l,c
  1582  007592  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1583  007594  6EDA               	movwf	fsr2h,c
  1584  007596  0E00               	movlw	low trabajo@distancias
  1585  007598  26D9               	addwf	fsr2l,f,c
  1586  00759A  0E01               	movlw	high trabajo@distancias
  1587  00759C  22DA               	addwfc	fsr2h,f,c
  1588  00759E  0E00               	movlw	0
  1589  0075A0  6EDE               	movwf	postinc2,c
  1590  0075A2  0E00               	movlw	0
  1591  0075A4  6EDD               	movwf	postdec2,c
  1592                           
  1593                           ; BSR set to: 1
  1594                           ;receptor.c: 261: num = 0;
  1595  0075A6  0E00               	movlw	0
  1596  0075A8  6FA7               	movwf	trabajo@num& (0+255),b
  1597                           
  1598                           ; BSR set to: 1
  1599                           ;receptor.c: 262: lcdclear();
  1600  0075AA  EC11  F033         	call	_lcdclear	;wreg free
  1601                           
  1602                           ;receptor.c: 263: lcdtext("Corte ");
  1603  0075AE  0EE7               	movlw	low STR_13
  1604  0075B0  6E03               	movwf	lcdtext@t,c
  1605  0075B2  0E7C               	movlw	high STR_13
  1606  0075B4  6E04               	movwf	lcdtext@t+1,c
  1607  0075B6  EC72  F034         	call	_lcdtext	;wreg free
  1608                           
  1609                           ;receptor.c: 264: lcdsetCursor(0x06);
  1610  0075BA  0E06               	movlw	6
  1611  0075BC  EC1D  F033         	call	_lcdsetCursor
  1612                           
  1613                           ;receptor.c: 265: sprintf(mx, "%d", m + 1);
  1614  0075C0  0E8C               	movlw	low trabajo@mx
  1615  0075C2  6E0D               	movwf	sprintf@sp,c
  1616  0075C4  0E01               	movlw	high trabajo@mx
  1617  0075C6  6E0E               	movwf	sprintf@sp+1,c
  1618  0075C8  0EF9               	movlw	low STR_12
  1619  0075CA  6E0F               	movwf	sprintf@f,c
  1620  0075CC  0E7C               	movlw	high STR_12
  1621  0075CE  6E10               	movwf	sprintf@f+1,c
  1622  0075D0  0E01               	movlw	1
  1623  0075D2  0101               	movlb	1	; () banked
  1624  0075D4  25A5               	addwf	trabajo@m& (0+255),w,b
  1625  0075D6  6E11               	movwf	?_sprintf+4,c
  1626  0075D8  0E00               	movlw	0
  1627  0075DA  21A6               	addwfc	(trabajo@m+1)& (0+255),w,b
  1628  0075DC  6E12               	movwf	?_sprintf+5,c
  1629  0075DE  EC32  F037         	call	_sprintf	;wreg free
  1630                           
  1631                           ;receptor.c: 266: lcdtext(mx);
  1632  0075E2  0E8C               	movlw	low trabajo@mx
  1633  0075E4  6E03               	movwf	lcdtext@t,c
  1634  0075E6  0E01               	movlw	high trabajo@mx
  1635  0075E8  6E04               	movwf	lcdtext@t+1,c
  1636  0075EA  EC72  F034         	call	_lcdtext	;wreg free
  1637                           
  1638                           ;receptor.c: 267: lcdtext("/");
  1639  0075EE  0EFC               	movlw	low STR_15
  1640  0075F0  6E03               	movwf	lcdtext@t,c
  1641  0075F2  0E7C               	movlw	high STR_15
  1642  0075F4  6E04               	movwf	lcdtext@t+1,c
  1643  0075F6  EC72  F034         	call	_lcdtext	;wreg free
  1644                           
  1645                           ;receptor.c: 268: lcdtext(cutx);
  1646  0075FA  0E64               	movlw	low trabajo@cutx
  1647  0075FC  6E03               	movwf	lcdtext@t,c
  1648  0075FE  0E01               	movlw	high trabajo@cutx
  1649  007600  6E04               	movwf	lcdtext@t+1,c
  1650  007602  EC72  F034         	call	_lcdtext	;wreg free
  1651                           
  1652                           ;receptor.c: 269: lcdsetCursor(0x40);
  1653  007606  0E40               	movlw	64
  1654  007608  EC1D  F033         	call	_lcdsetCursor
  1655                           
  1656                           ;receptor.c: 270: lcdtext("Distancia: ");
  1657  00760C  0EA0               	movlw	low STR_16
  1658  00760E  6E03               	movwf	lcdtext@t,c
  1659  007610  0E7C               	movlw	high STR_16
  1660  007612  6E04               	movwf	lcdtext@t+1,c
  1661  007614  EC72  F034         	call	_lcdtext	;wreg free
  1662                           
  1663                           ;receptor.c: 271: while (num != 'A') {
  1664  007618  D12B               	goto	l225
  1665  00761A                     
  1666                           ;receptor.c: 272: num = 0;
  1667  00761A  0E00               	movlw	0
  1668  00761C  0101               	movlb	1	; () banked
  1669  00761E  6FA7               	movwf	trabajo@num& (0+255),b
  1670                           
  1671                           ; BSR set to: 1
  1672                           ;receptor.c: 273: num = leer_teclado();
  1673  007620  ECD6  F037         	call	_leer_teclado	;wreg free
  1674  007624  0101               	movlb	1	; () banked
  1675  007626  6FA7               	movwf	trabajo@num& (0+255),b
  1676                           
  1677                           ; BSR set to: 1
  1678                           ;receptor.c: 274: if (num >= '0' && num <= '9') {
  1679  007628  0E2F               	movlw	47
  1680  00762A  65A7               	cpfsgt	trabajo@num& (0+255),b
  1681  00762C  D0C3               	goto	l221
  1682                           
  1683                           ; BSR set to: 1
  1684  00762E  0E3A               	movlw	58
  1685  007630  61A7               	cpfslt	trabajo@num& (0+255),b
  1686  007632  D0C0               	goto	l221
  1687                           
  1688                           ; BSR set to: 1
  1689                           ;receptor.c: 275: if (!(distancias[m] == 0 && num == '0')) {
  1690  007634  90D8               	bcf	status,0,c
  1691  007636  35A5               	rlcf	trabajo@m& (0+255),w,b
  1692  007638  6ED9               	movwf	fsr2l,c
  1693  00763A  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1694  00763C  6EDA               	movwf	fsr2h,c
  1695  00763E  0E00               	movlw	low trabajo@distancias
  1696  007640  26D9               	addwf	fsr2l,f,c
  1697  007642  0E01               	movlw	high trabajo@distancias
  1698  007644  22DA               	addwfc	fsr2h,f,c
  1699  007646  50DE               	movf	postinc2,w,c
  1700  007648  10DE               	iorwf	postinc2,w,c
  1701  00764A  A4D8               	btfss	status,2,c
  1702  00764C  D004               	goto	u2490
  1703                           
  1704                           ; BSR set to: 1
  1705  00764E  0E30               	movlw	48
  1706  007650  19A7               	xorwf	trabajo@num& (0+255),w,b
  1707  007652  B4D8               	btfsc	status,2,c
  1708  007654  D0AF               	goto	l221
  1709  007656                     u2490:
  1710                           
  1711                           ; BSR set to: 1
  1712                           ;receptor.c: 276: lcdwrite(num);
  1713                           
  1714                           ; BSR set to: 1
  1715  007656  51A7               	movf	trabajo@num& (0+255),w,b
  1716  007658  EC3A  F033         	call	_lcdwrite
  1717                           
  1718                           ;receptor.c: 277: distancias[m] = 10 * distancias[m] + num - '0';
  1719  00765C  0ED0               	movlw	208
  1720  00765E  6E22               	movwf	??_trabajo& (0+255),c
  1721  007660  0EFF               	movlw	255
  1722  007662  6E23               	movwf	(??_trabajo+1)& (0+255),c
  1723  007664  90D8               	bcf	status,0,c
  1724  007666  0101               	movlb	1	; () banked
  1725  007668  35A5               	rlcf	trabajo@m& (0+255),w,b
  1726  00766A  6ED9               	movwf	fsr2l,c
  1727  00766C  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1728  00766E  6EDA               	movwf	fsr2h,c
  1729  007670  0E00               	movlw	low trabajo@distancias
  1730  007672  26D9               	addwf	fsr2l,f,c
  1731  007674  0E01               	movlw	high trabajo@distancias
  1732  007676  22DA               	addwfc	fsr2h,f,c
  1733  007678  CFDE F001          	movff	postinc2,___wmul@multiplier
  1734  00767C  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1735  007680  0E00               	movlw	0
  1736  007682  6E04               	movwf	___wmul@multiplicand+1,c
  1737  007684  0E0A               	movlw	10
  1738  007686  6E03               	movwf	___wmul@multiplicand,c
  1739  007688  EC5B  F033         	call	___wmul	;wreg free
  1740  00768C  0101               	movlb	1	; () banked
  1741  00768E  51A7               	movf	trabajo@num& (0+255),w,b
  1742  007690  2601               	addwf	?___wmul,f,c
  1743  007692  0E00               	movlw	0
  1744  007694  2202               	addwfc	?___wmul+1,f,c
  1745  007696  5022               	movf	??_trabajo,w,c
  1746  007698  2601               	addwf	?___wmul,f,c
  1747  00769A  5023               	movf	??_trabajo+1,w,c
  1748  00769C  2202               	addwfc	?___wmul+1,f,c
  1749  00769E  90D8               	bcf	status,0,c
  1750  0076A0  35A5               	rlcf	trabajo@m& (0+255),w,b
  1751  0076A2  6ED9               	movwf	fsr2l,c
  1752  0076A4  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1753  0076A6  6EDA               	movwf	fsr2h,c
  1754  0076A8  0E00               	movlw	low trabajo@distancias
  1755  0076AA  26D9               	addwf	fsr2l,f,c
  1756  0076AC  0E01               	movlw	high trabajo@distancias
  1757  0076AE  22DA               	addwfc	fsr2h,f,c
  1758  0076B0  C001  FFDE         	movff	?___wmul,postinc2
  1759  0076B4  C002  FFDD         	movff	?___wmul+1,postdec2
  1760                           
  1761                           ; BSR set to: 1
  1762                           ;receptor.c: 278: if ((distancias[m] > (steps)) || (distancias[m] < 353)) {
  1763  0076B8  90D8               	bcf	status,0,c
  1764  0076BA  35A5               	rlcf	trabajo@m& (0+255),w,b
  1765  0076BC  6ED9               	movwf	fsr2l,c
  1766  0076BE  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1767  0076C0  6EDA               	movwf	fsr2h,c
  1768  0076C2  0E00               	movlw	low trabajo@distancias
  1769  0076C4  26D9               	addwf	fsr2l,f,c
  1770  0076C6  0E01               	movlw	high trabajo@distancias
  1771  0076C8  22DA               	addwfc	fsr2h,f,c
  1772  0076CA  50DE               	movf	postinc2,w,c
  1773  0076CC  5DA8               	subwf	_steps& (0+255),w,b
  1774  0076CE  51A9               	movf	(_steps+1)& (0+255),w,b
  1775  0076D0  0A80               	xorlw	128
  1776  0076D2  6E24               	movwf	(??_trabajo+2)& (0+255),c
  1777  0076D4  50DE               	movf	postinc2,w,c
  1778  0076D6  0A80               	xorlw	128
  1779  0076D8  5824               	subwfb	(??_trabajo+2)& (0+255),w,c
  1780  0076DA  A0D8               	btfss	status,0,c
  1781  0076DC  D012               	goto	u2510
  1782                           
  1783                           ; BSR set to: 1
  1784  0076DE  90D8               	bcf	status,0,c
  1785  0076E0  35A5               	rlcf	trabajo@m& (0+255),w,b
  1786  0076E2  6ED9               	movwf	fsr2l,c
  1787  0076E4  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1788  0076E6  6EDA               	movwf	fsr2h,c
  1789  0076E8  0E00               	movlw	low trabajo@distancias
  1790  0076EA  26D9               	addwf	fsr2l,f,c
  1791  0076EC  0E01               	movlw	high trabajo@distancias
  1792  0076EE  22DA               	addwfc	fsr2h,f,c
  1793  0076F0  0E01               	movlw	1
  1794  0076F2  BEDB               	btfsc	plusw2,7,c
  1795  0076F4  D006               	goto	u2510
  1796  0076F6  0E61               	movlw	97
  1797  0076F8  5CDE               	subwf	postinc2,w,c
  1798  0076FA  0E01               	movlw	1
  1799  0076FC  58DE               	subwfb	postinc2,w,c
  1800  0076FE  B0D8               	btfsc	status,0,c
  1801  007700  D059               	goto	l221
  1802  007702                     u2510:
  1803                           
  1804                           ; BSR set to: 1
  1805                           ;receptor.c: 279: lcdclear();
  1806                           
  1807                           ; BSR set to: 1
  1808  007702  EC11  F033         	call	_lcdclear	;wreg free
  1809                           
  1810                           ;receptor.c: 280: lcdtext("Limite excedido");
  1811  007706  0E23               	movlw	low STR_17
  1812  007708  6E03               	movwf	lcdtext@t,c
  1813  00770A  0E7C               	movlw	high STR_17
  1814  00770C  6E04               	movwf	lcdtext@t+1,c
  1815  00770E  EC72  F034         	call	_lcdtext	;wreg free
  1816                           
  1817                           ;receptor.c: 281: distancias[m] = 0;
  1818  007712  90D8               	bcf	status,0,c
  1819  007714  0101               	movlb	1	; () banked
  1820  007716  35A5               	rlcf	trabajo@m& (0+255),w,b
  1821  007718  6ED9               	movwf	fsr2l,c
  1822  00771A  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1823  00771C  6EDA               	movwf	fsr2h,c
  1824  00771E  0E00               	movlw	low trabajo@distancias
  1825  007720  26D9               	addwf	fsr2l,f,c
  1826  007722  0E01               	movlw	high trabajo@distancias
  1827  007724  22DA               	addwfc	fsr2h,f,c
  1828  007726  0E00               	movlw	0
  1829  007728  6EDE               	movwf	postinc2,c
  1830  00772A  0E00               	movlw	0
  1831  00772C  6EDD               	movwf	postdec2,c
  1832                           
  1833                           ; BSR set to: 1
  1834                           ;receptor.c: 282: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1835  00772E  0E15               	movlw	21
  1836  007730  6E23               	movwf	(??_trabajo+1)& (0+255),c
  1837  007732  0E4B               	movlw	75
  1838  007734  6E22               	movwf	??_trabajo& (0+255),c
  1839  007736  0EBE               	movlw	190
  1840  007738                     u2967:
  1841  007738  2EE8               	decfsz	wreg,f,c
  1842  00773A  D7FE               	bra	u2967
  1843  00773C  2E22               	decfsz	??_trabajo& (0+255),f,c
  1844  00773E  D7FC               	bra	u2967
  1845  007740  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  1846  007742  D7FA               	bra	u2967
  1847  007744  D000               	nop2	
  1848                           
  1849                           ;receptor.c: 283: lcdclear();
  1850  007746  EC11  F033         	call	_lcdclear	;wreg free
  1851                           
  1852                           ;receptor.c: 284: lcdtext("Corte ");
  1853  00774A  0EE7               	movlw	low STR_13
  1854  00774C  6E03               	movwf	lcdtext@t,c
  1855  00774E  0E7C               	movlw	high STR_13
  1856  007750  6E04               	movwf	lcdtext@t+1,c
  1857  007752  EC72  F034         	call	_lcdtext	;wreg free
  1858                           
  1859                           ;receptor.c: 285: lcdsetCursor(0x06);
  1860  007756  0E06               	movlw	6
  1861  007758  EC1D  F033         	call	_lcdsetCursor
  1862                           
  1863                           ;receptor.c: 286: sprintf(mx, "%d", m + 1);
  1864  00775C  0E8C               	movlw	low trabajo@mx
  1865  00775E  6E0D               	movwf	sprintf@sp,c
  1866  007760  0E01               	movlw	high trabajo@mx
  1867  007762  6E0E               	movwf	sprintf@sp+1,c
  1868  007764  0EF9               	movlw	low STR_12
  1869  007766  6E0F               	movwf	sprintf@f,c
  1870  007768  0E7C               	movlw	high STR_12
  1871  00776A  6E10               	movwf	sprintf@f+1,c
  1872  00776C  0E01               	movlw	1
  1873  00776E  0101               	movlb	1	; () banked
  1874  007770  25A5               	addwf	trabajo@m& (0+255),w,b
  1875  007772  6E11               	movwf	?_sprintf+4,c
  1876  007774  0E00               	movlw	0
  1877  007776  21A6               	addwfc	(trabajo@m+1)& (0+255),w,b
  1878  007778  6E12               	movwf	?_sprintf+5,c
  1879  00777A  EC32  F037         	call	_sprintf	;wreg free
  1880                           
  1881                           ;receptor.c: 287: lcdtext(mx);
  1882  00777E  0E8C               	movlw	low trabajo@mx
  1883  007780  6E03               	movwf	lcdtext@t,c
  1884  007782  0E01               	movlw	high trabajo@mx
  1885  007784  6E04               	movwf	lcdtext@t+1,c
  1886  007786  EC72  F034         	call	_lcdtext	;wreg free
  1887                           
  1888                           ;receptor.c: 288: lcdtext("/");
  1889  00778A  0EFC               	movlw	low STR_15
  1890  00778C  6E03               	movwf	lcdtext@t,c
  1891  00778E  0E7C               	movlw	high STR_15
  1892  007790  6E04               	movwf	lcdtext@t+1,c
  1893  007792  EC72  F034         	call	_lcdtext	;wreg free
  1894                           
  1895                           ;receptor.c: 289: lcdtext(cutx);
  1896  007796  0E64               	movlw	low trabajo@cutx
  1897  007798  6E03               	movwf	lcdtext@t,c
  1898  00779A  0E01               	movlw	high trabajo@cutx
  1899  00779C  6E04               	movwf	lcdtext@t+1,c
  1900  00779E  EC72  F034         	call	_lcdtext	;wreg free
  1901                           
  1902                           ;receptor.c: 290: lcdsetCursor(0x40);
  1903  0077A2  0E40               	movlw	64
  1904  0077A4  EC1D  F033         	call	_lcdsetCursor
  1905                           
  1906                           ;receptor.c: 291: lcdtext("Distancia: ");
  1907  0077A8  0EA0               	movlw	low STR_16
  1908  0077AA  6E03               	movwf	lcdtext@t,c
  1909  0077AC  0E7C               	movlw	high STR_16
  1910  0077AE  6E04               	movwf	lcdtext@t+1,c
  1911  0077B0  EC72  F034         	call	_lcdtext	;wreg free
  1912  0077B4                     l221:
  1913                           
  1914                           ;receptor.c: 292: }
  1915                           ;receptor.c: 293: }
  1916                           ;receptor.c: 294: }
  1917                           ;receptor.c: 295: if ((num == 'C') && (distancias[m] > 0)) {
  1918  0077B4  0E43               	movlw	67
  1919  0077B6  0101               	movlb	1	; () banked
  1920  0077B8  19A7               	xorwf	trabajo@num& (0+255),w,b
  1921  0077BA  A4D8               	btfss	status,2,c
  1922  0077BC  D054               	goto	l224
  1923                           
  1924                           ; BSR set to: 1
  1925  0077BE  90D8               	bcf	status,0,c
  1926  0077C0  35A5               	rlcf	trabajo@m& (0+255),w,b
  1927  0077C2  6ED9               	movwf	fsr2l,c
  1928  0077C4  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1929  0077C6  6EDA               	movwf	fsr2h,c
  1930  0077C8  0E00               	movlw	low trabajo@distancias
  1931  0077CA  26D9               	addwf	fsr2l,f,c
  1932  0077CC  0E01               	movlw	high trabajo@distancias
  1933  0077CE  22DA               	addwfc	fsr2h,f,c
  1934  0077D0  0E01               	movlw	1
  1935  0077D2  BEDB               	btfsc	plusw2,7,c
  1936  0077D4  D048               	goto	l224
  1937  0077D6  0E01               	movlw	1
  1938  0077D8  50DB               	movf	plusw2,w,c
  1939  0077DA  E103               	bnz	u2530
  1940  0077DC  04DE               	decf	postinc2,w,c
  1941  0077DE  A0D8               	btfss	status,0,c
  1942  0077E0  D042               	goto	l224
  1943  0077E2                     u2530:
  1944                           
  1945                           ; BSR set to: 1
  1946                           ;receptor.c: 296: lcdshiftCursor('L');
  1947  0077E2  0E4C               	movlw	76
  1948  0077E4  EC82  F033         	call	_lcdshiftCursor
  1949                           
  1950                           ;receptor.c: 297: lcdwrite(' ');
  1951  0077E8  0E20               	movlw	32
  1952  0077EA  EC3A  F033         	call	_lcdwrite
  1953                           
  1954                           ;receptor.c: 298: lcdshiftCursor('L');
  1955  0077EE  0E4C               	movlw	76
  1956  0077F0  EC82  F033         	call	_lcdshiftCursor
  1957                           
  1958                           ;receptor.c: 299: distancias[m] /= 10;
  1959  0077F4  90D8               	bcf	status,0,c
  1960  0077F6  0101               	movlb	1	; () banked
  1961  0077F8  35A5               	rlcf	trabajo@m& (0+255),w,b
  1962  0077FA  6ED9               	movwf	fsr2l,c
  1963  0077FC  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1964  0077FE  6EDA               	movwf	fsr2h,c
  1965  007800  0E00               	movlw	low trabajo@distancias
  1966  007802  26D9               	addwf	fsr2l,f,c
  1967  007804  0E01               	movlw	high trabajo@distancias
  1968  007806  22DA               	addwfc	fsr2h,f,c
  1969  007808  CFDE F001          	movff	postinc2,___awdiv@dividend
  1970  00780C  CFDD F002          	movff	postdec2,___awdiv@dividend+1
  1971  007810  0E00               	movlw	0
  1972  007812  6E04               	movwf	___awdiv@divisor+1,c
  1973  007814  0E0A               	movlw	10
  1974  007816  6E03               	movwf	___awdiv@divisor,c
  1975  007818  EC23  F035         	call	___awdiv	;wreg free
  1976  00781C  90D8               	bcf	status,0,c
  1977  00781E  0101               	movlb	1	; () banked
  1978  007820  35A5               	rlcf	trabajo@m& (0+255),w,b
  1979  007822  6ED9               	movwf	fsr2l,c
  1980  007824  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1981  007826  6EDA               	movwf	fsr2h,c
  1982  007828  0E00               	movlw	low trabajo@distancias
  1983  00782A  26D9               	addwf	fsr2l,f,c
  1984  00782C  0E01               	movlw	high trabajo@distancias
  1985  00782E  22DA               	addwfc	fsr2h,f,c
  1986  007830  C001  FFDE         	movff	?___awdiv,postinc2
  1987  007834  C002  FFDD         	movff	?___awdiv+1,postdec2
  1988                           
  1989                           ; BSR set to: 1
  1990                           ;receptor.c: 300: trunc(distancias[m]);
  1991  007838  90D8               	bcf	status,0,c
  1992  00783A  35A5               	rlcf	trabajo@m& (0+255),w,b
  1993  00783C  6ED9               	movwf	fsr2l,c
  1994  00783E  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1995  007840  6EDA               	movwf	fsr2h,c
  1996  007842  0E00               	movlw	low trabajo@distancias
  1997  007844  26D9               	addwf	fsr2l,f,c
  1998  007846  0E01               	movlw	high trabajo@distancias
  1999  007848  22DA               	addwfc	fsr2h,f,c
  2000  00784A  CFDE F009          	movff	postinc2,___awtoft@c
  2001  00784E  CFDD F00A          	movff	postdec2,___awtoft@c+1
  2002  007852  EC9A  F033         	call	___awtoft	;wreg free
  2003  007856  C009  F01A         	movff	?___awtoft,trunc@x
  2004  00785A  C00A  F01B         	movff	?___awtoft+1,trunc@x+1
  2005  00785E  C00B  F01C         	movff	?___awtoft+2,trunc@x+2
  2006  007862  EC44  F034         	call	_trunc	;wreg free
  2007  007866                     l224:
  2008                           
  2009                           ;receptor.c: 301: }
  2010                           ;receptor.c: 302: if (num == 'B')break;
  2011  007866  0E42               	movlw	66
  2012  007868  0101               	movlb	1	; () banked
  2013  00786A  19A7               	xorwf	trabajo@num& (0+255),w,b
  2014  00786C  B4D8               	btfsc	status,2,c
  2015  00786E  D005               	goto	u2550
  2016  007870                     l225:
  2017                           
  2018                           ; BSR set to: 1
  2019                           
  2020                           ; BSR set to: 1
  2021  007870  0E41               	movlw	65
  2022  007872  0101               	movlb	1	; () banked
  2023  007874  19A7               	xorwf	trabajo@num& (0+255),w,b
  2024  007876  A4D8               	btfss	status,2,c
  2025  007878  D6D0               	goto	l216
  2026  00787A                     u2550:
  2027                           
  2028                           ; BSR set to: 1
  2029                           ;receptor.c: 303: }
  2030                           ;receptor.c: 304: if (num == 'B')break;
  2031                           
  2032                           ; BSR set to: 1
  2033  00787A  0E42               	movlw	66
  2034  00787C  19A7               	xorwf	trabajo@num& (0+255),w,b
  2035  00787E  B4D8               	btfsc	status,2,c
  2036  007880  D00F               	goto	u2570
  2037                           
  2038                           ; BSR set to: 1
  2039                           
  2040                           ; BSR set to: 1
  2041                           
  2042                           ; BSR set to: 1
  2043  007882  4BA5               	infsnz	trabajo@m& (0+255),f,b
  2044  007884  2BA6               	incf	(trabajo@m+1)& (0+255),f,b
  2045  007886                     l213:
  2046                           
  2047                           ; BSR set to: 1
  2048                           
  2049                           ; BSR set to: 1
  2050  007886  51A4               	movf	trabajo@cuts& (0+255),w,b
  2051  007888  6E22               	movwf	??_trabajo& (0+255),c
  2052  00788A  6A23               	clrf	(??_trabajo+1)& (0+255),c
  2053  00788C  5022               	movf	??_trabajo,w,c
  2054  00788E  5DA5               	subwf	trabajo@m& (0+255),w,b
  2055  007890  51A6               	movf	(trabajo@m+1)& (0+255),w,b
  2056  007892  0A80               	xorlw	128
  2057  007894  6E24               	movwf	(??_trabajo+2)& (0+255),c
  2058  007896  5023               	movf	??_trabajo+1,w,c
  2059  007898  0A80               	xorlw	128
  2060  00789A  5824               	subwfb	(??_trabajo+2)& (0+255),w,c
  2061  00789C  A0D8               	btfss	status,0,c
  2062  00789E  D676               	goto	l214
  2063  0078A0                     u2570:
  2064                           
  2065                           ; BSR set to: 1
  2066                           ;receptor.c: 305: }
  2067                           ;receptor.c: 306: if (num == 'B') {
  2068                           
  2069                           ; BSR set to: 1
  2070  0078A0  0E42               	movlw	66
  2071  0078A2  19A7               	xorwf	trabajo@num& (0+255),w,b
  2072  0078A4  A4D8               	btfss	status,2,c
  2073  0078A6  D01E               	goto	l229
  2074                           
  2075                           ; BSR set to: 1
  2076                           ;receptor.c: 307: lcdclear();
  2077  0078A8  EC11  F033         	call	_lcdclear	;wreg free
  2078                           
  2079                           ;receptor.c: 308: lcdtext("Operacion");
  2080  0078AC  0ECC               	movlw	low STR_10
  2081  0078AE  6E03               	movwf	lcdtext@t,c
  2082  0078B0  0E7C               	movlw	high STR_10
  2083  0078B2  6E04               	movwf	lcdtext@t+1,c
  2084  0078B4  EC72  F034         	call	_lcdtext	;wreg free
  2085                           
  2086                           ;receptor.c: 309: lcdsetCursor(0x40);
  2087  0078B8  0E40               	movlw	64
  2088  0078BA  EC1D  F033         	call	_lcdsetCursor
  2089                           
  2090                           ;receptor.c: 310: lcdtext("Cancelada");
  2091  0078BE  0EC2               	movlw	low STR_11
  2092  0078C0  6E03               	movwf	lcdtext@t,c
  2093  0078C2  0E7C               	movlw	high STR_11
  2094  0078C4  6E04               	movwf	lcdtext@t+1,c
  2095  0078C6  EC72  F034         	call	_lcdtext	;wreg free
  2096                           
  2097                           ;receptor.c: 311: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2098  0078CA  0E15               	movlw	21
  2099  0078CC  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2100  0078CE  0E4B               	movlw	75
  2101  0078D0  6E22               	movwf	??_trabajo& (0+255),c
  2102  0078D2  0EBE               	movlw	190
  2103  0078D4                     u2977:
  2104  0078D4  2EE8               	decfsz	wreg,f,c
  2105  0078D6  D7FE               	bra	u2977
  2106  0078D8  2E22               	decfsz	??_trabajo& (0+255),f,c
  2107  0078DA  D7FC               	bra	u2977
  2108  0078DC  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2109  0078DE  D7FA               	bra	u2977
  2110  0078E0  D000               	nop2	
  2111                           
  2112                           ;receptor.c: 312: } else {
  2113  0078E2  0012               	return	
  2114  0078E4                     l229:
  2115                           
  2116                           ;receptor.c: 313: lcdclear();
  2117  0078E4  EC11  F033         	call	_lcdclear	;wreg free
  2118                           
  2119                           ;receptor.c: 314: lcdtext("Corte ");
  2120  0078E8  0EE7               	movlw	low STR_13
  2121  0078EA  6E03               	movwf	lcdtext@t,c
  2122  0078EC  0E7C               	movlw	high STR_13
  2123  0078EE  6E04               	movwf	lcdtext@t+1,c
  2124  0078F0  EC72  F034         	call	_lcdtext	;wreg free
  2125                           
  2126                           ;receptor.c: 315: for (int m = 0; m < cuts; m++) {
  2127  0078F4  0E00               	movlw	0
  2128  0078F6  0101               	movlb	1	; () banked
  2129  0078F8  6FA3               	movwf	(trabajo@m_281+1)& (0+255),b
  2130  0078FA  0E00               	movlw	0
  2131  0078FC  6FA2               	movwf	trabajo@m_281& (0+255),b
  2132  0078FE  D11B               	goto	l231
  2133  007900                     
  2134                           ; BSR set to: 1
  2135                           ;receptor.c: 316: lcdsetCursor(0x06);
  2136                           
  2137                           ; BSR set to: 1
  2138  007900  0E06               	movlw	6
  2139  007902  EC1D  F033         	call	_lcdsetCursor
  2140                           
  2141                           ;receptor.c: 317: sprintf(mx, "%d", m + 1);
  2142  007906  0E8C               	movlw	low trabajo@mx
  2143  007908  6E0D               	movwf	sprintf@sp,c
  2144  00790A  0E01               	movlw	high trabajo@mx
  2145  00790C  6E0E               	movwf	sprintf@sp+1,c
  2146  00790E  0EF9               	movlw	low STR_12
  2147  007910  6E0F               	movwf	sprintf@f,c
  2148  007912  0E7C               	movlw	high STR_12
  2149  007914  6E10               	movwf	sprintf@f+1,c
  2150  007916  0E01               	movlw	1
  2151  007918  0101               	movlb	1	; () banked
  2152  00791A  25A2               	addwf	trabajo@m_281& (0+255),w,b
  2153  00791C  6E11               	movwf	?_sprintf+4,c
  2154  00791E  0E00               	movlw	0
  2155  007920  21A3               	addwfc	(trabajo@m_281+1)& (0+255),w,b
  2156  007922  6E12               	movwf	?_sprintf+5,c
  2157  007924  EC32  F037         	call	_sprintf	;wreg free
  2158                           
  2159                           ;receptor.c: 318: lcdtext(mx);
  2160  007928  0E8C               	movlw	low trabajo@mx
  2161  00792A  6E03               	movwf	lcdtext@t,c
  2162  00792C  0E01               	movlw	high trabajo@mx
  2163  00792E  6E04               	movwf	lcdtext@t+1,c
  2164  007930  EC72  F034         	call	_lcdtext	;wreg free
  2165                           
  2166                           ;receptor.c: 319: lcdtext("/");
  2167  007934  0EFC               	movlw	low STR_15
  2168  007936  6E03               	movwf	lcdtext@t,c
  2169  007938  0E7C               	movlw	high STR_15
  2170  00793A  6E04               	movwf	lcdtext@t+1,c
  2171  00793C  EC72  F034         	call	_lcdtext	;wreg free
  2172                           
  2173                           ;receptor.c: 320: lcdtext(cutx);
  2174  007940  0E64               	movlw	low trabajo@cutx
  2175  007942  6E03               	movwf	lcdtext@t,c
  2176  007944  0E01               	movlw	high trabajo@cutx
  2177  007946  6E04               	movwf	lcdtext@t+1,c
  2178  007948  EC72  F034         	call	_lcdtext	;wreg free
  2179                           
  2180                           ;receptor.c: 321: UART_Write('a');
  2181  00794C  0E61               	movlw	97
  2182  00794E  EC01  F033         	call	_UART_Write
  2183                           
  2184                           ;receptor.c: 323: sprintf(outx, "%d", (distancias[m] - 353));
  2185  007952  0E78               	movlw	low trabajo@outx
  2186  007954  6E0D               	movwf	sprintf@sp,c
  2187  007956  0E01               	movlw	high trabajo@outx
  2188  007958  6E0E               	movwf	sprintf@sp+1,c
  2189  00795A  0EF9               	movlw	low STR_12
  2190  00795C  6E0F               	movwf	sprintf@f,c
  2191  00795E  0E7C               	movlw	high STR_12
  2192  007960  6E10               	movwf	sprintf@f+1,c
  2193  007962  90D8               	bcf	status,0,c
  2194  007964  0101               	movlb	1	; () banked
  2195  007966  35A2               	rlcf	trabajo@m_281& (0+255),w,b
  2196  007968  6ED9               	movwf	fsr2l,c
  2197  00796A  35A3               	rlcf	(trabajo@m_281+1)& (0+255),w,b
  2198  00796C  6EDA               	movwf	fsr2h,c
  2199  00796E  0E00               	movlw	low trabajo@distancias
  2200  007970  26D9               	addwf	fsr2l,f,c
  2201  007972  0E01               	movlw	high trabajo@distancias
  2202  007974  22DA               	addwfc	fsr2h,f,c
  2203  007976  CFDE F022          	movff	postinc2,??_trabajo
  2204  00797A  CFDD F023          	movff	postdec2,??_trabajo+1
  2205  00797E  0E9F               	movlw	159
  2206  007980  2422               	addwf	??_trabajo,w,c
  2207  007982  6E11               	movwf	?_sprintf+4,c
  2208  007984  0EFE               	movlw	254
  2209  007986  2023               	addwfc	??_trabajo+1,w,c
  2210  007988  6E12               	movwf	?_sprintf+5,c
  2211  00798A  EC32  F037         	call	_sprintf	;wreg free
  2212                           
  2213                           ;receptor.c: 324: for (int i = 0; outx[i] != '\0'; i++) {
  2214  00798E  0E00               	movlw	0
  2215  007990  0101               	movlb	1	; () banked
  2216  007992  6FA1               	movwf	(trabajo@i+1)& (0+255),b
  2217  007994  0E00               	movlw	0
  2218  007996  6FA0               	movwf	trabajo@i& (0+255),b
  2219  007998  D021               	goto	l233
  2220  00799A                     
  2221                           ; BSR set to: 1
  2222                           ;receptor.c: 325: _delay((unsigned long)((100)*(8000000/4000.0)));
  2223                           
  2224                           ; BSR set to: 1
  2225  00799A  0E02               	movlw	2
  2226  00799C  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2227  00799E  0E04               	movlw	4
  2228  0079A0  6E22               	movwf	??_trabajo& (0+255),c
  2229  0079A2  0EBA               	movlw	186
  2230  0079A4                     u2987:
  2231  0079A4  2EE8               	decfsz	wreg,f,c
  2232  0079A6  D7FE               	bra	u2987
  2233  0079A8  2E22               	decfsz	??_trabajo& (0+255),f,c
  2234  0079AA  D7FC               	bra	u2987
  2235  0079AC  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2236  0079AE  D7FA               	bra	u2987
  2237  0079B0  D000               	nop2	
  2238                           
  2239                           ;receptor.c: 326: UART_Write(outx[i]);
  2240  0079B2  0E78               	movlw	low trabajo@outx
  2241  0079B4  0101               	movlb	1	; () banked
  2242  0079B6  25A0               	addwf	trabajo@i& (0+255),w,b
  2243  0079B8  6ED9               	movwf	fsr2l,c
  2244  0079BA  0E01               	movlw	high trabajo@outx
  2245  0079BC  21A1               	addwfc	(trabajo@i+1)& (0+255),w,b
  2246  0079BE  6EDA               	movwf	fsr2h,c
  2247  0079C0  50DF               	movf	indf2,w,c
  2248  0079C2  EC01  F033         	call	_UART_Write
  2249                           
  2250                           ;receptor.c: 327: outx[i] = '\0';
  2251  0079C6  0E78               	movlw	low trabajo@outx
  2252  0079C8  0101               	movlb	1	; () banked
  2253  0079CA  25A0               	addwf	trabajo@i& (0+255),w,b
  2254  0079CC  6ED9               	movwf	fsr2l,c
  2255  0079CE  0E01               	movlw	high trabajo@outx
  2256  0079D0  21A1               	addwfc	(trabajo@i+1)& (0+255),w,b
  2257  0079D2  6EDA               	movwf	fsr2h,c
  2258  0079D4  0E00               	movlw	0
  2259  0079D6  6EDF               	movwf	indf2,c
  2260                           
  2261                           ; BSR set to: 1
  2262  0079D8  4BA0               	infsnz	trabajo@i& (0+255),f,b
  2263  0079DA  2BA1               	incf	(trabajo@i+1)& (0+255),f,b
  2264  0079DC                     l233:
  2265                           
  2266                           ; BSR set to: 1
  2267                           
  2268                           ; BSR set to: 1
  2269  0079DC  0E78               	movlw	low trabajo@outx
  2270  0079DE  25A0               	addwf	trabajo@i& (0+255),w,b
  2271  0079E0  6ED9               	movwf	fsr2l,c
  2272  0079E2  0E01               	movlw	high trabajo@outx
  2273  0079E4  21A1               	addwfc	(trabajo@i+1)& (0+255),w,b
  2274  0079E6  6EDA               	movwf	fsr2h,c
  2275  0079E8  50DF               	movf	indf2,w,c
  2276  0079EA  A4D8               	btfss	status,2,c
  2277  0079EC  D7D6               	goto	l234
  2278                           
  2279                           ; BSR set to: 1
  2280                           ;receptor.c: 328: }
  2281                           ;receptor.c: 329: _delay((unsigned long)((100)*(8000000/4000.0)));
  2282                           
  2283                           ; BSR set to: 1
  2284  0079EE  0E02               	movlw	2
  2285  0079F0  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2286  0079F2  0E04               	movlw	4
  2287  0079F4  6E22               	movwf	??_trabajo& (0+255),c
  2288  0079F6  0EBA               	movlw	186
  2289  0079F8                     u2997:
  2290  0079F8  2EE8               	decfsz	wreg,f,c
  2291  0079FA  D7FE               	bra	u2997
  2292  0079FC  2E22               	decfsz	??_trabajo& (0+255),f,c
  2293  0079FE  D7FC               	bra	u2997
  2294  007A00  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2295  007A02  D7FA               	bra	u2997
  2296  007A04  D000               	nop2	
  2297                           
  2298                           ;receptor.c: 330: UART_Write('a');
  2299  007A06  0E61               	movlw	97
  2300  007A08  EC01  F033         	call	_UART_Write
  2301                           
  2302                           ;receptor.c: 331: lcdsetCursor(0x40);
  2303  007A0C  0E40               	movlw	64
  2304  007A0E  EC1D  F033         	call	_lcdsetCursor
  2305                           
  2306                           ;receptor.c: 332: lcdtext("Moviendo...         ");
  2307  007A12  0EDC               	movlw	low STR_28
  2308  007A14  6E03               	movwf	lcdtext@t,c
  2309  007A16  0E7B               	movlw	high STR_28
  2310  007A18  6E04               	movwf	lcdtext@t+1,c
  2311  007A1A  EC72  F034         	call	_lcdtext	;wreg free
  2312                           
  2313                           ;receptor.c: 333: while (!UART_Data_Ready()) {
  2314  007A1E  D00C               	goto	l238
  2315  007A20                     
  2316                           ;receptor.c: 334: num = leer_teclado();
  2317  007A20  ECD6  F037         	call	_leer_teclado	;wreg free
  2318  007A24  0101               	movlb	1	; () banked
  2319  007A26  6FA7               	movwf	trabajo@num& (0+255),b
  2320                           
  2321                           ; BSR set to: 1
  2322                           ;receptor.c: 335: if (num == 'B') {
  2323  007A28  0E42               	movlw	66
  2324  007A2A  19A7               	xorwf	trabajo@num& (0+255),w,b
  2325  007A2C  A4D8               	btfss	status,2,c
  2326  007A2E  D004               	goto	l238
  2327                           
  2328                           ; BSR set to: 1
  2329                           ;receptor.c: 336: UART_Write('s');
  2330  007A30  0E73               	movlw	115
  2331  007A32  EC01  F033         	call	_UART_Write
  2332                           
  2333                           ;receptor.c: 337: break;
  2334  007A36  D005               	goto	u2610
  2335  007A38                     l238:
  2336  007A38  ECF9  F032         	call	_UART_Data_Ready	;wreg free
  2337  007A3C  0900               	iorlw	0
  2338  007A3E  B4D8               	btfsc	status,2,c
  2339  007A40  D7EF               	goto	l237
  2340  007A42                     u2610:
  2341                           
  2342                           ;receptor.c: 338: }
  2343                           ;receptor.c: 339: }
  2344                           ;receptor.c: 340: if (num != 'B') {
  2345  007A42  0E42               	movlw	66
  2346  007A44  0101               	movlb	1	; () banked
  2347  007A46  19A7               	xorwf	trabajo@num& (0+255),w,b
  2348  007A48  B4D8               	btfsc	status,2,c
  2349  007A4A  D06F               	goto	u2670
  2350                           
  2351                           ; BSR set to: 1
  2352                           ;receptor.c: 341: if (UART_Read() == 'd') {
  2353  007A4C  ECFD  F032         	call	_UART_Read	;wreg free
  2354  007A50  0A64               	xorlw	100
  2355  007A52  A4D8               	btfss	status,2,c
  2356  007A54  D015               	goto	l241
  2357                           
  2358                           ;receptor.c: 342: lcdsetCursor(0x40);
  2359  007A56  0E40               	movlw	64
  2360  007A58  EC1D  F033         	call	_lcdsetCursor
  2361                           
  2362                           ;receptor.c: 343: lcdtext("Listo          ");
  2363  007A5C  0E03               	movlw	low STR_29
  2364  007A5E  6E03               	movwf	lcdtext@t,c
  2365  007A60  0E7C               	movlw	high STR_29
  2366  007A62  6E04               	movwf	lcdtext@t+1,c
  2367  007A64  EC72  F034         	call	_lcdtext	;wreg free
  2368                           
  2369                           ;receptor.c: 344: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2370  007A68  0E15               	movlw	21
  2371  007A6A  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2372  007A6C  0E4B               	movlw	75
  2373  007A6E  6E22               	movwf	??_trabajo& (0+255),c
  2374  007A70  0EBE               	movlw	190
  2375  007A72                     u3007:
  2376  007A72  2EE8               	decfsz	wreg,f,c
  2377  007A74  D7FE               	bra	u3007
  2378  007A76  2E22               	decfsz	??_trabajo& (0+255),f,c
  2379  007A78  D7FC               	bra	u3007
  2380  007A7A  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2381  007A7C  D7FA               	bra	u3007
  2382  007A7E  D013               	goto	L1
  2383  007A80                     l241:
  2384                           
  2385                           ;receptor.c: 346: lcdclear();
  2386  007A80  EC11  F033         	call	_lcdclear	;wreg free
  2387                           
  2388                           ;receptor.c: 347: lcdtext("Error!         ");
  2389  007A84  0E13               	movlw	low STR_30
  2390  007A86  6E03               	movwf	lcdtext@t,c
  2391  007A88  0E7C               	movlw	high STR_30
  2392  007A8A  6E04               	movwf	lcdtext@t+1,c
  2393  007A8C  EC72  F034         	call	_lcdtext	;wreg free
  2394                           
  2395                           ;receptor.c: 348: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2396  007A90  0E15               	movlw	21
  2397  007A92  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2398  007A94  0E4B               	movlw	75
  2399  007A96  6E22               	movwf	??_trabajo& (0+255),c
  2400  007A98  0EBE               	movlw	190
  2401  007A9A                     u3017:
  2402  007A9A  2EE8               	decfsz	wreg,f,c
  2403  007A9C  D7FE               	bra	u3017
  2404  007A9E  2E22               	decfsz	??_trabajo& (0+255),f,c
  2405  007AA0  D7FC               	bra	u3017
  2406  007AA2  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2407  007AA4  D7FA               	bra	u3017
  2408  007AA6                     L1:
  2409  007AA6  D000               	nop2	
  2410                           
  2411                           ;receptor.c: 349: }
  2412                           ;receptor.c: 350: num = 0;
  2413  007AA8  0E00               	movlw	0
  2414  007AAA  0101               	movlb	1	; () banked
  2415  007AAC  6FA7               	movwf	trabajo@num& (0+255),b
  2416                           
  2417                           ; BSR set to: 1
  2418                           ;receptor.c: 351: if (m < cuts) {
  2419  007AAE  51A4               	movf	trabajo@cuts& (0+255),w,b
  2420  007AB0  6E22               	movwf	??_trabajo& (0+255),c
  2421  007AB2  6A23               	clrf	(??_trabajo+1)& (0+255),c
  2422  007AB4  5022               	movf	??_trabajo,w,c
  2423  007AB6  5DA2               	subwf	trabajo@m_281& (0+255),w,b
  2424  007AB8  51A3               	movf	(trabajo@m_281+1)& (0+255),w,b
  2425  007ABA  0A80               	xorlw	128
  2426  007ABC  6E24               	movwf	(??_trabajo+2)& (0+255),c
  2427  007ABE  5023               	movf	??_trabajo+1,w,c
  2428  007AC0  0A80               	xorlw	128
  2429  007AC2  5824               	subwfb	(??_trabajo+2)& (0+255),w,c
  2430  007AC4  B0D8               	btfsc	status,0,c
  2431  007AC6  D02C               	goto	l248
  2432                           
  2433                           ; BSR set to: 1
  2434                           ;receptor.c: 352: if ((m + 1) == cuts) {
  2435  007AC8  51A4               	movf	trabajo@cuts& (0+255),w,b
  2436  007ACA  6E22               	movwf	??_trabajo& (0+255),c
  2437  007ACC  6A23               	clrf	(??_trabajo+1)& (0+255),c
  2438  007ACE  0E01               	movlw	1
  2439  007AD0  25A2               	addwf	trabajo@m_281& (0+255),w,b
  2440  007AD2  6E24               	movwf	(??_trabajo+2)& (0+255),c
  2441  007AD4  0E00               	movlw	0
  2442  007AD6  21A3               	addwfc	(trabajo@m_281+1)& (0+255),w,b
  2443  007AD8  6E25               	movwf	(??_trabajo+3)& (0+255),c
  2444  007ADA  5022               	movf	??_trabajo,w,c
  2445  007ADC  1824               	xorwf	??_trabajo+2,w,c
  2446  007ADE  E10E               	bnz	l2674
  2447  007AE0  5023               	movf	??_trabajo+1,w,c
  2448  007AE2  1825               	xorwf	??_trabajo+3,w,c
  2449  007AE4  A4D8               	btfss	status,2,c
  2450  007AE6  D00A               	goto	l244
  2451                           
  2452                           ; BSR set to: 1
  2453                           ;receptor.c: 353: lcdsetCursor(0x40);
  2454  007AE8  0E40               	movlw	64
  2455  007AEA  EC1D  F033         	call	_lcdsetCursor
  2456                           
  2457                           ;receptor.c: 354: lcdtext("Terminar (A)");
  2458  007AEE  0E79               	movlw	low STR_31
  2459  007AF0  6E03               	movwf	lcdtext@t,c
  2460  007AF2  0E7C               	movlw	high STR_31
  2461  007AF4  6E04               	movwf	lcdtext@t+1,c
  2462  007AF6  EC72  F034         	call	_lcdtext	;wreg free
  2463                           
  2464                           ;receptor.c: 355: } else {
  2465  007AFA  D012               	goto	l248
  2466  007AFC                     l244:
  2467  007AFC                     l2674:
  2468                           
  2469                           ;receptor.c: 356: lcdsetCursor(0x40);
  2470  007AFC  0E40               	movlw	64
  2471  007AFE  EC1D  F033         	call	_lcdsetCursor
  2472                           
  2473                           ;receptor.c: 357: lcdtext("Siguiente (A)");
  2474  007B02  0E42               	movlw	low STR_32
  2475  007B04  6E03               	movwf	lcdtext@t,c
  2476  007B06  0E7C               	movlw	high STR_32
  2477  007B08  6E04               	movwf	lcdtext@t+1,c
  2478  007B0A  EC72  F034         	call	_lcdtext	;wreg free
  2479                           
  2480                           ;receptor.c: 358: }
  2481                           ;receptor.c: 359: }
  2482                           ;receptor.c: 360: while (num != 'A') {
  2483  007B0E  D008               	goto	l248
  2484  007B10                     
  2485                           ;receptor.c: 361: num = leer_teclado();
  2486  007B10  ECD6  F037         	call	_leer_teclado	;wreg free
  2487  007B14  0101               	movlb	1	; () banked
  2488  007B16  6FA7               	movwf	trabajo@num& (0+255),b
  2489                           
  2490                           ; BSR set to: 1
  2491                           ;receptor.c: 362: if (num == 'B')break;
  2492  007B18  0E42               	movlw	66
  2493  007B1A  19A7               	xorwf	trabajo@num& (0+255),w,b
  2494  007B1C  B4D8               	btfsc	status,2,c
  2495  007B1E  D005               	goto	u2670
  2496  007B20                     l248:
  2497                           
  2498                           ; BSR set to: 1
  2499                           
  2500                           ; BSR set to: 1
  2501  007B20  0E41               	movlw	65
  2502  007B22  0101               	movlb	1	; () banked
  2503  007B24  19A7               	xorwf	trabajo@num& (0+255),w,b
  2504  007B26  A4D8               	btfss	status,2,c
  2505  007B28  D7F3               	goto	l247
  2506  007B2A                     u2670:
  2507                           
  2508                           ; BSR set to: 1
  2509                           ;receptor.c: 363: }
  2510                           ;receptor.c: 364: }
  2511                           ;receptor.c: 365: if (num == 'B')break;
  2512                           
  2513                           ; BSR set to: 1
  2514                           
  2515                           ; BSR set to: 1
  2516  007B2A  0E42               	movlw	66
  2517  007B2C  19A7               	xorwf	trabajo@num& (0+255),w,b
  2518  007B2E  B4D8               	btfsc	status,2,c
  2519  007B30  D00F               	goto	u2690
  2520                           
  2521                           ; BSR set to: 1
  2522                           
  2523                           ; BSR set to: 1
  2524                           
  2525                           ; BSR set to: 1
  2526  007B32  4BA2               	infsnz	trabajo@m_281& (0+255),f,b
  2527  007B34  2BA3               	incf	(trabajo@m_281+1)& (0+255),f,b
  2528  007B36                     l231:
  2529                           
  2530                           ; BSR set to: 1
  2531                           
  2532                           ; BSR set to: 1
  2533  007B36  51A4               	movf	trabajo@cuts& (0+255),w,b
  2534  007B38  6E22               	movwf	??_trabajo& (0+255),c
  2535  007B3A  6A23               	clrf	(??_trabajo+1)& (0+255),c
  2536  007B3C  5022               	movf	??_trabajo,w,c
  2537  007B3E  5DA2               	subwf	trabajo@m_281& (0+255),w,b
  2538  007B40  51A3               	movf	(trabajo@m_281+1)& (0+255),w,b
  2539  007B42  0A80               	xorlw	128
  2540  007B44  6E24               	movwf	(??_trabajo+2)& (0+255),c
  2541  007B46  5023               	movf	??_trabajo+1,w,c
  2542  007B48  0A80               	xorlw	128
  2543  007B4A  5824               	subwfb	(??_trabajo+2)& (0+255),w,c
  2544  007B4C  A0D8               	btfss	status,0,c
  2545  007B4E  D6D8               	goto	l232
  2546  007B50                     u2690:
  2547                           
  2548                           ; BSR set to: 1
  2549                           ;receptor.c: 366: }
  2550                           ;receptor.c: 367: if (num == 'B') {
  2551                           
  2552                           ; BSR set to: 1
  2553  007B50  0E42               	movlw	66
  2554  007B52  19A7               	xorwf	trabajo@num& (0+255),w,b
  2555  007B54  A4D8               	btfss	status,2,c
  2556  007B56  D01A               	goto	l252
  2557  007B58                     u2700:
  2558                           
  2559                           ; BSR set to: 1
  2560                           
  2561                           ; BSR set to: 1
  2562                           
  2563                           ; BSR set to: 1
  2564                           ;receptor.c: 368: while (UART_Read() != 'e');
  2565  007B58  ECFD  F032         	call	_UART_Read	;wreg free
  2566  007B5C  0A65               	xorlw	101
  2567  007B5E  A4D8               	btfss	status,2,c
  2568  007B60  D7FB               	goto	u2700
  2569                           
  2570                           ;receptor.c: 369: lcdclear();
  2571  007B62  EC11  F033         	call	_lcdclear	;wreg free
  2572                           
  2573                           ;receptor.c: 370: lcdtext("Cancelado...");
  2574  007B66  0E86               	movlw	low STR_6
  2575  007B68  6E03               	movwf	lcdtext@t,c
  2576  007B6A  0E7C               	movlw	high STR_6
  2577  007B6C  6E04               	movwf	lcdtext@t+1,c
  2578  007B6E  EC72  F034         	call	_lcdtext	;wreg free
  2579                           
  2580                           ;receptor.c: 371: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2581  007B72  0E15               	movlw	21
  2582  007B74  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2583  007B76  0E4B               	movlw	75
  2584  007B78  6E22               	movwf	??_trabajo& (0+255),c
  2585  007B7A  0EBE               	movlw	190
  2586  007B7C                     u3027:
  2587  007B7C  2EE8               	decfsz	wreg,f,c
  2588  007B7E  D7FE               	bra	u3027
  2589  007B80  2E22               	decfsz	??_trabajo& (0+255),f,c
  2590  007B82  D7FC               	bra	u3027
  2591  007B84  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2592  007B86  D7FA               	bra	u3027
  2593  007B88  D000               	nop2	
  2594                           
  2595                           ;receptor.c: 372: } else {
  2596  007B8A  0012               	return	
  2597  007B8C                     l252:
  2598                           
  2599                           ;receptor.c: 373: lcdclear();
  2600  007B8C  EC11  F033         	call	_lcdclear	;wreg free
  2601                           
  2602                           ;receptor.c: 374: lcdtext("Terminado...");
  2603  007B90  0E93               	movlw	low STR_34
  2604  007B92  6E03               	movwf	lcdtext@t,c
  2605  007B94  0E7C               	movlw	high STR_34
  2606  007B96  6E04               	movwf	lcdtext@t+1,c
  2607  007B98  EC72  F034         	call	_lcdtext	;wreg free
  2608                           
  2609                           ;receptor.c: 375: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2610  007B9C  0E15               	movlw	21
  2611  007B9E  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2612  007BA0  0E4B               	movlw	75
  2613  007BA2  6E22               	movwf	??_trabajo& (0+255),c
  2614  007BA4  0EBE               	movlw	190
  2615  007BA6                     u3037:
  2616  007BA6  2EE8               	decfsz	wreg,f,c
  2617  007BA8  D7FE               	bra	u3037
  2618  007BAA  2E22               	decfsz	??_trabajo& (0+255),f,c
  2619  007BAC  D7FC               	bra	u3037
  2620  007BAE  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2621  007BB0  D7FA               	bra	u3037
  2622  007BB2  D000               	nop2	
  2623  007BB4  0012               	return	
  2624  007BB6                     __end_of_trabajo:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           prodl	equ	0xFF3
  2631                           wreg	equ	0xFE8
  2632                           indf2	equ	0xFDF
  2633                           postinc2	equ	0xFDE
  2634                           postdec2	equ	0xFDD
  2635                           plusw2	equ	0xFDB
  2636                           fsr2h	equ	0xFDA
  2637                           fsr2l	equ	0xFD9
  2638                           status	equ	0xFD8
  2639                           
  2640 ;; *************** function _trunc *****************
  2641 ;; Defined at:
  2642 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\trunc.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;  x               3   25[COMRAM] void 
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;  i               3   28[COMRAM] void 
  2647 ;;  expon           2   31[COMRAM] int 
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  3   25[COMRAM] int 
  2650 ;; Registers used:
  2651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2657 ;;      Params:         3       0       0       0       0       0       0       0       0
  2658 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2660 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2661 ;;Total ram usage:        8 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    2
  2664 ;; This function calls:
  2665 ;;		___altoft
  2666 ;;		___fttol
  2667 ;;		_frexp
  2668 ;; This function is called by:
  2669 ;;		_trabajo
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text3
  2674  006888                     __ptext3:
  2675                           	opt stack 0
  2676  006888                     _trunc:
  2677                           	opt stack 26
  2678                           
  2679                           ;incstack = 0
  2680  006888  C01A  F001         	movff	trunc@x,frexp@value
  2681  00688C  C01B  F002         	movff	trunc@x+1,frexp@value+1
  2682  006890  C01C  F003         	movff	trunc@x+2,frexp@value+2
  2683  006894  0E20               	movlw	low trunc@expon
  2684  006896  6E04               	movwf	frexp@eptr,c
  2685  006898  0E00               	movlw	high trunc@expon
  2686  00689A  6E05               	movwf	frexp@eptr+1,c
  2687  00689C  ECE7  F034         	call	_frexp	;wreg free
  2688  0068A0  BE21               	btfsc	trunc@expon+1,7,c
  2689  0068A2  0012               	return	
  2690                           
  2691                           ;	Return value of _trunc is never used
  2692  0068A4  5021               	movf	trunc@expon+1,w,c
  2693  0068A6  E11D               	bnz	l868
  2694  0068A8  0E15               	movlw	21
  2695  0068AA  5C20               	subwf	trunc@expon,w,c
  2696  0068AC  B0D8               	btfsc	status,0,c
  2697  0068AE  0012               	return	
  2698                           
  2699                           ;	Return value of _trunc is never used
  2700  0068B0  C01A  F001         	movff	trunc@x,___fttol@f1
  2701  0068B4  C01B  F002         	movff	trunc@x+1,___fttol@f1+1
  2702  0068B8  C01C  F003         	movff	trunc@x+2,___fttol@f1+2
  2703  0068BC  EC22  F036         	call	___fttol	;wreg free
  2704  0068C0  C001  F010         	movff	?___fttol,___altoft@c
  2705  0068C4  C002  F011         	movff	?___fttol+1,___altoft@c+1
  2706  0068C8  C003  F012         	movff	?___fttol+2,___altoft@c+2
  2707  0068CC  C004  F013         	movff	?___fttol+3,___altoft@c+3
  2708  0068D0  ECAB  F034         	call	___altoft	;wreg free
  2709  0068D4  C010  F01D         	movff	?___altoft,trunc@i
  2710  0068D8  C011  F01E         	movff	?___altoft+1,trunc@i+1
  2711  0068DC  C012  F01F         	movff	?___altoft+2,trunc@i+2
  2712  0068E0  0012               	return	
  2713  0068E2                     l868:
  2714  0068E2  0012               	return		;funcret
  2715  0068E4                     __end_of_trunc:
  2716                           	opt stack 0
  2717                           tblptru	equ	0xFF8
  2718                           tblptrh	equ	0xFF7
  2719                           tblptrl	equ	0xFF6
  2720                           tablat	equ	0xFF5
  2721                           prodl	equ	0xFF3
  2722                           wreg	equ	0xFE8
  2723                           indf2	equ	0xFDF
  2724                           postinc2	equ	0xFDE
  2725                           postdec2	equ	0xFDD
  2726                           plusw2	equ	0xFDB
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _frexp *****************
  2732 ;; Defined at:
  2733 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  value           3    0[COMRAM] int 
  2736 ;;  eptr            2    3[COMRAM] PTR int 
  2737 ;;		 -> trunc@expon(2), 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;		None
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  3    0[COMRAM] PTR int 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2749 ;;      Params:         5       0       0       0       0       0       0       0       0
  2750 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2751 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2752 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2753 ;;Total ram usage:        7 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_trunc
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text4
  2763  0069CE                     __ptext4:
  2764                           	opt stack 0
  2765  0069CE                     _frexp:
  2766                           	opt stack 27
  2767                           
  2768                           ;incstack = 0
  2769  0069CE  5001               	movf	frexp@value,w,c
  2770  0069D0  1002               	iorwf	frexp@value+1,w,c
  2771  0069D2  1003               	iorwf	frexp@value+2,w,c
  2772  0069D4  A4D8               	btfss	status,2,c
  2773  0069D6  D009               	goto	l893
  2774  0069D8  C004  FFD9         	movff	frexp@eptr,fsr2l
  2775  0069DC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2776  0069E0  0E00               	movlw	0
  2777  0069E2  6EDE               	movwf	postinc2,c
  2778  0069E4  0E00               	movlw	0
  2779  0069E6  6EDD               	movwf	postdec2,c
  2780                           
  2781                           ;	Return value of _frexp is never used
  2782  0069E8  0012               	return	
  2783  0069EA                     l893:
  2784  0069EA  5003               	movf	frexp@value+2,w,c
  2785  0069EC  0B7F               	andlw	127
  2786  0069EE  6E06               	movwf	??_frexp& (0+255),c
  2787  0069F0  6A07               	clrf	(??_frexp+1)& (0+255),c
  2788  0069F2  90D8               	bcf	status,0,c
  2789  0069F4  3606               	rlcf	??_frexp,f,c
  2790  0069F6  3607               	rlcf	??_frexp+1,f,c
  2791  0069F8  C004  FFD9         	movff	frexp@eptr,fsr2l
  2792  0069FC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2793  006A00  C006  FFDE         	movff	??_frexp,postinc2
  2794  006A04  C007  FFDD         	movff	??_frexp+1,postdec2
  2795  006A08  AE02               	btfss	frexp@value+1,7,c
  2796  006A0A  D003               	goto	u1720
  2797  006A0C  6A06               	clrf	??_frexp& (0+255),c
  2798  006A0E  2A06               	incf	??_frexp& (0+255),f,c
  2799  006A10  D001               	goto	u1728
  2800  006A12                     u1720:
  2801  006A12  6A06               	clrf	??_frexp& (0+255),c
  2802  006A14                     u1728:
  2803  006A14  5006               	movf	??_frexp,w,c
  2804  006A16  C004  FFD9         	movff	frexp@eptr,fsr2l
  2805  006A1A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2806  006A1E  12DE               	iorwf	postinc2,f,c
  2807  006A20  0E00               	movlw	0
  2808  006A22  12DD               	iorwf	postdec2,f,c
  2809  006A24  C004  FFD9         	movff	frexp@eptr,fsr2l
  2810  006A28  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2811  006A2C  0E82               	movlw	130
  2812  006A2E  26DE               	addwf	postinc2,f,c
  2813  006A30  0EFF               	movlw	255
  2814  006A32  22DD               	addwfc	postdec2,f,c
  2815  006A34  8003               	bsf	frexp@value+2,0,c
  2816  006A36  8203               	bsf	frexp@value+2,1,c
  2817  006A38  8403               	bsf	frexp@value+2,2,c
  2818  006A3A  8603               	bsf	frexp@value+2,3,c
  2819  006A3C  8803               	bsf	frexp@value+2,4,c
  2820  006A3E  8A03               	bsf	frexp@value+2,5,c
  2821  006A40  9C03               	bcf	frexp@value+2,6,c
  2822  006A42  9E02               	bcf	frexp@value+1,7,c
  2823  006A44  0012               	return	
  2824  006A46                     __end_of_frexp:
  2825                           	opt stack 0
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           prodl	equ	0xFF3
  2831                           wreg	equ	0xFE8
  2832                           indf2	equ	0xFDF
  2833                           postinc2	equ	0xFDE
  2834                           postdec2	equ	0xFDD
  2835                           plusw2	equ	0xFDB
  2836                           fsr2h	equ	0xFDA
  2837                           fsr2l	equ	0xFD9
  2838                           status	equ	0xFD8
  2839                           
  2840 ;; *************** function ___fttol *****************
  2841 ;; Defined at:
  2842 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  f1              3    0[COMRAM] float 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  lval            4   10[COMRAM] unsigned long 
  2847 ;;  exp1            1   14[COMRAM] unsigned char 
  2848 ;;  sign1           1    9[COMRAM] unsigned char 
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  4    0[COMRAM] long 
  2851 ;; Registers used:
  2852 ;;		wreg, status,2, status,0
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2858 ;;      Params:         4       0       0       0       0       0       0       0       0
  2859 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2860 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2861 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2862 ;;Total ram usage:       15 bytes
  2863 ;; Hardware stack levels used:    1
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_trunc
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text5
  2872  006C44                     __ptext5:
  2873                           	opt stack 0
  2874  006C44                     ___fttol:
  2875                           	opt stack 27
  2876                           
  2877                           ;incstack = 0
  2878  006C44  C003  F005         	movff	___fttol@f1+2,??___fttol
  2879  006C48  6A06               	clrf	(??___fttol+1)& (0+255),c
  2880  006C4A  6A07               	clrf	(??___fttol+2)& (0+255),c
  2881  006C4C  3402               	rlcf	___fttol@f1+1,w,c
  2882  006C4E  3605               	rlcf	??___fttol& (0+255),f,c
  2883  006C50  E301               	bnc	u1571
  2884  006C52  8006               	bsf	(??___fttol+1)& (0+255),0,c
  2885  006C54                     u1571:
  2886  006C54  5005               	movf	??___fttol,w,c
  2887  006C56  6E0F               	movwf	___fttol@exp1,c
  2888  006C58  500F               	movf	___fttol@exp1,w,c
  2889  006C5A  A4D8               	btfss	status,2,c
  2890  006C5C  D009               	goto	l632
  2891  006C5E  0E00               	movlw	0
  2892  006C60  6E01               	movwf	?___fttol,c
  2893  006C62  0E00               	movlw	0
  2894  006C64  6E02               	movwf	?___fttol+1,c
  2895  006C66  0E00               	movlw	0
  2896  006C68  6E03               	movwf	?___fttol+2,c
  2897  006C6A  0E00               	movlw	0
  2898  006C6C  6E04               	movwf	?___fttol+3,c
  2899  006C6E  0012               	return	
  2900  006C70                     l632:
  2901  006C70  0E17               	movlw	23
  2902  006C72  6E05               	movwf	??___fttol& (0+255),c
  2903  006C74  C001  F006         	movff	___fttol@f1,??___fttol+1
  2904  006C78  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  2905  006C7C  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  2906  006C80  2805               	incf	??___fttol,w,c
  2907  006C82  6E09               	movwf	(??___fttol+4)& (0+255),c
  2908  006C84  D004               	goto	u1590
  2909  006C86                     u1595:
  2910  006C86  90D8               	bcf	status,0,c
  2911  006C88  3208               	rrcf	??___fttol+3,f,c
  2912  006C8A  3207               	rrcf	??___fttol+2,f,c
  2913  006C8C  3206               	rrcf	??___fttol+1,f,c
  2914  006C8E                     u1590:
  2915  006C8E  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  2916  006C90  D7FA               	goto	u1595
  2917  006C92  5006               	movf	??___fttol+1,w,c
  2918  006C94  6E0A               	movwf	___fttol@sign1,c
  2919  006C96  8E02               	bsf	___fttol@f1+1,7,c
  2920  006C98  0EFF               	movlw	255
  2921  006C9A  1601               	andwf	___fttol@f1,f,c
  2922  006C9C  0EFF               	movlw	255
  2923  006C9E  1602               	andwf	___fttol@f1+1,f,c
  2924  006CA0  0E00               	movlw	0
  2925  006CA2  1603               	andwf	___fttol@f1+2,f,c
  2926  006CA4  5001               	movf	___fttol@f1,w,c
  2927  006CA6  6E0B               	movwf	___fttol@lval,c
  2928  006CA8  5002               	movf	___fttol@f1+1,w,c
  2929  006CAA  6E0C               	movwf	___fttol@lval+1,c
  2930  006CAC  5003               	movf	___fttol@f1+2,w,c
  2931  006CAE  6E0D               	movwf	___fttol@lval+2,c
  2932  006CB0  6A0E               	clrf	___fttol@lval+3,c
  2933  006CB2  0E8E               	movlw	142
  2934  006CB4  5E0F               	subwf	___fttol@exp1,f,c
  2935  006CB6  AE0F               	btfss	___fttol@exp1,7,c
  2936  006CB8  D016               	goto	l634
  2937  006CBA  500F               	movf	___fttol@exp1,w,c
  2938  006CBC  0A80               	xorlw	128
  2939  006CBE  0F8F               	addlw	143
  2940  006CC0  B0D8               	btfsc	status,0,c
  2941  006CC2  D009               	goto	l635
  2942  006CC4  0E00               	movlw	0
  2943  006CC6  6E01               	movwf	?___fttol,c
  2944  006CC8  0E00               	movlw	0
  2945  006CCA  6E02               	movwf	?___fttol+1,c
  2946  006CCC  0E00               	movlw	0
  2947  006CCE  6E03               	movwf	?___fttol+2,c
  2948  006CD0  0E00               	movlw	0
  2949  006CD2  6E04               	movwf	?___fttol+3,c
  2950  006CD4  0012               	return	
  2951  006CD6                     l635:
  2952  006CD6  90D8               	bcf	status,0,c
  2953  006CD8  320E               	rrcf	___fttol@lval+3,f,c
  2954  006CDA  320D               	rrcf	___fttol@lval+2,f,c
  2955  006CDC  320C               	rrcf	___fttol@lval+1,f,c
  2956  006CDE  320B               	rrcf	___fttol@lval,f,c
  2957  006CE0  3E0F               	incfsz	___fttol@exp1,f,c
  2958  006CE2  D7F9               	goto	l635
  2959  006CE4  D015               	goto	u1630
  2960  006CE6                     l634:
  2961  006CE6  0E17               	movlw	23
  2962  006CE8  640F               	cpfsgt	___fttol@exp1,c
  2963  006CEA  D00F               	goto	l640
  2964  006CEC  0E00               	movlw	0
  2965  006CEE  6E01               	movwf	?___fttol,c
  2966  006CF0  0E00               	movlw	0
  2967  006CF2  6E02               	movwf	?___fttol+1,c
  2968  006CF4  0E00               	movlw	0
  2969  006CF6  6E03               	movwf	?___fttol+2,c
  2970  006CF8  0E00               	movlw	0
  2971  006CFA  6E04               	movwf	?___fttol+3,c
  2972  006CFC  0012               	return	
  2973  006CFE  90D8               	bcf	status,0,c
  2974  006D00  360B               	rlcf	___fttol@lval,f,c
  2975  006D02  360C               	rlcf	___fttol@lval+1,f,c
  2976  006D04  360D               	rlcf	___fttol@lval+2,f,c
  2977  006D06  360E               	rlcf	___fttol@lval+3,f,c
  2978  006D08  060F               	decf	___fttol@exp1,f,c
  2979  006D0A                     l640:
  2980  006D0A  500F               	movf	___fttol@exp1,w,c
  2981  006D0C  A4D8               	btfss	status,2,c
  2982  006D0E  D7F7               	goto	l641
  2983  006D10                     u1630:
  2984  006D10  500A               	movf	___fttol@sign1,w,c
  2985  006D12  B4D8               	btfsc	status,2,c
  2986  006D14  D008               	goto	l643
  2987  006D16  1E0E               	comf	___fttol@lval+3,f,c
  2988  006D18  1E0D               	comf	___fttol@lval+2,f,c
  2989  006D1A  1E0C               	comf	___fttol@lval+1,f,c
  2990  006D1C  6C0B               	negf	___fttol@lval,c
  2991  006D1E  0E00               	movlw	0
  2992  006D20  220C               	addwfc	___fttol@lval+1,f,c
  2993  006D22  220D               	addwfc	___fttol@lval+2,f,c
  2994  006D24  220E               	addwfc	___fttol@lval+3,f,c
  2995  006D26                     l643:
  2996  006D26  C00B  F001         	movff	___fttol@lval,?___fttol
  2997  006D2A  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  2998  006D2E  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  2999  006D32  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  3000  006D36  0012               	return	
  3001  006D38                     __end_of___fttol:
  3002                           	opt stack 0
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           prodl	equ	0xFF3
  3008                           wreg	equ	0xFE8
  3009                           indf2	equ	0xFDF
  3010                           postinc2	equ	0xFDE
  3011                           postdec2	equ	0xFDD
  3012                           plusw2	equ	0xFDB
  3013                           fsr2h	equ	0xFDA
  3014                           fsr2l	equ	0xFD9
  3015                           status	equ	0xFD8
  3016                           
  3017 ;; *************** function ___altoft *****************
  3018 ;; Defined at:
  3019 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  c               4   15[COMRAM] long 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  sign            1   24[COMRAM] unsigned char 
  3024 ;;  exp             1   23[COMRAM] unsigned char 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  3   15[COMRAM] float 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3034 ;;      Params:         4       0       0       0       0       0       0       0       0
  3035 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3036 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3037 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3038 ;;Total ram usage:       10 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    1
  3041 ;; This function calls:
  3042 ;;		___ftpack
  3043 ;; This function is called by:
  3044 ;;		_trunc
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text6
  3049  006956                     __ptext6:
  3050                           	opt stack 0
  3051  006956                     ___altoft:
  3052                           	opt stack 26
  3053                           
  3054                           ;incstack = 0
  3055  006956  0E00               	movlw	0
  3056  006958  6E19               	movwf	___altoft@sign,c
  3057  00695A  0E8E               	movlw	142
  3058  00695C  6E18               	movwf	___altoft@exp,c
  3059  00695E  AE13               	btfss	___altoft@c+3,7,c
  3060  006960  D011               	goto	l402
  3061  006962  1E13               	comf	___altoft@c+3,f,c
  3062  006964  1E12               	comf	___altoft@c+2,f,c
  3063  006966  1E11               	comf	___altoft@c+1,f,c
  3064  006968  6C10               	negf	___altoft@c,c
  3065  00696A  0E00               	movlw	0
  3066  00696C  2211               	addwfc	___altoft@c+1,f,c
  3067  00696E  2212               	addwfc	___altoft@c+2,f,c
  3068  006970  2213               	addwfc	___altoft@c+3,f,c
  3069  006972  0E01               	movlw	1
  3070  006974  6E19               	movwf	___altoft@sign,c
  3071  006976  D006               	goto	l402
  3072  006978  90D8               	bcf	status,0,c
  3073  00697A  3213               	rrcf	___altoft@c+3,f,c
  3074  00697C  3212               	rrcf	___altoft@c+2,f,c
  3075  00697E  3211               	rrcf	___altoft@c+1,f,c
  3076  006980  3210               	rrcf	___altoft@c,f,c
  3077  006982  2A18               	incf	___altoft@exp,f,c
  3078  006984                     l402:
  3079  006984  0E00               	movlw	0
  3080  006986  1410               	andwf	___altoft@c,w,c
  3081  006988  6E14               	movwf	??___altoft& (0+255),c
  3082  00698A  0E00               	movlw	0
  3083  00698C  1411               	andwf	___altoft@c+1,w,c
  3084  00698E  6E15               	movwf	(??___altoft+1)& (0+255),c
  3085  006990  0E00               	movlw	0
  3086  006992  1412               	andwf	___altoft@c+2,w,c
  3087  006994  6E16               	movwf	(??___altoft+2)& (0+255),c
  3088  006996  0EFF               	movlw	255
  3089  006998  1413               	andwf	___altoft@c+3,w,c
  3090  00699A  6E17               	movwf	(??___altoft+3)& (0+255),c
  3091  00699C  5014               	movf	??___altoft,w,c
  3092  00699E  1015               	iorwf	??___altoft+1,w,c
  3093  0069A0  1016               	iorwf	??___altoft+2,w,c
  3094  0069A2  1017               	iorwf	??___altoft+3,w,c
  3095  0069A4  A4D8               	btfss	status,2,c
  3096  0069A6  D7E8               	goto	l403
  3097  0069A8  C010  F001         	movff	___altoft@c,___ftpack@arg
  3098  0069AC  C011  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3099  0069B0  C012  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3100  0069B4  C018  F004         	movff	___altoft@exp,___ftpack@exp
  3101  0069B8  C019  F005         	movff	___altoft@sign,___ftpack@sign
  3102  0069BC  EC65  F035         	call	___ftpack	;wreg free
  3103  0069C0  C001  F010         	movff	?___ftpack,?___altoft
  3104  0069C4  C002  F011         	movff	?___ftpack+1,?___altoft+1
  3105  0069C8  C003  F012         	movff	?___ftpack+2,?___altoft+2
  3106  0069CC  0012               	return	
  3107  0069CE                     __end_of___altoft:
  3108                           	opt stack 0
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodl	equ	0xFF3
  3114                           wreg	equ	0xFE8
  3115                           indf2	equ	0xFDF
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           plusw2	equ	0xFDB
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _sprintf *****************
  3124 ;; Defined at:
  3125 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3128 ;;		 -> trabajo@outx(20), trabajo@mx(20), trabajo@cutx(20), 
  3129 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3130 ;;		 -> STR_27(3), STR_25(3), STR_19(3), STR_14(3), 
  3131 ;;		 -> STR_12(3), 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  tmpval          4    0        struct .
  3134 ;;  cp              3    0        PTR const unsigned char 
  3135 ;;  val             2   23[COMRAM] unsigned int 
  3136 ;;  ap              2   19[COMRAM] PTR void [1]
  3137 ;;		 -> ?_sprintf(2), 
  3138 ;;  len             2    0        unsigned int 
  3139 ;;  c               1   25[COMRAM] char 
  3140 ;;  prec            1   22[COMRAM] char 
  3141 ;;  flag            1   21[COMRAM] unsigned char 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  2   12[COMRAM] int 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3151 ;;      Params:         6       0       0       0       0       0       0       0       0
  3152 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3153 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3154 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3155 ;;Total ram usage:       14 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    1
  3158 ;; This function calls:
  3159 ;;		___lwdiv
  3160 ;;		___lwmod
  3161 ;; This function is called by:
  3162 ;;		_trabajo
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text7
  3167  006E64                     __ptext7:
  3168                           	opt stack 0
  3169  006E64                     _sprintf:
  3170                           	opt stack 27
  3171                           
  3172                           ;doprnt.c: 494: va_list ap;
  3173                           ;doprnt.c: 499: signed char c;
  3174                           ;doprnt.c: 506: signed char prec;
  3175                           ;doprnt.c: 508: unsigned char flag;
  3176                           ;doprnt.c: 523: union {
  3177                           ;doprnt.c: 524: unsigned long vd;
  3178                           ;doprnt.c: 525: double integ;
  3179                           ;doprnt.c: 526: } tmpval;
  3180                           ;doprnt.c: 528: unsigned int val;
  3181                           ;doprnt.c: 529: unsigned len;
  3182                           ;doprnt.c: 530: const char * cp;
  3183                           ;doprnt.c: 533: *ap = __va_start();
  3184                           
  3185                           ;incstack = 0
  3186  006E64  0E11               	movlw	low (?_sprintf+4)
  3187  006E66  6E14               	movwf	sprintf@ap,c
  3188  006E68  0E00               	movlw	high (?_sprintf+4)
  3189  006E6A  6E15               	movwf	sprintf@ap+1,c
  3190                           
  3191                           ;doprnt.c: 536: while(c = *f++) {
  3192  006E6C  D08C               	goto	u2220
  3193  006E6E                     
  3194                           ;doprnt.c: 538: if(c != '%')
  3195  006E6E  0E25               	movlw	37
  3196  006E70  181A               	xorwf	sprintf@c,w,c
  3197  006E72  B4D8               	btfsc	status,2,c
  3198  006E74  D009               	goto	l300
  3199                           
  3200                           ;doprnt.c: 540: {
  3201                           ;doprnt.c: 541: ((*sp++ = (c)));
  3202  006E76  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3203  006E7A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3204  006E7E  C01A  FFDF         	movff	sprintf@c,indf2
  3205  006E82  4A0D               	infsnz	sprintf@sp,f,c
  3206  006E84  2A0E               	incf	sprintf@sp+1,f,c
  3207                           
  3208                           ;doprnt.c: 542: continue;
  3209  006E86  D07F               	goto	u2220
  3210  006E88                     l300:
  3211                           
  3212                           ;doprnt.c: 543: }
  3213                           ;doprnt.c: 548: flag = 0;
  3214  006E88  0E00               	movlw	0
  3215  006E8A  6E16               	movwf	sprintf@flag,c
  3216                           
  3217                           ;doprnt.c: 822: }
  3218                           
  3219                           ;doprnt.c: 813: continue;
  3220                           
  3221                           ;doprnt.c: 802: default:
  3222                           
  3223                           ;doprnt.c: 698: case 'i':
  3224                           ;doprnt.c: 699: break;
  3225                           
  3226                           ;doprnt.c: 697: case 'd':
  3227                           
  3228                           ;doprnt.c: 638: goto alldone;
  3229                           
  3230                           ;doprnt.c: 637: case 0:
  3231                           
  3232                           ;doprnt.c: 635: switch(c = *f++) {
  3233  006E8C  C00F  FFF6         	movff	sprintf@f,tblptrl
  3234  006E90  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3235  006E94  4A0F               	infsnz	sprintf@f,f,c
  3236  006E96  2A10               	incf	sprintf@f+1,f,c
  3237  006E98                     	if	0	;tblptru may be non-zero
  3238  006E98                     	endif
  3239  006E98                     	if	0	;tblptru may be non-zero
  3240  006E98                     	endif
  3241  006E98  0008               	tblrd		*
  3242  006E9A  CFF5 F01A          	movff	tablat,sprintf@c
  3243  006E9E  501A               	movf	sprintf@c,w,c
  3244                           
  3245                           ; Switch size 1, requested type "space"
  3246                           ; Number of cases is 3, Range of values is 0 to 105
  3247                           ; switch strategies available:
  3248                           ; Name         Instructions Cycles
  3249                           ; simple_byte           10     6 (average)
  3250                           ;	Chosen strategy is simple_byte
  3251  006EA0  0A00               	xorlw	0	; case 0
  3252  006EA2  B4D8               	btfsc	status,2,c
  3253  006EA4  D07C               	goto	u2230
  3254  006EA6  0A64               	xorlw	100	; case 100
  3255  006EA8  B4D8               	btfsc	status,2,c
  3256  006EAA  D003               	goto	l306
  3257  006EAC  0A0D               	xorlw	13	; case 105
  3258  006EAE  A4D8               	btfss	status,2,c
  3259  006EB0  D06A               	goto	u2220
  3260  006EB2                     l306:
  3261                           
  3262                           ;doprnt.c: 1253: {
  3263                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3264  006EB2  C014  FFD9         	movff	sprintf@ap,fsr2l
  3265  006EB6  C015  FFDA         	movff	sprintf@ap+1,fsr2h
  3266  006EBA  CFDE F018          	movff	postinc2,sprintf@val
  3267  006EBE  CFDD F019          	movff	postdec2,sprintf@val+1
  3268  006EC2  0E02               	movlw	2
  3269  006EC4  2614               	addwf	sprintf@ap,f,c
  3270  006EC6  0E00               	movlw	0
  3271  006EC8  2215               	addwfc	sprintf@ap+1,f,c
  3272                           
  3273                           ;doprnt.c: 1261: if((int)val < 0) {
  3274  006ECA  AE19               	btfss	sprintf@val+1,7,c
  3275  006ECC  D006               	goto	l308
  3276                           
  3277                           ;doprnt.c: 1262: flag |= 0x03;
  3278  006ECE  0E03               	movlw	3
  3279  006ED0  1216               	iorwf	sprintf@flag,f,c
  3280                           
  3281                           ;doprnt.c: 1263: val = -val;
  3282  006ED2  6C18               	negf	sprintf@val,c
  3283  006ED4  1E19               	comf	sprintf@val+1,f,c
  3284  006ED6  B0D8               	btfsc	status,0,c
  3285  006ED8  2A19               	incf	sprintf@val+1,f,c
  3286  006EDA                     l308:
  3287                           
  3288                           ;doprnt.c: 1264: }
  3289                           ;doprnt.c: 1266: }
  3290                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3291  006EDA  0E01               	movlw	1
  3292  006EDC  6E1A               	movwf	sprintf@c,c
  3293  006EDE                     l2240:
  3294  006EDE  0E05               	movlw	5
  3295  006EE0  181A               	xorwf	sprintf@c,w,c
  3296  006EE2  B4D8               	btfsc	status,2,c
  3297  006EE4  D012               	goto	u2200
  3298                           
  3299                           ;doprnt.c: 1306: if(val < dpowers[c])
  3300  006EE6  501A               	movf	sprintf@c,w,c
  3301  006EE8  0D02               	mullw	2
  3302  006EEA  0EB7               	movlw	low _dpowers
  3303  006EEC  24F3               	addwf	prodl,w,c
  3304  006EEE  6EF6               	movwf	tblptrl,c
  3305  006EF0  0E7B               	movlw	high _dpowers
  3306  006EF2  20F4               	addwfc	prodh,w,c
  3307  006EF4  6EF7               	movwf	tblptrh,c
  3308  006EF6                     	if	0	;There are less than 3 active tblptr bytes
  3309  006EF6                     	endif
  3310  006EF6  0009               	tblrd		*+
  3311  006EF8  50F5               	movf	tablat,w,c
  3312  006EFA  5C18               	subwf	sprintf@val,w,c
  3313  006EFC  0009               	tblrd		*+
  3314  006EFE  50F5               	movf	tablat,w,c
  3315  006F00  5819               	subwfb	sprintf@val+1,w,c
  3316  006F02  A0D8               	btfss	status,0,c
  3317  006F04  D002               	goto	u2200
  3318                           
  3319                           ;doprnt.c: 1307: break;
  3320  006F06  2A1A               	incf	sprintf@c,f,c
  3321  006F08  D7EA               	goto	l2240
  3322  006F0A                     u2200:
  3323                           
  3324                           ;doprnt.c: 1422: {
  3325                           ;doprnt.c: 1438: if(flag & 0x03)
  3326  006F0A  C016  F013         	movff	sprintf@flag,??_sprintf
  3327  006F0E  0E03               	movlw	3
  3328  006F10  1613               	andwf	??_sprintf,f,c
  3329  006F12  B4D8               	btfsc	status,2,c
  3330  006F14  D008               	goto	l312
  3331                           
  3332                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3333  006F16  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3334  006F1A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3335  006F1E  0E2D               	movlw	45
  3336  006F20  6EDF               	movwf	indf2,c
  3337  006F22  4A0D               	infsnz	sprintf@sp,f,c
  3338  006F24  2A0E               	incf	sprintf@sp+1,f,c
  3339  006F26                     l312:
  3340                           
  3341                           ;doprnt.c: 1469: }
  3342                           ;doprnt.c: 1472: prec = c;
  3343  006F26  C01A  F017         	movff	sprintf@c,sprintf@prec
  3344                           
  3345                           ;doprnt.c: 1474: while(prec--) {
  3346  006F2A  D029               	goto	l313
  3347  006F2C                     
  3348                           ;doprnt.c: 1478: {
  3349                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3350  006F2C  5017               	movf	sprintf@prec,w,c
  3351  006F2E  0D02               	mullw	2
  3352  006F30  0EB7               	movlw	low _dpowers
  3353  006F32  24F3               	addwf	prodl,w,c
  3354  006F34  6EF6               	movwf	tblptrl,c
  3355  006F36  0E7B               	movlw	high _dpowers
  3356  006F38  20F4               	addwfc	prodh,w,c
  3357  006F3A  6EF7               	movwf	tblptrh,c
  3358  006F3C                     	if	0	;There are less than 3 active tblptr bytes
  3359  006F3C                     	endif
  3360  006F3C  0009               	tblrd		*+
  3361  006F3E  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3362  006F42  000A               	tblrd		*-
  3363  006F44  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3364  006F48  C018  F001         	movff	sprintf@val,___lwdiv@dividend
  3365  006F4C  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  3366  006F50  EC1B  F034         	call	___lwdiv	;wreg free
  3367  006F54  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3368  006F58  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3369  006F5C  0E00               	movlw	0
  3370  006F5E  6E0B               	movwf	___lwmod@divisor+1,c
  3371  006F60  0E0A               	movlw	10
  3372  006F62  6E0A               	movwf	___lwmod@divisor,c
  3373  006F64  ECD3  F033         	call	___lwmod	;wreg free
  3374  006F68  5008               	movf	?___lwmod,w,c
  3375  006F6A  0F30               	addlw	48
  3376  006F6C  6E1A               	movwf	sprintf@c,c
  3377                           
  3378                           ;doprnt.c: 1523: }
  3379                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3380  006F6E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3381  006F72  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3382  006F76  C01A  FFDF         	movff	sprintf@c,indf2
  3383  006F7A  4A0D               	infsnz	sprintf@sp,f,c
  3384  006F7C  2A0E               	incf	sprintf@sp+1,f,c
  3385  006F7E                     l313:
  3386  006F7E  0617               	decf	sprintf@prec,f,c
  3387  006F80  2817               	incf	sprintf@prec,w,c
  3388  006F82  A4D8               	btfss	status,2,c
  3389  006F84  D7D3               	goto	l314
  3390  006F86                     u2220:
  3391  006F86  C00F  FFF6         	movff	sprintf@f,tblptrl
  3392  006F8A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3393  006F8E  4A0F               	infsnz	sprintf@f,f,c
  3394  006F90  2A10               	incf	sprintf@f+1,f,c
  3395  006F92                     	if	0	;tblptru may be non-zero
  3396  006F92                     	endif
  3397  006F92                     	if	0	;tblptru may be non-zero
  3398  006F92                     	endif
  3399  006F92  0008               	tblrd		*
  3400  006F94  CFF5 F01A          	movff	tablat,sprintf@c
  3401  006F98  501A               	movf	sprintf@c,w,c
  3402  006F9A  A4D8               	btfss	status,2,c
  3403  006F9C  D768               	goto	l299
  3404  006F9E                     u2230:
  3405                           
  3406                           ;doprnt.c: 1538: *sp = 0;
  3407                           
  3408                           ;doprnt.c: 1525: }
  3409                           ;doprnt.c: 1533: }
  3410                           ;doprnt.c: 1535: alldone:
  3411  006F9E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3412  006FA2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3413  006FA6  0E00               	movlw	0
  3414  006FA8  6EDF               	movwf	indf2,c
  3415  006FAA  0012               	return	
  3416  006FAC                     __end_of_sprintf:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           prodh	equ	0xFF4
  3423                           prodl	equ	0xFF3
  3424                           wreg	equ	0xFE8
  3425                           indf2	equ	0xFDF
  3426                           postinc2	equ	0xFDE
  3427                           postdec2	equ	0xFDD
  3428                           plusw2	equ	0xFDB
  3429                           fsr2h	equ	0xFDA
  3430                           fsr2l	equ	0xFD9
  3431                           status	equ	0xFD8
  3432                           
  3433 ;; *************** function ___lwmod *****************
  3434 ;; Defined at:
  3435 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  dividend        2    7[COMRAM] unsigned int 
  3438 ;;  divisor         2    9[COMRAM] unsigned int 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  counter         1   11[COMRAM] unsigned char 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  2    7[COMRAM] unsigned int 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3450 ;;      Params:         4       0       0       0       0       0       0       0       0
  3451 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3453 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3454 ;;Total ram usage:        5 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; This function calls:
  3457 ;;		Nothing
  3458 ;; This function is called by:
  3459 ;;		_sprintf
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text8
  3464  0067A6                     __ptext8:
  3465                           	opt stack 0
  3466  0067A6                     ___lwmod:
  3467                           	opt stack 27
  3468                           
  3469                           ;incstack = 0
  3470  0067A6  500A               	movf	___lwmod@divisor,w,c
  3471  0067A8  100B               	iorwf	___lwmod@divisor+1,w,c
  3472  0067AA  B4D8               	btfsc	status,2,c
  3473  0067AC  D018               	goto	l736
  3474  0067AE  0E01               	movlw	1
  3475  0067B0  6E0C               	movwf	___lwmod@counter,c
  3476  0067B2  D004               	goto	l731
  3477  0067B4  90D8               	bcf	status,0,c
  3478  0067B6  360A               	rlcf	___lwmod@divisor,f,c
  3479  0067B8  360B               	rlcf	___lwmod@divisor+1,f,c
  3480  0067BA  2A0C               	incf	___lwmod@counter,f,c
  3481  0067BC                     l731:
  3482  0067BC  AE0B               	btfss	___lwmod@divisor+1,7,c
  3483  0067BE  D7FA               	goto	l732
  3484  0067C0                     u1690:
  3485  0067C0  500A               	movf	___lwmod@divisor,w,c
  3486  0067C2  5C08               	subwf	___lwmod@dividend,w,c
  3487  0067C4  500B               	movf	___lwmod@divisor+1,w,c
  3488  0067C6  5809               	subwfb	___lwmod@dividend+1,w,c
  3489  0067C8  A0D8               	btfss	status,0,c
  3490  0067CA  D004               	goto	l735
  3491  0067CC  500A               	movf	___lwmod@divisor,w,c
  3492  0067CE  5E08               	subwf	___lwmod@dividend,f,c
  3493  0067D0  500B               	movf	___lwmod@divisor+1,w,c
  3494  0067D2  5A09               	subwfb	___lwmod@dividend+1,f,c
  3495  0067D4                     l735:
  3496  0067D4  90D8               	bcf	status,0,c
  3497  0067D6  320B               	rrcf	___lwmod@divisor+1,f,c
  3498  0067D8  320A               	rrcf	___lwmod@divisor,f,c
  3499  0067DA  2E0C               	decfsz	___lwmod@counter,f,c
  3500  0067DC  D7F1               	goto	u1690
  3501  0067DE                     l736:
  3502  0067DE  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3503  0067E2  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3504  0067E6  0012               	return		;funcret
  3505  0067E8                     __end_of___lwmod:
  3506                           	opt stack 0
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           prodh	equ	0xFF4
  3512                           prodl	equ	0xFF3
  3513                           wreg	equ	0xFE8
  3514                           indf2	equ	0xFDF
  3515                           postinc2	equ	0xFDE
  3516                           postdec2	equ	0xFDD
  3517                           plusw2	equ	0xFDB
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function ___lwdiv *****************
  3523 ;; Defined at:
  3524 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;  dividend        2    0[COMRAM] unsigned int 
  3527 ;;  divisor         2    2[COMRAM] unsigned int 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  quotient        2    4[COMRAM] unsigned int 
  3530 ;;  counter         1    6[COMRAM] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  2    0[COMRAM] unsigned int 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3540 ;;      Params:         4       0       0       0       0       0       0       0       0
  3541 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3543 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3544 ;;Total ram usage:        7 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; This function calls:
  3547 ;;		Nothing
  3548 ;; This function is called by:
  3549 ;;		_sprintf
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text9
  3554  006836                     __ptext9:
  3555                           	opt stack 0
  3556  006836                     ___lwdiv:
  3557                           	opt stack 27
  3558                           
  3559                           ;incstack = 0
  3560  006836  0E00               	movlw	0
  3561  006838  6E06               	movwf	___lwdiv@quotient+1,c
  3562  00683A  0E00               	movlw	0
  3563  00683C  6E05               	movwf	___lwdiv@quotient,c
  3564  00683E  5003               	movf	___lwdiv@divisor,w,c
  3565  006840  1004               	iorwf	___lwdiv@divisor+1,w,c
  3566  006842  B4D8               	btfsc	status,2,c
  3567  006844  D01C               	goto	l726
  3568  006846  0E01               	movlw	1
  3569  006848  6E07               	movwf	___lwdiv@counter,c
  3570  00684A  D004               	goto	l721
  3571  00684C  90D8               	bcf	status,0,c
  3572  00684E  3603               	rlcf	___lwdiv@divisor,f,c
  3573  006850  3604               	rlcf	___lwdiv@divisor+1,f,c
  3574  006852  2A07               	incf	___lwdiv@counter,f,c
  3575  006854                     l721:
  3576  006854  AE04               	btfss	___lwdiv@divisor+1,7,c
  3577  006856  D7FA               	goto	l722
  3578  006858                     u1660:
  3579  006858  90D8               	bcf	status,0,c
  3580  00685A  3605               	rlcf	___lwdiv@quotient,f,c
  3581  00685C  3606               	rlcf	___lwdiv@quotient+1,f,c
  3582  00685E  5003               	movf	___lwdiv@divisor,w,c
  3583  006860  5C01               	subwf	___lwdiv@dividend,w,c
  3584  006862  5004               	movf	___lwdiv@divisor+1,w,c
  3585  006864  5802               	subwfb	___lwdiv@dividend+1,w,c
  3586  006866  A0D8               	btfss	status,0,c
  3587  006868  D005               	goto	l725
  3588  00686A  5003               	movf	___lwdiv@divisor,w,c
  3589  00686C  5E01               	subwf	___lwdiv@dividend,f,c
  3590  00686E  5004               	movf	___lwdiv@divisor+1,w,c
  3591  006870  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3592  006872  8005               	bsf	___lwdiv@quotient,0,c
  3593  006874                     l725:
  3594  006874  90D8               	bcf	status,0,c
  3595  006876  3204               	rrcf	___lwdiv@divisor+1,f,c
  3596  006878  3203               	rrcf	___lwdiv@divisor,f,c
  3597  00687A  2E07               	decfsz	___lwdiv@counter,f,c
  3598  00687C  D7ED               	goto	u1660
  3599  00687E                     l726:
  3600  00687E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3601  006882  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3602  006886  0012               	return		;funcret
  3603  006888                     __end_of___lwdiv:
  3604                           	opt stack 0
  3605                           tblptru	equ	0xFF8
  3606                           tblptrh	equ	0xFF7
  3607                           tblptrl	equ	0xFF6
  3608                           tablat	equ	0xFF5
  3609                           prodh	equ	0xFF4
  3610                           prodl	equ	0xFF3
  3611                           wreg	equ	0xFE8
  3612                           indf2	equ	0xFDF
  3613                           postinc2	equ	0xFDE
  3614                           postdec2	equ	0xFDD
  3615                           plusw2	equ	0xFDB
  3616                           fsr2h	equ	0xFDA
  3617                           fsr2l	equ	0xFD9
  3618                           status	equ	0xFD8
  3619                           
  3620 ;; *************** function _lcdshiftCursor *****************
  3621 ;; Defined at:
  3622 ;;		line 167 in file "receptor.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  value           1    wreg     unsigned char 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;  value           1    3[COMRAM] unsigned char 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3636 ;;      Params:         0       0       0       0       0       0       0       0       0
  3637 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3638 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3639 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3640 ;;Total ram usage:        2 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    1
  3643 ;; This function calls:
  3644 ;;		_lcdcmd
  3645 ;; This function is called by:
  3646 ;;		_trabajo
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           	psect	text10
  3651  006704                     __ptext10:
  3652                           	opt stack 0
  3653  006704                     _lcdshiftCursor:
  3654                           	opt stack 27
  3655                           
  3656                           ;incstack = 0
  3657                           ;lcdshiftCursor@value stored from wreg
  3658  006704  6E04               	movwf	lcdshiftCursor@value,c
  3659                           
  3660                           ;receptor.c: 168: if (value == 'L')lcdcmd(0b00010000);
  3661  006706  0E4C               	movlw	76
  3662  006708  1804               	xorwf	lcdshiftCursor@value,w,c
  3663  00670A  A4D8               	btfss	status,2,c
  3664  00670C  D003               	goto	l180
  3665  00670E  0E10               	movlw	16
  3666  006710  EC2B  F033         	call	_lcdcmd
  3667  006714                     l180:
  3668                           
  3669                           ;receptor.c: 169: if (value == 'R')lcdcmd(0b10010100);
  3670  006714  0E52               	movlw	82
  3671  006716  1804               	xorwf	lcdshiftCursor@value,w,c
  3672  006718  A4D8               	btfss	status,2,c
  3673  00671A  D003               	goto	l181
  3674  00671C  0E94               	movlw	148
  3675  00671E  EC2B  F033         	call	_lcdcmd
  3676  006722                     l181:
  3677                           
  3678                           ;receptor.c: 170: _delay((unsigned long)((2)*(8000000/4000.0)));
  3679  006722  0E06               	movlw	6
  3680  006724  6E03               	movwf	??_lcdshiftCursor& (0+255),c
  3681  006726  0E30               	movlw	48
  3682  006728                     u3047:
  3683  006728  2EE8               	decfsz	wreg,f,c
  3684  00672A  D7FE               	bra	u3047
  3685  00672C  2E03               	decfsz	??_lcdshiftCursor& (0+255),f,c
  3686  00672E  D7FC               	bra	u3047
  3687  006730  D000               	nop2	
  3688  006732  0012               	return		;funcret
  3689  006734                     __end_of_lcdshiftCursor:
  3690                           	opt stack 0
  3691                           tblptru	equ	0xFF8
  3692                           tblptrh	equ	0xFF7
  3693                           tblptrl	equ	0xFF6
  3694                           tablat	equ	0xFF5
  3695                           prodh	equ	0xFF4
  3696                           prodl	equ	0xFF3
  3697                           wreg	equ	0xFE8
  3698                           indf2	equ	0xFDF
  3699                           postinc2	equ	0xFDE
  3700                           postdec2	equ	0xFDD
  3701                           plusw2	equ	0xFDB
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function ___wmul *****************
  3707 ;; Defined at:
  3708 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  multiplier      2    0[COMRAM] unsigned int 
  3711 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  product         2    4[COMRAM] unsigned int 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  2    0[COMRAM] unsigned int 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0, prodl, prodh
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3723 ;;      Params:         4       0       0       0       0       0       0       0       0
  3724 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3725 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3726 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3727 ;;Total ram usage:        6 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_trabajo
  3733 ;;		_menu
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737                           	psect	text11
  3738  0066B6                     __ptext11:
  3739                           	opt stack 0
  3740  0066B6                     ___wmul:
  3741                           	opt stack 28
  3742                           
  3743                           ;incstack = 0
  3744  0066B6  5001               	movf	___wmul@multiplier,w,c
  3745  0066B8  0203               	mulwf	___wmul@multiplicand,c
  3746  0066BA  CFF3 F005          	movff	prodl,___wmul@product
  3747  0066BE  CFF4 F006          	movff	prodh,___wmul@product+1
  3748  0066C2  5001               	movf	___wmul@multiplier,w,c
  3749  0066C4  0204               	mulwf	___wmul@multiplicand+1,c
  3750  0066C6  50F3               	movf	prodl,w,c
  3751  0066C8  2606               	addwf	___wmul@product+1,f,c
  3752  0066CA  5002               	movf	___wmul@multiplier+1,w,c
  3753  0066CC  0203               	mulwf	___wmul@multiplicand,c
  3754  0066CE  50F3               	movf	prodl,w,c
  3755  0066D0  2606               	addwf	___wmul@product+1,f,c
  3756  0066D2  C005  F001         	movff	___wmul@product,?___wmul
  3757  0066D6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3758  0066DA  0012               	return	
  3759  0066DC                     __end_of___wmul:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           wreg	equ	0xFE8
  3768                           indf2	equ	0xFDF
  3769                           postinc2	equ	0xFDE
  3770                           postdec2	equ	0xFDD
  3771                           plusw2	equ	0xFDB
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776 ;; *************** function ___lbtoft *****************
  3777 ;; Defined at:
  3778 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;  c               1    wreg     unsigned char 
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  c               1   11[COMRAM] unsigned char 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  3    8[COMRAM] float 
  3785 ;; Registers used:
  3786 ;;		wreg, status,2, status,0, cstack
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3792 ;;      Params:         3       0       0       0       0       0       0       0       0
  3793 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3794 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3795 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3796 ;;Total ram usage:        4 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    1
  3799 ;; This function calls:
  3800 ;;		___ftpack
  3801 ;; This function is called by:
  3802 ;;		_trabajo
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text12
  3807  006692                     __ptext12:
  3808                           	opt stack 0
  3809  006692                     ___lbtoft:
  3810                           	opt stack 27
  3811                           
  3812                           ;incstack = 0
  3813                           ;___lbtoft@c stored from wreg
  3814  006692  6E0C               	movwf	___lbtoft@c,c
  3815  006694  500C               	movf	___lbtoft@c,w,c
  3816  006696  6E01               	movwf	___ftpack@arg,c
  3817  006698  6A02               	clrf	___ftpack@arg+1,c
  3818  00669A  6A03               	clrf	___ftpack@arg+2,c
  3819  00669C  0E8E               	movlw	142
  3820  00669E  6E04               	movwf	___ftpack@exp,c
  3821  0066A0  0E00               	movlw	0
  3822  0066A2  6E05               	movwf	___ftpack@sign,c
  3823  0066A4  EC65  F035         	call	___ftpack	;wreg free
  3824  0066A8  C001  F009         	movff	?___ftpack,?___lbtoft
  3825  0066AC  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  3826  0066B0  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  3827  0066B4  0012               	return	
  3828  0066B6                     __end_of___lbtoft:
  3829                           	opt stack 0
  3830                           tblptru	equ	0xFF8
  3831                           tblptrh	equ	0xFF7
  3832                           tblptrl	equ	0xFF6
  3833                           tablat	equ	0xFF5
  3834                           prodh	equ	0xFF4
  3835                           prodl	equ	0xFF3
  3836                           wreg	equ	0xFE8
  3837                           indf2	equ	0xFDF
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           plusw2	equ	0xFDB
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function ___lbdiv *****************
  3846 ;; Defined at:
  3847 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbdiv.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  dividend        1    wreg     unsigned char 
  3850 ;;  divisor         1    0[COMRAM] unsigned char 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  dividend        1    1[COMRAM] unsigned char 
  3853 ;;  quotient        1    3[COMRAM] unsigned char 
  3854 ;;  counter         1    2[COMRAM] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      unsigned char 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3864 ;;      Params:         1       0       0       0       0       0       0       0       0
  3865 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3867 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3868 ;;Total ram usage:        4 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_trabajo
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text13
  3878  00676C                     __ptext13:
  3879                           	opt stack 0
  3880  00676C                     ___lbdiv:
  3881                           	opt stack 28
  3882                           
  3883                           ;incstack = 0
  3884                           ;___lbdiv@dividend stored from wreg
  3885  00676C  6E02               	movwf	___lbdiv@dividend,c
  3886  00676E  0E00               	movlw	0
  3887  006770  6E04               	movwf	___lbdiv@quotient,c
  3888  006772  5001               	movf	___lbdiv@divisor,w,c
  3889  006774  B4D8               	btfsc	status,2,c
  3890  006776  D015               	goto	l652
  3891  006778  0E01               	movlw	1
  3892  00677A  6E03               	movwf	___lbdiv@counter,c
  3893  00677C  D003               	goto	l647
  3894  00677E  90D8               	bcf	status,0,c
  3895  006780  3601               	rlcf	___lbdiv@divisor,f,c
  3896  006782  2A03               	incf	___lbdiv@counter,f,c
  3897  006784                     l647:
  3898  006784  AE01               	btfss	___lbdiv@divisor,7,c
  3899  006786  D7FB               	goto	l648
  3900  006788                     u2320:
  3901  006788  90D8               	bcf	status,0,c
  3902  00678A  3604               	rlcf	___lbdiv@quotient,f,c
  3903  00678C  5001               	movf	___lbdiv@divisor,w,c
  3904  00678E  5C02               	subwf	___lbdiv@dividend,w,c
  3905  006790  A0D8               	btfss	status,0,c
  3906  006792  D003               	goto	l651
  3907  006794  5001               	movf	___lbdiv@divisor,w,c
  3908  006796  5E02               	subwf	___lbdiv@dividend,f,c
  3909  006798  8004               	bsf	___lbdiv@quotient,0,c
  3910  00679A                     l651:
  3911  00679A  90D8               	bcf	status,0,c
  3912  00679C  3201               	rrcf	___lbdiv@divisor,f,c
  3913  00679E  2E03               	decfsz	___lbdiv@counter,f,c
  3914  0067A0  D7F3               	goto	u2320
  3915  0067A2                     l652:
  3916  0067A2  5004               	movf	___lbdiv@quotient,w,c
  3917  0067A4  0012               	return	
  3918  0067A6                     __end_of___lbdiv:
  3919                           	opt stack 0
  3920                           tblptru	equ	0xFF8
  3921                           tblptrh	equ	0xFF7
  3922                           tblptrl	equ	0xFF6
  3923                           tablat	equ	0xFF5
  3924                           prodh	equ	0xFF4
  3925                           prodl	equ	0xFF3
  3926                           wreg	equ	0xFE8
  3927                           indf2	equ	0xFDF
  3928                           postinc2	equ	0xFDE
  3929                           postdec2	equ	0xFDD
  3930                           plusw2	equ	0xFDB
  3931                           fsr2h	equ	0xFDA
  3932                           fsr2l	equ	0xFD9
  3933                           status	equ	0xFD8
  3934                           
  3935 ;; *************** function ___awtoft *****************
  3936 ;; Defined at:
  3937 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  c               2    8[COMRAM] int 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  sign            1   11[COMRAM] unsigned char 
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  3    8[COMRAM] float 
  3944 ;; Registers used:
  3945 ;;		wreg, status,2, status,0, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3951 ;;      Params:         3       0       0       0       0       0       0       0       0
  3952 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3953 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3954 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3955 ;;Total ram usage:        4 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:    1
  3958 ;; This function calls:
  3959 ;;		___ftpack
  3960 ;; This function is called by:
  3961 ;;		_trabajo
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text14
  3966  006734                     __ptext14:
  3967                           	opt stack 0
  3968  006734                     ___awtoft:
  3969                           	opt stack 27
  3970                           
  3971                           ;incstack = 0
  3972  006734  0E00               	movlw	0
  3973  006736  6E0C               	movwf	___awtoft@sign,c
  3974  006738  AE0A               	btfss	___awtoft@c+1,7,c
  3975  00673A  D006               	goto	l513
  3976  00673C  6C09               	negf	___awtoft@c,c
  3977  00673E  1E0A               	comf	___awtoft@c+1,f,c
  3978  006740  B0D8               	btfsc	status,0,c
  3979  006742  2A0A               	incf	___awtoft@c+1,f,c
  3980  006744  0E01               	movlw	1
  3981  006746  6E0C               	movwf	___awtoft@sign,c
  3982  006748                     l513:
  3983  006748  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3984  00674C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3985  006750  6A03               	clrf	___ftpack@arg+2,c
  3986  006752  0E8E               	movlw	142
  3987  006754  6E04               	movwf	___ftpack@exp,c
  3988  006756  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3989  00675A  EC65  F035         	call	___ftpack	;wreg free
  3990  00675E  C001  F009         	movff	?___ftpack,?___awtoft
  3991  006762  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3992  006766  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3993  00676A  0012               	return	
  3994  00676C                     __end_of___awtoft:
  3995                           	opt stack 0
  3996                           tblptru	equ	0xFF8
  3997                           tblptrh	equ	0xFF7
  3998                           tblptrl	equ	0xFF6
  3999                           tablat	equ	0xFF5
  4000                           prodh	equ	0xFF4
  4001                           prodl	equ	0xFF3
  4002                           wreg	equ	0xFE8
  4003                           indf2	equ	0xFDF
  4004                           postinc2	equ	0xFDE
  4005                           postdec2	equ	0xFDD
  4006                           plusw2	equ	0xFDB
  4007                           fsr2h	equ	0xFDA
  4008                           fsr2l	equ	0xFD9
  4009                           status	equ	0xFD8
  4010                           
  4011 ;; *************** function ___ftpack *****************
  4012 ;; Defined at:
  4013 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  arg             3    0[COMRAM] unsigned um
  4016 ;;  exp             1    3[COMRAM] unsigned char 
  4017 ;;  sign            1    4[COMRAM] unsigned char 
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;		None
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  3    0[COMRAM] float 
  4022 ;; Registers used:
  4023 ;;		wreg, status,2, status,0
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4029 ;;      Params:         5       0       0       0       0       0       0       0       0
  4030 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4031 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4032 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4033 ;;Total ram usage:        8 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		___altoft
  4039 ;;		___awtoft
  4040 ;;		___lbtoft
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text15
  4045  006ACA                     __ptext15:
  4046                           	opt stack 0
  4047  006ACA                     ___ftpack:
  4048                           	opt stack 26
  4049                           
  4050                           ;incstack = 0
  4051  006ACA  5004               	movf	___ftpack@exp,w,c
  4052  006ACC  B4D8               	btfsc	status,2,c
  4053  006ACE  D005               	goto	u1480
  4054  006AD0  5001               	movf	___ftpack@arg,w,c
  4055  006AD2  1002               	iorwf	___ftpack@arg+1,w,c
  4056  006AD4  1003               	iorwf	___ftpack@arg+2,w,c
  4057  006AD6  A4D8               	btfss	status,2,c
  4058  006AD8  D00C               	goto	l532
  4059  006ADA                     u1480:
  4060  006ADA  0E00               	movlw	0
  4061  006ADC  6E01               	movwf	?___ftpack,c
  4062  006ADE  0E00               	movlw	0
  4063  006AE0  6E02               	movwf	?___ftpack+1,c
  4064  006AE2  0E00               	movlw	0
  4065  006AE4  6E03               	movwf	?___ftpack+2,c
  4066  006AE6  0012               	return	
  4067  006AE8  2A04               	incf	___ftpack@exp,f,c
  4068  006AEA  90D8               	bcf	status,0,c
  4069  006AEC  3203               	rrcf	___ftpack@arg+2,f,c
  4070  006AEE  3202               	rrcf	___ftpack@arg+1,f,c
  4071  006AF0  3201               	rrcf	___ftpack@arg,f,c
  4072  006AF2                     l532:
  4073  006AF2  0E00               	movlw	0
  4074  006AF4  1401               	andwf	___ftpack@arg,w,c
  4075  006AF6  6E06               	movwf	??___ftpack& (0+255),c
  4076  006AF8  0E00               	movlw	0
  4077  006AFA  1402               	andwf	___ftpack@arg+1,w,c
  4078  006AFC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4079  006AFE  0EFE               	movlw	254
  4080  006B00  1403               	andwf	___ftpack@arg+2,w,c
  4081  006B02  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4082  006B04  5006               	movf	??___ftpack,w,c
  4083  006B06  1007               	iorwf	??___ftpack+1,w,c
  4084  006B08  1008               	iorwf	??___ftpack+2,w,c
  4085  006B0A  B4D8               	btfsc	status,2,c
  4086  006B0C  D00C               	goto	l535
  4087  006B0E  D7EC               	goto	l533
  4088  006B10  2A04               	incf	___ftpack@exp,f,c
  4089  006B12  0E01               	movlw	1
  4090  006B14  2601               	addwf	___ftpack@arg,f,c
  4091  006B16  0E00               	movlw	0
  4092  006B18  2202               	addwfc	___ftpack@arg+1,f,c
  4093  006B1A  0E00               	movlw	0
  4094  006B1C  2203               	addwfc	___ftpack@arg+2,f,c
  4095  006B1E  90D8               	bcf	status,0,c
  4096  006B20  3203               	rrcf	___ftpack@arg+2,f,c
  4097  006B22  3202               	rrcf	___ftpack@arg+1,f,c
  4098  006B24  3201               	rrcf	___ftpack@arg,f,c
  4099  006B26                     l535:
  4100  006B26  0E00               	movlw	0
  4101  006B28  1401               	andwf	___ftpack@arg,w,c
  4102  006B2A  6E06               	movwf	??___ftpack& (0+255),c
  4103  006B2C  0E00               	movlw	0
  4104  006B2E  1402               	andwf	___ftpack@arg+1,w,c
  4105  006B30  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4106  006B32  0EFF               	movlw	255
  4107  006B34  1403               	andwf	___ftpack@arg+2,w,c
  4108  006B36  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4109  006B38  5006               	movf	??___ftpack,w,c
  4110  006B3A  1007               	iorwf	??___ftpack+1,w,c
  4111  006B3C  1008               	iorwf	??___ftpack+2,w,c
  4112  006B3E  B4D8               	btfsc	status,2,c
  4113  006B40  D006               	goto	l538
  4114  006B42  D7E6               	goto	l536
  4115  006B44  0604               	decf	___ftpack@exp,f,c
  4116  006B46  90D8               	bcf	status,0,c
  4117  006B48  3601               	rlcf	___ftpack@arg,f,c
  4118  006B4A  3602               	rlcf	___ftpack@arg+1,f,c
  4119  006B4C  3603               	rlcf	___ftpack@arg+2,f,c
  4120  006B4E                     l538:
  4121  006B4E  BE02               	btfsc	___ftpack@arg+1,7,c
  4122  006B50  D003               	goto	u1520
  4123  006B52  0E02               	movlw	2
  4124  006B54  6004               	cpfslt	___ftpack@exp,c
  4125  006B56  D7F6               	goto	l539
  4126  006B58                     u1520:
  4127  006B58  A004               	btfss	___ftpack@exp,0,c
  4128  006B5A  9E02               	bcf	___ftpack@arg+1,7,c
  4129  006B5C  90D8               	bcf	status,0,c
  4130  006B5E  3204               	rrcf	___ftpack@exp,f,c
  4131  006B60  5004               	movf	___ftpack@exp,w,c
  4132  006B62  1203               	iorwf	___ftpack@arg+2,f,c
  4133  006B64  5005               	movf	___ftpack@sign,w,c
  4134  006B66  A4D8               	btfss	status,2,c
  4135  006B68  8E03               	bsf	___ftpack@arg+2,7,c
  4136  006B6A  C001  F001         	movff	___ftpack@arg,?___ftpack
  4137  006B6E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4138  006B72  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4139  006B76  0012               	return	
  4140  006B78                     __end_of___ftpack:
  4141                           	opt stack 0
  4142                           tblptru	equ	0xFF8
  4143                           tblptrh	equ	0xFF7
  4144                           tblptrl	equ	0xFF6
  4145                           tablat	equ	0xFF5
  4146                           prodh	equ	0xFF4
  4147                           prodl	equ	0xFF3
  4148                           wreg	equ	0xFE8
  4149                           indf2	equ	0xFDF
  4150                           postinc2	equ	0xFDE
  4151                           postdec2	equ	0xFDD
  4152                           plusw2	equ	0xFDB
  4153                           fsr2h	equ	0xFDA
  4154                           fsr2l	equ	0xFD9
  4155                           status	equ	0xFD8
  4156                           
  4157 ;; *************** function ___awdiv *****************
  4158 ;; Defined at:
  4159 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  dividend        2    0[COMRAM] int 
  4162 ;;  divisor         2    2[COMRAM] int 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  quotient        2    6[COMRAM] int 
  4165 ;;  sign            1    5[COMRAM] unsigned char 
  4166 ;;  counter         1    4[COMRAM] unsigned char 
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  2    0[COMRAM] int 
  4169 ;; Registers used:
  4170 ;;		wreg, status,2, status,0
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4176 ;;      Params:         4       0       0       0       0       0       0       0       0
  4177 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4179 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4180 ;;Total ram usage:        8 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_trabajo
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           	psect	text16
  4190  006A46                     __ptext16:
  4191                           	opt stack 0
  4192  006A46                     ___awdiv:
  4193                           	opt stack 28
  4194                           
  4195                           ;incstack = 0
  4196  006A46  0E00               	movlw	0
  4197  006A48  6E06               	movwf	___awdiv@sign,c
  4198  006A4A  AE04               	btfss	___awdiv@divisor+1,7,c
  4199  006A4C  D006               	goto	l485
  4200  006A4E  6C03               	negf	___awdiv@divisor,c
  4201  006A50  1E04               	comf	___awdiv@divisor+1,f,c
  4202  006A52  B0D8               	btfsc	status,0,c
  4203  006A54  2A04               	incf	___awdiv@divisor+1,f,c
  4204  006A56  0E01               	movlw	1
  4205  006A58  6E06               	movwf	___awdiv@sign,c
  4206  006A5A                     l485:
  4207  006A5A  AE02               	btfss	___awdiv@dividend+1,7,c
  4208  006A5C  D006               	goto	l486
  4209  006A5E  6C01               	negf	___awdiv@dividend,c
  4210  006A60  1E02               	comf	___awdiv@dividend+1,f,c
  4211  006A62  B0D8               	btfsc	status,0,c
  4212  006A64  2A02               	incf	___awdiv@dividend+1,f,c
  4213  006A66  0E01               	movlw	1
  4214  006A68  1A06               	xorwf	___awdiv@sign,f,c
  4215  006A6A                     l486:
  4216  006A6A  0E00               	movlw	0
  4217  006A6C  6E08               	movwf	___awdiv@quotient+1,c
  4218  006A6E  0E00               	movlw	0
  4219  006A70  6E07               	movwf	___awdiv@quotient,c
  4220  006A72  5003               	movf	___awdiv@divisor,w,c
  4221  006A74  1004               	iorwf	___awdiv@divisor+1,w,c
  4222  006A76  B4D8               	btfsc	status,2,c
  4223  006A78  D01C               	goto	l493
  4224  006A7A  0E01               	movlw	1
  4225  006A7C  6E05               	movwf	___awdiv@counter,c
  4226  006A7E  D004               	goto	l488
  4227  006A80  90D8               	bcf	status,0,c
  4228  006A82  3603               	rlcf	___awdiv@divisor,f,c
  4229  006A84  3604               	rlcf	___awdiv@divisor+1,f,c
  4230  006A86  2A05               	incf	___awdiv@counter,f,c
  4231  006A88                     l488:
  4232  006A88  AE04               	btfss	___awdiv@divisor+1,7,c
  4233  006A8A  D7FA               	goto	l489
  4234  006A8C                     u2270:
  4235  006A8C  90D8               	bcf	status,0,c
  4236  006A8E  3607               	rlcf	___awdiv@quotient,f,c
  4237  006A90  3608               	rlcf	___awdiv@quotient+1,f,c
  4238  006A92  5003               	movf	___awdiv@divisor,w,c
  4239  006A94  5C01               	subwf	___awdiv@dividend,w,c
  4240  006A96  5004               	movf	___awdiv@divisor+1,w,c
  4241  006A98  5802               	subwfb	___awdiv@dividend+1,w,c
  4242  006A9A  A0D8               	btfss	status,0,c
  4243  006A9C  D005               	goto	l492
  4244  006A9E  5003               	movf	___awdiv@divisor,w,c
  4245  006AA0  5E01               	subwf	___awdiv@dividend,f,c
  4246  006AA2  5004               	movf	___awdiv@divisor+1,w,c
  4247  006AA4  5A02               	subwfb	___awdiv@dividend+1,f,c
  4248  006AA6  8007               	bsf	___awdiv@quotient,0,c
  4249  006AA8                     l492:
  4250  006AA8  90D8               	bcf	status,0,c
  4251  006AAA  3204               	rrcf	___awdiv@divisor+1,f,c
  4252  006AAC  3203               	rrcf	___awdiv@divisor,f,c
  4253  006AAE  2E05               	decfsz	___awdiv@counter,f,c
  4254  006AB0  D7ED               	goto	u2270
  4255  006AB2                     l493:
  4256  006AB2  5006               	movf	___awdiv@sign,w,c
  4257  006AB4  B4D8               	btfsc	status,2,c
  4258  006AB6  D004               	goto	l494
  4259  006AB8  6C07               	negf	___awdiv@quotient,c
  4260  006ABA  1E08               	comf	___awdiv@quotient+1,f,c
  4261  006ABC  B0D8               	btfsc	status,0,c
  4262  006ABE  2A08               	incf	___awdiv@quotient+1,f,c
  4263  006AC0                     l494:
  4264  006AC0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4265  006AC4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4266  006AC8  0012               	return	
  4267  006ACA                     __end_of___awdiv:
  4268                           	opt stack 0
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           wreg	equ	0xFE8
  4276                           indf2	equ	0xFDF
  4277                           postinc2	equ	0xFDE
  4278                           postdec2	equ	0xFDD
  4279                           plusw2	equ	0xFDB
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _calibracion *****************
  4285 ;; Defined at:
  4286 ;;		line 178 in file "receptor.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  Input           2    8[COMRAM] PTR unsigned char 
  4289 ;;		 -> menu@stepx(10), 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  stepx           2   17[COMRAM] PTR unsigned char 
  4292 ;;		 -> menu@stepx(10), 
  4293 ;;  i               2   15[COMRAM] int 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  2    8[COMRAM] PTR void 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4303 ;;      Params:         2       0       0       0       0       0       0       0       0
  4304 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4305 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4306 ;;      Totals:        11       0       0       0       0       0       0       0       0
  4307 ;;Total ram usage:       11 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    2
  4310 ;; This function calls:
  4311 ;;		_UART_Data_Ready
  4312 ;;		_UART_Read
  4313 ;;		_UART_Write
  4314 ;;		_lcdclear
  4315 ;;		_lcdsetCursor
  4316 ;;		_lcdtext
  4317 ;;		_leer_teclado
  4318 ;; This function is called by:
  4319 ;;		_menu
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text17
  4324  007124                     __ptext17:
  4325                           	opt stack 0
  4326  007124                     _calibracion:
  4327                           	opt stack 27
  4328                           
  4329                           ;receptor.c: 179: char *stepx = Input;
  4330                           
  4331                           ;incstack = 0
  4332  007124  C009  F012         	movff	calibracion@Input,calibracion@stepx
  4333  007128  C00A  F013         	movff	calibracion@Input+1,calibracion@stepx+1
  4334                           
  4335                           ;receptor.c: 180: int i = 0;
  4336  00712C  0E00               	movlw	0
  4337  00712E  6E11               	movwf	calibracion@i+1,c
  4338  007130  0E00               	movlw	0
  4339  007132  6E10               	movwf	calibracion@i,c
  4340                           
  4341                           ;receptor.c: 181: lcdclear();
  4342  007134  EC11  F033         	call	_lcdclear	;wreg free
  4343                           
  4344                           ;receptor.c: 182: lcdtext("Calibrando...");
  4345  007138  0E50               	movlw	low STR_1
  4346  00713A  6E03               	movwf	lcdtext@t,c
  4347  00713C  0E7C               	movlw	high STR_1
  4348  00713E  6E04               	movwf	lcdtext@t+1,c
  4349  007140  EC72  F034         	call	_lcdtext	;wreg free
  4350                           
  4351                           ;receptor.c: 183: UART_Write('c');
  4352  007144  0E63               	movlw	99
  4353  007146  EC01  F033         	call	_UART_Write
  4354                           
  4355                           ;receptor.c: 184: while (!UART_Data_Ready()) {
  4356  00714A  D009               	goto	l190
  4357  00714C                     
  4358                           ;receptor.c: 185: if (leer_teclado() == 'B') {
  4359  00714C  ECD6  F037         	call	_leer_teclado	;wreg free
  4360  007150  0A42               	xorlw	66
  4361  007152  A4D8               	btfss	status,2,c
  4362  007154  D004               	goto	l190
  4363                           
  4364                           ;receptor.c: 186: UART_Write('s');
  4365  007156  0E73               	movlw	115
  4366  007158  EC01  F033         	call	_UART_Write
  4367                           
  4368                           ;receptor.c: 187: break;
  4369  00715C  D08E               	goto	l192
  4370  00715E                     l190:
  4371  00715E  ECF9  F032         	call	_UART_Data_Ready	;wreg free
  4372  007162  0900               	iorlw	0
  4373  007164  A4D8               	btfss	status,2,c
  4374  007166  D089               	goto	l192
  4375  007168  D7F1               	goto	l189
  4376  00716A                     
  4377                           ;receptor.c: 193: stepx[i] = UART_Read();
  4378                           
  4379                           ;receptor.c: 192: do {
  4380  00716A  5010               	movf	calibracion@i,w,c
  4381  00716C  2412               	addwf	calibracion@stepx,w,c
  4382  00716E  6ED9               	movwf	fsr2l,c
  4383  007170  5011               	movf	calibracion@i+1,w,c
  4384  007172  2013               	addwfc	calibracion@stepx+1,w,c
  4385  007174  6EDA               	movwf	fsr2h,c
  4386  007176  ECFD  F032         	call	_UART_Read	;wreg free
  4387  00717A  6EDF               	movwf	indf2,c
  4388                           
  4389                           ;receptor.c: 194: i += 1;
  4390  00717C  4A10               	infsnz	calibracion@i,f,c
  4391  00717E  2A11               	incf	calibracion@i+1,f,c
  4392                           
  4393                           ;receptor.c: 195: } while (stepx[i - 1] != 'd');
  4394  007180  0EFF               	movlw	255
  4395  007182  6E0B               	movwf	??_calibracion& (0+255),c
  4396  007184  0EFF               	movlw	255
  4397  007186  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4398  007188  C010  F00D         	movff	calibracion@i,??_calibracion+2
  4399  00718C  C011  F00E         	movff	calibracion@i+1,??_calibracion+3
  4400  007190  500B               	movf	??_calibracion,w,c
  4401  007192  260D               	addwf	??_calibracion+2,f,c
  4402  007194  500C               	movf	??_calibracion+1,w,c
  4403  007196  220E               	addwfc	??_calibracion+3,f,c
  4404  007198  500D               	movf	??_calibracion+2,w,c
  4405  00719A  2412               	addwf	calibracion@stepx,w,c
  4406  00719C  6ED9               	movwf	fsr2l,c
  4407  00719E  500E               	movf	??_calibracion+3,w,c
  4408  0071A0  2013               	addwfc	calibracion@stepx+1,w,c
  4409  0071A2  6EDA               	movwf	fsr2h,c
  4410  0071A4  0E64               	movlw	100
  4411  0071A6  18DE               	xorwf	postinc2,w,c
  4412  0071A8  A4D8               	btfss	status,2,c
  4413  0071AA  D7DF               	goto	l193
  4414                           
  4415                           ;receptor.c: 196: stepx[i - 1] = '\0';
  4416  0071AC  0EFF               	movlw	255
  4417  0071AE  6E0B               	movwf	??_calibracion& (0+255),c
  4418  0071B0  0EFF               	movlw	255
  4419  0071B2  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4420  0071B4  C010  F00D         	movff	calibracion@i,??_calibracion+2
  4421  0071B8  C011  F00E         	movff	calibracion@i+1,??_calibracion+3
  4422  0071BC  500B               	movf	??_calibracion,w,c
  4423  0071BE  260D               	addwf	??_calibracion+2,f,c
  4424  0071C0  500C               	movf	??_calibracion+1,w,c
  4425  0071C2  220E               	addwfc	??_calibracion+3,f,c
  4426  0071C4  500D               	movf	??_calibracion+2,w,c
  4427  0071C6  2412               	addwf	calibracion@stepx,w,c
  4428  0071C8  6ED9               	movwf	fsr2l,c
  4429  0071CA  500E               	movf	??_calibracion+3,w,c
  4430  0071CC  2013               	addwfc	calibracion@stepx+1,w,c
  4431  0071CE  6EDA               	movwf	fsr2h,c
  4432  0071D0  0E00               	movlw	0
  4433  0071D2  6EDF               	movwf	indf2,c
  4434                           
  4435                           ;receptor.c: 197: lcdclear();
  4436  0071D4  EC11  F033         	call	_lcdclear	;wreg free
  4437                           
  4438                           ;receptor.c: 198: lcdtext("Calibracion");
  4439  0071D8  0ED0               	movlw	low (STR_35+15)
  4440  0071DA  6E03               	movwf	lcdtext@t,c
  4441  0071DC  0E7B               	movlw	high (STR_35+15)
  4442  0071DE  6E04               	movwf	lcdtext@t+1,c
  4443  0071E0  EC72  F034         	call	_lcdtext	;wreg free
  4444                           
  4445                           ;receptor.c: 199: lcdsetCursor(0x40);
  4446  0071E4  0E40               	movlw	64
  4447  0071E6  EC1D  F033         	call	_lcdsetCursor
  4448                           
  4449                           ;receptor.c: 200: lcdtext("Exitosa");
  4450  0071EA  0EDF               	movlw	low STR_3
  4451  0071EC  6E03               	movwf	lcdtext@t,c
  4452  0071EE  0E7C               	movlw	high STR_3
  4453  0071F0  6E04               	movwf	lcdtext@t+1,c
  4454  0071F2  EC72  F034         	call	_lcdtext	;wreg free
  4455                           
  4456                           ;receptor.c: 201: _delay((unsigned long)((2000)*(8000000/4000.0)));
  4457  0071F6  0E15               	movlw	21
  4458  0071F8  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4459  0071FA  0E4B               	movlw	75
  4460  0071FC  6E0B               	movwf	??_calibracion& (0+255),c
  4461  0071FE  0EBE               	movlw	190
  4462  007200                     u3057:
  4463  007200  2EE8               	decfsz	wreg,f,c
  4464  007202  D7FE               	bra	u3057
  4465  007204  2E0B               	decfsz	??_calibracion& (0+255),f,c
  4466  007206  D7FC               	bra	u3057
  4467  007208  2E0C               	decfsz	(??_calibracion+1)& (0+255),f,c
  4468  00720A  D7FA               	bra	u3057
  4469  00720C  D000               	nop2	
  4470                           
  4471                           ;receptor.c: 202: lcdclear();
  4472  00720E  EC11  F033         	call	_lcdclear	;wreg free
  4473                           
  4474                           ;receptor.c: 203: lcdtext("Distancia:");
  4475  007212  0EAC               	movlw	low STR_4
  4476  007214  6E03               	movwf	lcdtext@t,c
  4477  007216  0E7C               	movlw	high STR_4
  4478  007218  6E04               	movwf	lcdtext@t+1,c
  4479  00721A  EC72  F034         	call	_lcdtext	;wreg free
  4480                           
  4481                           ;receptor.c: 204: lcdsetCursor(0x40);
  4482  00721E  0E40               	movlw	64
  4483  007220  EC1D  F033         	call	_lcdsetCursor
  4484                           
  4485                           ;receptor.c: 205: lcdtext(stepx);
  4486  007224  C012  F003         	movff	calibracion@stepx,lcdtext@t
  4487  007228  C013  F004         	movff	calibracion@stepx+1,lcdtext@t+1
  4488  00722C  EC72  F034         	call	_lcdtext	;wreg free
  4489                           
  4490                           ;receptor.c: 206: lcdtext(" mm");
  4491  007230  0EF5               	movlw	low STR_5
  4492  007232  6E03               	movwf	lcdtext@t,c
  4493  007234  0E7C               	movlw	high STR_5
  4494  007236  6E04               	movwf	lcdtext@t+1,c
  4495  007238  EC72  F034         	call	_lcdtext	;wreg free
  4496                           
  4497                           ;receptor.c: 207: _delay((unsigned long)((2000)*(8000000/4000.0)));
  4498  00723C  0E15               	movlw	21
  4499  00723E  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4500  007240  0E4B               	movlw	75
  4501  007242  6E0B               	movwf	??_calibracion& (0+255),c
  4502  007244  0EBE               	movlw	190
  4503  007246                     u3067:
  4504  007246  2EE8               	decfsz	wreg,f,c
  4505  007248  D7FE               	bra	u3067
  4506  00724A  2E0B               	decfsz	??_calibracion& (0+255),f,c
  4507  00724C  D7FC               	bra	u3067
  4508  00724E  2E0C               	decfsz	(??_calibracion+1)& (0+255),f,c
  4509  007250  D7FA               	bra	u3067
  4510  007252  D000               	nop2	
  4511                           
  4512                           ;receptor.c: 208: break;
  4513  007254  D01D               	goto	l196
  4514  007256                     
  4515                           ;receptor.c: 210: lcdclear();
  4516  007256  EC11  F033         	call	_lcdclear	;wreg free
  4517                           
  4518                           ;receptor.c: 211: lcdtext("Cancelado...");
  4519  00725A  0E86               	movlw	low STR_6
  4520  00725C  6E03               	movwf	lcdtext@t,c
  4521  00725E  0E7C               	movlw	high STR_6
  4522  007260  6E04               	movwf	lcdtext@t+1,c
  4523  007262  EC72  F034         	call	_lcdtext	;wreg free
  4524                           
  4525                           ;receptor.c: 212: break;
  4526  007266  D014               	goto	l196
  4527  007268                     
  4528                           ;receptor.c: 214: lcdclear();
  4529  007268  EC11  F033         	call	_lcdclear	;wreg free
  4530                           
  4531                           ;receptor.c: 215: lcdtext("Error!");
  4532  00726C  0EEE               	movlw	low STR_7
  4533  00726E  6E03               	movwf	lcdtext@t,c
  4534  007270  0E7C               	movlw	high STR_7
  4535  007272  6E04               	movwf	lcdtext@t+1,c
  4536  007274  EC72  F034         	call	_lcdtext	;wreg free
  4537                           
  4538                           ;receptor.c: 217: }
  4539                           
  4540                           ;receptor.c: 216: break;
  4541  007278  D00B               	goto	l196
  4542  00727A                     l192:
  4543  00727A  ECFD  F032         	call	_UART_Read	;wreg free
  4544                           
  4545                           ; Switch size 1, requested type "space"
  4546                           ; Number of cases is 3, Range of values is 0 to 101
  4547                           ; switch strategies available:
  4548                           ; Name         Instructions Cycles
  4549                           ; simple_byte           10     6 (average)
  4550                           ;	Chosen strategy is simple_byte
  4551  00727E  0A00               	xorlw	0	; case 0
  4552  007280  B4D8               	btfsc	status,2,c
  4553  007282  D7F2               	goto	l198
  4554  007284  0A64               	xorlw	100	; case 100
  4555  007286  B4D8               	btfsc	status,2,c
  4556  007288  D770               	goto	l193
  4557  00728A  0A01               	xorlw	1	; case 101
  4558  00728C  B4D8               	btfsc	status,2,c
  4559  00728E  D7E3               	goto	l197
  4560  007290                     l196:
  4561                           
  4562                           ;receptor.c: 218: _delay((unsigned long)((2000)*(8000000/4000.0)));
  4563  007290  0E15               	movlw	21
  4564  007292  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4565  007294  0E4B               	movlw	75
  4566  007296  6E0B               	movwf	??_calibracion& (0+255),c
  4567  007298  0EBE               	movlw	190
  4568  00729A                     u3077:
  4569  00729A  2EE8               	decfsz	wreg,f,c
  4570  00729C  D7FE               	bra	u3077
  4571  00729E  2E0B               	decfsz	??_calibracion& (0+255),f,c
  4572  0072A0  D7FC               	bra	u3077
  4573  0072A2  2E0C               	decfsz	(??_calibracion+1)& (0+255),f,c
  4574  0072A4  D7FA               	bra	u3077
  4575  0072A6  D000               	nop2	
  4576                           
  4577                           ;receptor.c: 219: return *stepx;
  4578  0072A8  C012  FFD9         	movff	calibracion@stepx,fsr2l
  4579  0072AC  C013  FFDA         	movff	calibracion@stepx+1,fsr2h
  4580  0072B0  50DF               	movf	indf2,w,c
  4581  0072B2  6E0B               	movwf	??_calibracion& (0+255),c
  4582  0072B4  6A0C               	clrf	(??_calibracion+1)& (0+255),c
  4583  0072B6  C00B  F009         	movff	??_calibracion,?_calibracion
  4584  0072BA  C00C  F00A         	movff	??_calibracion+1,?_calibracion+1
  4585  0072BE  0012               	return	
  4586  0072C0                     __end_of_calibracion:
  4587                           	opt stack 0
  4588                           tblptru	equ	0xFF8
  4589                           tblptrh	equ	0xFF7
  4590                           tblptrl	equ	0xFF6
  4591                           tablat	equ	0xFF5
  4592                           prodh	equ	0xFF4
  4593                           prodl	equ	0xFF3
  4594                           wreg	equ	0xFE8
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           plusw2	equ	0xFDB
  4599                           fsr2h	equ	0xFDA
  4600                           fsr2l	equ	0xFD9
  4601                           status	equ	0xFD8
  4602                           
  4603 ;; *************** function _leer_teclado *****************
  4604 ;; Defined at:
  4605 ;;		line 23 in file "receptor.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;		None
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;  j               2    1[COMRAM] int 
  4610 ;;  tecla           1    3[COMRAM] unsigned char 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      unsigned char 
  4613 ;; Registers used:
  4614 ;;		wreg, status,2, status,0
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4620 ;;      Params:         0       0       0       0       0       0       0       0       0
  4621 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4622 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4623 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4624 ;;Total ram usage:        4 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; This function calls:
  4627 ;;		Nothing
  4628 ;; This function is called by:
  4629 ;;		_calibracion
  4630 ;;		_trabajo
  4631 ;;		_menu
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text18
  4636  006FAC                     __ptext18:
  4637                           	opt stack 0
  4638  006FAC                     _leer_teclado:
  4639                           	opt stack 28
  4640                           
  4641                           ;receptor.c: 24: unsigned char tecla = 0;
  4642                           
  4643                           ;incstack = 0
  4644  006FAC  0E00               	movlw	0
  4645  006FAE  6E04               	movwf	leer_teclado@tecla,c
  4646                           
  4647                           ;receptor.c: 25: LATB = 0;
  4648  006FB0  0E00               	movlw	0
  4649  006FB2  6E8A               	movwf	3978,c	;volatile
  4650                           
  4651                           ;receptor.c: 26: TRISB = 0b00001111;
  4652  006FB4  0E0F               	movlw	15
  4653  006FB6  6E93               	movwf	3987,c	;volatile
  4654                           
  4655                           ;receptor.c: 27: for (int j = 0; j < 4; j++) {
  4656  006FB8  0E00               	movlw	0
  4657  006FBA  6E03               	movwf	leer_teclado@j+1,c
  4658  006FBC  0E00               	movlw	0
  4659  006FBE  6E02               	movwf	leer_teclado@j,c
  4660  006FC0  BE03               	btfsc	leer_teclado@j+1,7,c
  4661  006FC2  D008               	goto	l90
  4662  006FC4  5003               	movf	leer_teclado@j+1,w,c
  4663  006FC6  E105               	bnz	u1750
  4664  006FC8  0E04               	movlw	4
  4665  006FCA  5C02               	subwf	leer_teclado@j,w,c
  4666  006FCC  B0D8               	btfsc	status,0,c
  4667  006FCE  D0A4               	goto	u2080
  4668  006FD0  D001               	goto	l90
  4669  006FD2                     u1750:
  4670  006FD2  D0A2               	goto	u2080
  4671  006FD4                     l90:
  4672                           
  4673                           ;receptor.c: 28: LATB7 = 1;
  4674  006FD4  8E8A               	bsf	3978,7,c	;volatile
  4675                           
  4676                           ;receptor.c: 29: _delay((unsigned long)((5)*(8000000/4000.0)));
  4677  006FD6  0E0D               	movlw	13
  4678  006FD8  6E01               	movwf	??_leer_teclado& (0+255),c
  4679  006FDA  0EFC               	movlw	252
  4680  006FDC                     u3087:
  4681  006FDC  2EE8               	decfsz	wreg,f,c
  4682  006FDE  D7FE               	bra	u3087
  4683  006FE0  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4684  006FE2  D7FC               	bra	u3087
  4685                           
  4686                           ;receptor.c: 30: if (PORTBbits.RB0) {
  4687  006FE4  A081               	btfss	3969,0,c	;volatile
  4688  006FE6  D005               	goto	l92
  4689                           
  4690                           ;receptor.c: 31: tecla = 'A';
  4691  006FE8  0E41               	movlw	65
  4692  006FEA  6E04               	movwf	leer_teclado@tecla,c
  4693  006FEC  A081               	btfss	3969,0,c	;volatile
  4694  006FEE  D094               	goto	u2080
  4695  006FF0  D7FD               	goto	l94
  4696  006FF2                     l92:
  4697                           
  4698                           ;receptor.c: 34: }
  4699                           ;receptor.c: 35: if (PORTBbits.RB1) {
  4700  006FF2  A281               	btfss	3969,1,c	;volatile
  4701  006FF4  D005               	goto	l96
  4702                           
  4703                           ;receptor.c: 36: tecla = '3';
  4704  006FF6  0E33               	movlw	51
  4705  006FF8  6E04               	movwf	leer_teclado@tecla,c
  4706  006FFA  A281               	btfss	3969,1,c	;volatile
  4707  006FFC  D08D               	goto	u2080
  4708  006FFE  D7FD               	goto	l98
  4709  007000                     l96:
  4710                           
  4711                           ;receptor.c: 39: }
  4712                           ;receptor.c: 40: if (PORTBbits.RB2) {
  4713  007000  A481               	btfss	3969,2,c	;volatile
  4714  007002  D005               	goto	l100
  4715                           
  4716                           ;receptor.c: 41: tecla = '2';
  4717  007004  0E32               	movlw	50
  4718  007006  6E04               	movwf	leer_teclado@tecla,c
  4719  007008  A481               	btfss	3969,2,c	;volatile
  4720  00700A  D086               	goto	u2080
  4721  00700C  D7FD               	goto	l102
  4722  00700E                     l100:
  4723                           
  4724                           ;receptor.c: 44: }
  4725                           ;receptor.c: 45: if (PORTBbits.RB3) {
  4726  00700E  A681               	btfss	3969,3,c	;volatile
  4727  007010  D005               	goto	l104
  4728                           
  4729                           ;receptor.c: 46: tecla = '1';
  4730  007012  0E31               	movlw	49
  4731  007014  6E04               	movwf	leer_teclado@tecla,c
  4732  007016  A681               	btfss	3969,3,c	;volatile
  4733  007018  D07F               	goto	u2080
  4734  00701A  D7FD               	goto	l106
  4735  00701C                     l104:
  4736                           
  4737                           ;receptor.c: 49: }
  4738                           ;receptor.c: 50: LATB7 = 0;
  4739  00701C  9E8A               	bcf	3978,7,c	;volatile
  4740                           
  4741                           ;receptor.c: 51: LATB6 = 1;
  4742  00701E  8C8A               	bsf	3978,6,c	;volatile
  4743                           
  4744                           ;receptor.c: 52: _delay((unsigned long)((5)*(8000000/4000.0)));
  4745  007020  0E0D               	movlw	13
  4746  007022  6E01               	movwf	??_leer_teclado& (0+255),c
  4747  007024  0EFC               	movlw	252
  4748  007026                     u3097:
  4749  007026  2EE8               	decfsz	wreg,f,c
  4750  007028  D7FE               	bra	u3097
  4751  00702A  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4752  00702C  D7FC               	bra	u3097
  4753                           
  4754                           ;receptor.c: 53: if (PORTBbits.RB0) {
  4755  00702E  A081               	btfss	3969,0,c	;volatile
  4756  007030  D005               	goto	l108
  4757                           
  4758                           ;receptor.c: 54: tecla = 'B';
  4759  007032  0E42               	movlw	66
  4760  007034  6E04               	movwf	leer_teclado@tecla,c
  4761  007036  A081               	btfss	3969,0,c	;volatile
  4762  007038  D06F               	goto	u2080
  4763  00703A  D7FD               	goto	l110
  4764  00703C                     l108:
  4765                           
  4766                           ;receptor.c: 57: }
  4767                           ;receptor.c: 58: if (PORTBbits.RB1) {
  4768  00703C  A281               	btfss	3969,1,c	;volatile
  4769  00703E  D005               	goto	l112
  4770                           
  4771                           ;receptor.c: 59: tecla = '6';
  4772  007040  0E36               	movlw	54
  4773  007042  6E04               	movwf	leer_teclado@tecla,c
  4774  007044  A281               	btfss	3969,1,c	;volatile
  4775  007046  D068               	goto	u2080
  4776  007048  D7FD               	goto	l114
  4777  00704A                     l112:
  4778                           
  4779                           ;receptor.c: 62: }
  4780                           ;receptor.c: 63: if (PORTBbits.RB2) {
  4781  00704A  A481               	btfss	3969,2,c	;volatile
  4782  00704C  D005               	goto	l116
  4783                           
  4784                           ;receptor.c: 64: tecla = '5';
  4785  00704E  0E35               	movlw	53
  4786  007050  6E04               	movwf	leer_teclado@tecla,c
  4787  007052  A481               	btfss	3969,2,c	;volatile
  4788  007054  D061               	goto	u2080
  4789  007056  D7FD               	goto	l118
  4790  007058                     l116:
  4791                           
  4792                           ;receptor.c: 67: }
  4793                           ;receptor.c: 68: if (PORTBbits.RB3) {
  4794  007058  A681               	btfss	3969,3,c	;volatile
  4795  00705A  D005               	goto	l120
  4796                           
  4797                           ;receptor.c: 69: tecla = '4';
  4798  00705C  0E34               	movlw	52
  4799  00705E  6E04               	movwf	leer_teclado@tecla,c
  4800  007060  A681               	btfss	3969,3,c	;volatile
  4801  007062  D05A               	goto	u2080
  4802  007064  D7FD               	goto	l122
  4803  007066                     l120:
  4804                           
  4805                           ;receptor.c: 72: }
  4806                           ;receptor.c: 73: LATB6 = 0;
  4807  007066  9C8A               	bcf	3978,6,c	;volatile
  4808                           
  4809                           ;receptor.c: 74: LATB5 = 1;
  4810  007068  8A8A               	bsf	3978,5,c	;volatile
  4811                           
  4812                           ;receptor.c: 75: _delay((unsigned long)((5)*(8000000/4000.0)));
  4813  00706A  0E0D               	movlw	13
  4814  00706C  6E01               	movwf	??_leer_teclado& (0+255),c
  4815  00706E  0EFC               	movlw	252
  4816  007070                     u3107:
  4817  007070  2EE8               	decfsz	wreg,f,c
  4818  007072  D7FE               	bra	u3107
  4819  007074  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4820  007076  D7FC               	bra	u3107
  4821                           
  4822                           ;receptor.c: 76: if (PORTBbits.RB0) {
  4823  007078  A081               	btfss	3969,0,c	;volatile
  4824  00707A  D005               	goto	l124
  4825                           
  4826                           ;receptor.c: 77: tecla = 'C';
  4827  00707C  0E43               	movlw	67
  4828  00707E  6E04               	movwf	leer_teclado@tecla,c
  4829  007080  A081               	btfss	3969,0,c	;volatile
  4830  007082  D04A               	goto	u2080
  4831  007084  D7FD               	goto	l126
  4832  007086                     l124:
  4833                           
  4834                           ;receptor.c: 80: }
  4835                           ;receptor.c: 81: if (PORTBbits.RB1) {
  4836  007086  A281               	btfss	3969,1,c	;volatile
  4837  007088  D005               	goto	l128
  4838                           
  4839                           ;receptor.c: 82: tecla = '9';
  4840  00708A  0E39               	movlw	57
  4841  00708C  6E04               	movwf	leer_teclado@tecla,c
  4842  00708E  A281               	btfss	3969,1,c	;volatile
  4843  007090  D043               	goto	u2080
  4844  007092  D7FD               	goto	l130
  4845  007094                     l128:
  4846                           
  4847                           ;receptor.c: 85: }
  4848                           ;receptor.c: 86: if (PORTBbits.RB2) {
  4849  007094  A481               	btfss	3969,2,c	;volatile
  4850  007096  D005               	goto	l132
  4851                           
  4852                           ;receptor.c: 87: tecla = '8';
  4853  007098  0E38               	movlw	56
  4854  00709A  6E04               	movwf	leer_teclado@tecla,c
  4855  00709C  A481               	btfss	3969,2,c	;volatile
  4856  00709E  D03C               	goto	u2080
  4857  0070A0  D7FD               	goto	l134
  4858  0070A2                     l132:
  4859                           
  4860                           ;receptor.c: 90: }
  4861                           ;receptor.c: 91: if (PORTBbits.RB3) {
  4862  0070A2  A681               	btfss	3969,3,c	;volatile
  4863  0070A4  D005               	goto	l136
  4864                           
  4865                           ;receptor.c: 92: tecla = '7';
  4866  0070A6  0E37               	movlw	55
  4867  0070A8  6E04               	movwf	leer_teclado@tecla,c
  4868  0070AA  A681               	btfss	3969,3,c	;volatile
  4869  0070AC  D035               	goto	u2080
  4870  0070AE  D7FD               	goto	l138
  4871  0070B0                     l136:
  4872                           
  4873                           ;receptor.c: 95: }
  4874                           ;receptor.c: 96: LATB5 = 0;
  4875  0070B0  9A8A               	bcf	3978,5,c	;volatile
  4876                           
  4877                           ;receptor.c: 97: LATB4 = 1;
  4878  0070B2  888A               	bsf	3978,4,c	;volatile
  4879                           
  4880                           ;receptor.c: 98: _delay((unsigned long)((5)*(8000000/4000.0)));
  4881  0070B4  0E0D               	movlw	13
  4882  0070B6  6E01               	movwf	??_leer_teclado& (0+255),c
  4883  0070B8  0EFC               	movlw	252
  4884  0070BA                     u3117:
  4885  0070BA  2EE8               	decfsz	wreg,f,c
  4886  0070BC  D7FE               	bra	u3117
  4887  0070BE  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4888  0070C0  D7FC               	bra	u3117
  4889                           
  4890                           ;receptor.c: 99: if (PORTBbits.RB0) {
  4891  0070C2  A081               	btfss	3969,0,c	;volatile
  4892  0070C4  D005               	goto	l140
  4893                           
  4894                           ;receptor.c: 100: tecla = 'D';
  4895  0070C6  0E44               	movlw	68
  4896  0070C8  6E04               	movwf	leer_teclado@tecla,c
  4897  0070CA  A081               	btfss	3969,0,c	;volatile
  4898  0070CC  D025               	goto	u2080
  4899  0070CE  D7FD               	goto	l142
  4900  0070D0                     l140:
  4901                           
  4902                           ;receptor.c: 103: }
  4903                           ;receptor.c: 104: if (PORTBbits.RB1) {
  4904  0070D0  A281               	btfss	3969,1,c	;volatile
  4905  0070D2  D005               	goto	l144
  4906                           
  4907                           ;receptor.c: 105: tecla = '#';
  4908  0070D4  0E23               	movlw	35
  4909  0070D6  6E04               	movwf	leer_teclado@tecla,c
  4910  0070D8  A281               	btfss	3969,1,c	;volatile
  4911  0070DA  D01E               	goto	u2080
  4912  0070DC  D7FD               	goto	l146
  4913  0070DE                     l144:
  4914                           
  4915                           ;receptor.c: 108: }
  4916                           ;receptor.c: 109: if (PORTBbits.RB2) {
  4917  0070DE  A481               	btfss	3969,2,c	;volatile
  4918  0070E0  D005               	goto	l148
  4919                           
  4920                           ;receptor.c: 110: tecla = '0';
  4921  0070E2  0E30               	movlw	48
  4922  0070E4  6E04               	movwf	leer_teclado@tecla,c
  4923  0070E6  A481               	btfss	3969,2,c	;volatile
  4924  0070E8  D017               	goto	u2080
  4925  0070EA  D7FD               	goto	l150
  4926  0070EC                     l148:
  4927                           
  4928                           ;receptor.c: 113: }
  4929                           ;receptor.c: 114: if (PORTBbits.RB3) {
  4930  0070EC  A681               	btfss	3969,3,c	;volatile
  4931  0070EE  D005               	goto	l152
  4932                           
  4933                           ;receptor.c: 115: tecla = '*';
  4934  0070F0  0E2A               	movlw	42
  4935  0070F2  6E04               	movwf	leer_teclado@tecla,c
  4936  0070F4  A681               	btfss	3969,3,c	;volatile
  4937  0070F6  D010               	goto	u2080
  4938  0070F8  D7FD               	goto	l154
  4939  0070FA                     l152:
  4940                           
  4941                           ;receptor.c: 118: }
  4942                           ;receptor.c: 119: LATB4 = 0;
  4943  0070FA  988A               	bcf	3978,4,c	;volatile
  4944                           
  4945                           ;receptor.c: 120: _delay((unsigned long)((5)*(8000000/4000.0)));
  4946  0070FC  0E0D               	movlw	13
  4947  0070FE  6E01               	movwf	??_leer_teclado& (0+255),c
  4948  007100  0EFC               	movlw	252
  4949  007102                     u3127:
  4950  007102  2EE8               	decfsz	wreg,f,c
  4951  007104  D7FE               	bra	u3127
  4952  007106  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4953  007108  D7FC               	bra	u3127
  4954  00710A  4A02               	infsnz	leer_teclado@j,f,c
  4955  00710C  2A03               	incf	leer_teclado@j+1,f,c
  4956  00710E  BE03               	btfsc	leer_teclado@j+1,7,c
  4957  007110  D761               	goto	l90
  4958  007112  5003               	movf	leer_teclado@j+1,w,c
  4959  007114  E101               	bnz	l2170
  4960  007116  D758               	goto	L2
  4961  007118                     u2080:
  4962  007118                     l2170:
  4963                           
  4964                           ;receptor.c: 121: }
  4965                           ;receptor.c: 122: LATB = 0;
  4966  007118  0E00               	movlw	0
  4967  00711A  6E8A               	movwf	3978,c	;volatile
  4968                           
  4969                           ;receptor.c: 123: TRISB = 0;
  4970  00711C  0E00               	movlw	0
  4971  00711E  6E93               	movwf	3987,c	;volatile
  4972                           
  4973                           ;receptor.c: 124: return tecla;
  4974  007120  5004               	movf	leer_teclado@tecla,w,c
  4975  007122  0012               	return	
  4976  007124                     __end_of_leer_teclado:
  4977                           	opt stack 0
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           wreg	equ	0xFE8
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           plusw2	equ	0xFDB
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _lcdtext *****************
  4994 ;; Defined at:
  4995 ;;		line 156 in file "receptor.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;  t               2    2[COMRAM] PTR unsigned char 
  4998 ;;		 -> STR_39(14), menu@stepx(10), STR_38(13), STR_37(9), 
  4999 ;;		 -> STR_36(18), STR_35(27), STR_34(13), STR_33(13), 
  5000 ;;		 -> STR_32(14), STR_31(13), STR_30(16), STR_29(16), 
  5001 ;;		 -> STR_28(21), STR_26(2), STR_24(7), STR_23(10), 
  5002 ;;		 -> STR_22(10), STR_21(12), STR_20(2), STR_18(7), 
  5003 ;;		 -> STR_17(16), STR_16(12), STR_15(2), trabajo@mx(20), 
  5004 ;;		 -> STR_13(7), trabajo@cutx(20), STR_11(10), STR_10(10), 
  5005 ;;		 -> STR_9(11), STR_8(15), STR_7(7), STR_6(13), 
  5006 ;;		 -> STR_5(4), STR_4(11), STR_3(8), STR_2(12), 
  5007 ;;		 -> STR_1(14), 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  i               2    6[COMRAM] int 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  1    wreg      void 
  5012 ;; Registers used:
  5013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5019 ;;      Params:         2       0       0       0       0       0       0       0       0
  5020 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5021 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5022 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5023 ;;Total ram usage:        6 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    1
  5026 ;; This function calls:
  5027 ;;		_lcdwrite
  5028 ;; This function is called by:
  5029 ;;		_calibracion
  5030 ;;		_trabajo
  5031 ;;		_menu
  5032 ;;		_main
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text19
  5037  0068E4                     __ptext19:
  5038                           	opt stack 0
  5039  0068E4                     _lcdtext:
  5040                           	opt stack 27
  5041                           
  5042                           ;receptor.c: 157: for (int i = 0; t[i] != '\0'; i++) {
  5043                           
  5044                           ;incstack = 0
  5045  0068E4  0E00               	movlw	0
  5046  0068E6  6E08               	movwf	lcdtext@i+1,c
  5047  0068E8  0E00               	movlw	0
  5048  0068EA  6E07               	movwf	lcdtext@i,c
  5049  0068EC  D01A               	goto	l171
  5050  0068EE                     
  5051                           ;receptor.c: 158: lcdwrite(t[i]);
  5052  0068EE  5007               	movf	lcdtext@i,w,c
  5053  0068F0  2403               	addwf	lcdtext@t,w,c
  5054  0068F2  6E05               	movwf	??_lcdtext& (0+255),c
  5055  0068F4  5008               	movf	lcdtext@i+1,w,c
  5056  0068F6  2004               	addwfc	lcdtext@t+1,w,c
  5057  0068F8  6E06               	movwf	(??_lcdtext+1)& (0+255),c
  5058  0068FA  C005  FFF6         	movff	??_lcdtext,tblptrl
  5059  0068FE  C006  FFF7         	movff	??_lcdtext+1,tblptrh
  5060  006902  6AF8               	clrf	tblptru,c
  5061  006904  0E07               	movlw	(high __ramtop+-1)
  5062  006906  64F7               	cpfsgt	tblptrh,c
  5063  006908  D003               	bra	u2097
  5064  00690A  0008               	tblrd		*
  5065  00690C  50F5               	movf	tablat,w,c
  5066  00690E  D005               	bra	u2090
  5067  006910                     u2097:
  5068  006910  CFF6 FFD9          	movff	tblptrl,fsr2l
  5069  006914  CFF7 FFDA          	movff	tblptrh,fsr2h
  5070  006918  50DF               	movf	indf2,w,c
  5071  00691A                     u2090:
  5072  00691A  EC3A  F033         	call	_lcdwrite
  5073  00691E  4A07               	infsnz	lcdtext@i,f,c
  5074  006920  2A08               	incf	lcdtext@i+1,f,c
  5075  006922                     l171:
  5076  006922  5007               	movf	lcdtext@i,w,c
  5077  006924  2403               	addwf	lcdtext@t,w,c
  5078  006926  6E05               	movwf	??_lcdtext& (0+255),c
  5079  006928  5008               	movf	lcdtext@i+1,w,c
  5080  00692A  2004               	addwfc	lcdtext@t+1,w,c
  5081  00692C  6E06               	movwf	(??_lcdtext+1)& (0+255),c
  5082  00692E  C005  FFF6         	movff	??_lcdtext,tblptrl
  5083  006932  C006  FFF7         	movff	??_lcdtext+1,tblptrh
  5084  006936  6AF8               	clrf	tblptru,c
  5085  006938  0E07               	movlw	(high __ramtop+-1)
  5086  00693A  64F7               	cpfsgt	tblptrh,c
  5087  00693C  D003               	bra	u2107
  5088  00693E  0008               	tblrd		*
  5089  006940  50F5               	movf	tablat,w,c
  5090  006942  D005               	bra	u2100
  5091  006944                     u2107:
  5092  006944  CFF6 FFD9          	movff	tblptrl,fsr2l
  5093  006948  CFF7 FFDA          	movff	tblptrh,fsr2h
  5094  00694C  50DF               	movf	indf2,w,c
  5095  00694E                     u2100:
  5096  00694E  0900               	iorlw	0
  5097  006950  B4D8               	btfsc	status,2,c
  5098  006952  0012               	return	
  5099  006954  D7CC               	goto	l172
  5100  006956                     __end_of_lcdtext:
  5101                           	opt stack 0
  5102                           tblptru	equ	0xFF8
  5103                           tblptrh	equ	0xFF7
  5104                           tblptrl	equ	0xFF6
  5105                           tablat	equ	0xFF5
  5106                           prodh	equ	0xFF4
  5107                           prodl	equ	0xFF3
  5108                           wreg	equ	0xFE8
  5109                           indf2	equ	0xFDF
  5110                           postinc2	equ	0xFDE
  5111                           postdec2	equ	0xFDD
  5112                           plusw2	equ	0xFDB
  5113                           fsr2h	equ	0xFDA
  5114                           fsr2l	equ	0xFD9
  5115                           status	equ	0xFD8
  5116                           
  5117 ;; *************** function _lcdwrite *****************
  5118 ;; Defined at:
  5119 ;;		line 148 in file "receptor.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  dataout         1    wreg     unsigned char 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  dataout         1    1[COMRAM] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      void 
  5126 ;; Registers used:
  5127 ;;		wreg, status,2, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5133 ;;      Params:         0       0       0       0       0       0       0       0       0
  5134 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5135 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5136 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5137 ;;Total ram usage:        2 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; This function calls:
  5140 ;;		Nothing
  5141 ;; This function is called by:
  5142 ;;		_lcdtext
  5143 ;;		_trabajo
  5144 ;;		_menu
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           	psect	text20
  5149  006674                     __ptext20:
  5150                           	opt stack 0
  5151  006674                     _lcdwrite:
  5152                           	opt stack 28
  5153                           
  5154                           ;incstack = 0
  5155                           ;lcdwrite@dataout stored from wreg
  5156  006674  6E02               	movwf	lcdwrite@dataout,c
  5157                           
  5158                           ;receptor.c: 149: LATB = dataout;
  5159  006676  C002  FF8A         	movff	lcdwrite@dataout,3978	;volatile
  5160                           
  5161                           ;receptor.c: 150: LATDbits.LATD1 = 1;
  5162  00667A  828C               	bsf	3980,1,c	;volatile
  5163                           
  5164                           ;receptor.c: 151: LATDbits.LATD0 = 1;
  5165  00667C  808C               	bsf	3980,0,c	;volatile
  5166                           
  5167                           ;receptor.c: 152: _delay((unsigned long)((10)*(8000000/4000.0)));
  5168  00667E  0E1A               	movlw	26
  5169  006680  6E01               	movwf	??_lcdwrite& (0+255),c
  5170  006682  0EF8               	movlw	248
  5171  006684                     u3137:
  5172  006684  2EE8               	decfsz	wreg,f,c
  5173  006686  D7FE               	bra	u3137
  5174  006688  2E01               	decfsz	??_lcdwrite& (0+255),f,c
  5175  00668A  D7FC               	bra	u3137
  5176  00668C  D000               	nop2	
  5177                           
  5178                           ;receptor.c: 153: LATDbits.LATD0 = 0;
  5179  00668E  908C               	bcf	3980,0,c	;volatile
  5180  006690  0012               	return		;funcret
  5181  006692                     __end_of_lcdwrite:
  5182                           	opt stack 0
  5183                           tblptru	equ	0xFF8
  5184                           tblptrh	equ	0xFF7
  5185                           tblptrl	equ	0xFF6
  5186                           tablat	equ	0xFF5
  5187                           prodh	equ	0xFF4
  5188                           prodl	equ	0xFF3
  5189                           wreg	equ	0xFE8
  5190                           indf2	equ	0xFDF
  5191                           postinc2	equ	0xFDE
  5192                           postdec2	equ	0xFDD
  5193                           plusw2	equ	0xFDB
  5194                           fsr2h	equ	0xFDA
  5195                           fsr2l	equ	0xFD9
  5196                           status	equ	0xFD8
  5197                           
  5198 ;; *************** function _lcdsetCursor *****************
  5199 ;; Defined at:
  5200 ;;		line 162 in file "receptor.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;  value           1    wreg     unsigned char 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  value           1    3[COMRAM] unsigned char 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, status,2, status,0, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5214 ;;      Params:         0       0       0       0       0       0       0       0       0
  5215 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5216 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5217 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5218 ;;Total ram usage:        2 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    1
  5221 ;; This function calls:
  5222 ;;		_lcdcmd
  5223 ;; This function is called by:
  5224 ;;		_calibracion
  5225 ;;		_trabajo
  5226 ;;		_menu
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text21
  5231  00663A                     __ptext21:
  5232                           	opt stack 0
  5233  00663A                     _lcdsetCursor:
  5234                           	opt stack 27
  5235                           
  5236                           ;incstack = 0
  5237                           ;lcdsetCursor@value stored from wreg
  5238  00663A  6E04               	movwf	lcdsetCursor@value,c
  5239                           
  5240                           ;receptor.c: 163: lcdcmd(0b10000000 | value);
  5241  00663C  5004               	movf	lcdsetCursor@value,w,c
  5242  00663E  0980               	iorlw	128
  5243  006640  EC2B  F033         	call	_lcdcmd
  5244                           
  5245                           ;receptor.c: 164: _delay((unsigned long)((2)*(8000000/4000.0)));
  5246  006644  0E06               	movlw	6
  5247  006646  6E03               	movwf	??_lcdsetCursor& (0+255),c
  5248  006648  0E30               	movlw	48
  5249  00664A                     u3147:
  5250  00664A  2EE8               	decfsz	wreg,f,c
  5251  00664C  D7FE               	bra	u3147
  5252  00664E  2E03               	decfsz	??_lcdsetCursor& (0+255),f,c
  5253  006650  D7FC               	bra	u3147
  5254  006652  D000               	nop2	
  5255  006654  0012               	return		;funcret
  5256  006656                     __end_of_lcdsetCursor:
  5257                           	opt stack 0
  5258                           tblptru	equ	0xFF8
  5259                           tblptrh	equ	0xFF7
  5260                           tblptrl	equ	0xFF6
  5261                           tablat	equ	0xFF5
  5262                           prodh	equ	0xFF4
  5263                           prodl	equ	0xFF3
  5264                           wreg	equ	0xFE8
  5265                           indf2	equ	0xFDF
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           plusw2	equ	0xFDB
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function _lcdclear *****************
  5274 ;; Defined at:
  5275 ;;		line 143 in file "receptor.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, status,2, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5291 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5292 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5293 ;;Total ram usage:        1 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    1
  5296 ;; This function calls:
  5297 ;;		_lcdcmd
  5298 ;; This function is called by:
  5299 ;;		_calibracion
  5300 ;;		_trabajo
  5301 ;;		_menu
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text22
  5306  006622                     __ptext22:
  5307                           	opt stack 0
  5308  006622                     _lcdclear:
  5309                           	opt stack 27
  5310                           
  5311                           ;receptor.c: 144: lcdcmd(0b00000001);
  5312                           
  5313                           ;incstack = 0
  5314  006622  0E01               	movlw	1
  5315  006624  EC2B  F033         	call	_lcdcmd
  5316                           
  5317                           ;receptor.c: 145: _delay((unsigned long)((2)*(8000000/4000.0)));
  5318  006628  0E06               	movlw	6
  5319  00662A  6E03               	movwf	??_lcdclear& (0+255),c
  5320  00662C  0E30               	movlw	48
  5321  00662E                     u3157:
  5322  00662E  2EE8               	decfsz	wreg,f,c
  5323  006630  D7FE               	bra	u3157
  5324  006632  2E03               	decfsz	??_lcdclear& (0+255),f,c
  5325  006634  D7FC               	bra	u3157
  5326  006636  D000               	nop2	
  5327  006638  0012               	return		;funcret
  5328  00663A                     __end_of_lcdclear:
  5329                           	opt stack 0
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           prodh	equ	0xFF4
  5335                           prodl	equ	0xFF3
  5336                           wreg	equ	0xFE8
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           plusw2	equ	0xFDB
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8
  5344                           
  5345 ;; *************** function _UART_Write *****************
  5346 ;; Defined at:
  5347 ;;		line 22 in file "UART.h"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;  data            1    wreg     unsigned char 
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  data            1    0[COMRAM] unsigned char 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  1    wreg      void 
  5354 ;; Registers used:
  5355 ;;		wreg
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5361 ;;      Params:         0       0       0       0       0       0       0       0       0
  5362 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5364 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5365 ;;Total ram usage:        1 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; This function calls:
  5368 ;;		Nothing
  5369 ;; This function is called by:
  5370 ;;		_calibracion
  5371 ;;		_trabajo
  5372 ;;		_UART_Write_Text
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text23
  5377  006602                     __ptext23:
  5378                           	opt stack 0
  5379  006602                     _UART_Write:
  5380                           	opt stack 28
  5381                           
  5382                           ;incstack = 0
  5383                           ;UART_Write@data stored from wreg
  5384  006602  6E01               	movwf	UART_Write@data,c
  5385  006604                     
  5386                           ;UART.h: 23: while (!TRMT);
  5387  006604  A2AC               	btfss	4012,1,c	;volatile
  5388  006606  D7FE               	goto	l2098
  5389                           
  5390                           ;UART.h: 24: TXREG = data;
  5391  006608  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  5392  00660C  0012               	return		;funcret
  5393  00660E                     __end_of_UART_Write:
  5394                           	opt stack 0
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           wreg	equ	0xFE8
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           plusw2	equ	0xFDB
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function _UART_Read *****************
  5411 ;; Defined at:
  5412 ;;		line 40 in file "UART.h"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      unsigned char 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5426 ;;      Params:         0       0       0       0       0       0       0       0       0
  5427 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5429 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; This function calls:
  5433 ;;		Nothing
  5434 ;; This function is called by:
  5435 ;;		_calibracion
  5436 ;;		_trabajo
  5437 ;;		_UART_Read_Text
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text24
  5442  0065FA                     __ptext24:
  5443                           	opt stack 0
  5444  0065FA                     _UART_Read:
  5445                           	opt stack 28
  5446                           
  5447                           ;UART.h: 41: while (!RCIF);
  5448                           
  5449                           ;incstack = 0
  5450  0065FA  AA9E               	btfss	3998,5,c	;volatile
  5451  0065FC  D7FE               	goto	_UART_Read
  5452                           
  5453                           ;UART.h: 42: return RCREG;
  5454  0065FE  50AE               	movf	4014,w,c	;volatile
  5455  006600  0012               	return	
  5456  006602                     __end_of_UART_Read:
  5457                           	opt stack 0
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           wreg	equ	0xFE8
  5465                           indf2	equ	0xFDF
  5466                           postinc2	equ	0xFDE
  5467                           postdec2	equ	0xFDD
  5468                           plusw2	equ	0xFDB
  5469                           fsr2h	equ	0xFDA
  5470                           fsr2l	equ	0xFD9
  5471                           status	equ	0xFD8
  5472                           
  5473 ;; *************** function _UART_Data_Ready *****************
  5474 ;; Defined at:
  5475 ;;		line 36 in file "UART.h"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  1    wreg      unsigned char 
  5482 ;; Registers used:
  5483 ;;		wreg
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5489 ;;      Params:         0       0       0       0       0       0       0       0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5492 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5493 ;;Total ram usage:        0 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; This function calls:
  5496 ;;		Nothing
  5497 ;; This function is called by:
  5498 ;;		_calibracion
  5499 ;;		_trabajo
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text25
  5504  0065F2                     __ptext25:
  5505                           	opt stack 0
  5506  0065F2                     _UART_Data_Ready:
  5507                           	opt stack 28
  5508                           
  5509                           ;UART.h: 37: return RCIF;
  5510                           
  5511                           ;incstack = 0
  5512  0065F2  0E00               	movlw	0
  5513  0065F4  BA9E               	btfsc	3998,5,c	;volatile
  5514  0065F6  0E01               	movlw	1
  5515  0065F8  0012               	return	
  5516  0065FA                     __end_of_UART_Data_Ready:
  5517                           	opt stack 0
  5518                           tblptru	equ	0xFF8
  5519                           tblptrh	equ	0xFF7
  5520                           tblptrl	equ	0xFF6
  5521                           tablat	equ	0xFF5
  5522                           prodh	equ	0xFF4
  5523                           prodl	equ	0xFF3
  5524                           wreg	equ	0xFE8
  5525                           indf2	equ	0xFDF
  5526                           postinc2	equ	0xFDE
  5527                           postdec2	equ	0xFDD
  5528                           plusw2	equ	0xFDB
  5529                           fsr2h	equ	0xFDA
  5530                           fsr2l	equ	0xFD9
  5531                           status	equ	0xFD8
  5532                           
  5533 ;; *************** function _lcdinitialize *****************
  5534 ;; Defined at:
  5535 ;;		line 135 in file "receptor.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;		None
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;		None
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      void 
  5542 ;; Registers used:
  5543 ;;		wreg, status,2, cstack
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5549 ;;      Params:         0       0       0       0       0       0       0       0       0
  5550 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5551 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5552 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5553 ;;Total ram usage:        1 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:    1
  5556 ;; This function calls:
  5557 ;;		_lcdcmd
  5558 ;; This function is called by:
  5559 ;;		_main
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           	psect	text26
  5564  0066DC                     __ptext26:
  5565                           	opt stack 0
  5566  0066DC                     _lcdinitialize:
  5567                           	opt stack 29
  5568                           
  5569                           ;receptor.c: 136: _delay((unsigned long)((50)*(8000000/4000.0)));
  5570                           
  5571                           ;incstack = 0
  5572  0066DC  0E82               	movlw	130
  5573  0066DE  6E03               	movwf	??_lcdinitialize& (0+255),c
  5574  0066E0  0EDE               	movlw	222
  5575  0066E2                     u3167:
  5576  0066E2  2EE8               	decfsz	wreg,f,c
  5577  0066E4  D7FE               	bra	u3167
  5578  0066E6  2E03               	decfsz	??_lcdinitialize& (0+255),f,c
  5579  0066E8  D7FC               	bra	u3167
  5580                           
  5581                           ;receptor.c: 137: lcdcmd(0b00111000);
  5582  0066EA  0E38               	movlw	56
  5583  0066EC  EC2B  F033         	call	_lcdcmd
  5584                           
  5585                           ;receptor.c: 138: lcdcmd(0b00001111);
  5586  0066F0  0E0F               	movlw	15
  5587  0066F2  EC2B  F033         	call	_lcdcmd
  5588                           
  5589                           ;receptor.c: 139: lcdcmd(0b00000010);
  5590  0066F6  0E02               	movlw	2
  5591  0066F8  EC2B  F033         	call	_lcdcmd
  5592                           
  5593                           ;receptor.c: 140: lcdcmd(0b00000001);
  5594  0066FC  0E01               	movlw	1
  5595  0066FE  EC2B  F033         	call	_lcdcmd
  5596  006702  0012               	return		;funcret
  5597  006704                     __end_of_lcdinitialize:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           wreg	equ	0xFE8
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           plusw2	equ	0xFDB
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function _lcdcmd *****************
  5615 ;; Defined at:
  5616 ;;		line 127 in file "receptor.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  cmdout          1    wreg     unsigned char 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  cmdout          1    1[COMRAM] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5630 ;;      Params:         0       0       0       0       0       0       0       0       0
  5631 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5632 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5633 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5634 ;;Total ram usage:        2 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_lcdinitialize
  5640 ;;		_lcdclear
  5641 ;;		_lcdsetCursor
  5642 ;;		_lcdshiftCursor
  5643 ;;		_lcdReturn
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text27
  5648  006656                     __ptext27:
  5649                           	opt stack 0
  5650  006656                     _lcdcmd:
  5651                           	opt stack 27
  5652                           
  5653                           ;incstack = 0
  5654                           ;lcdcmd@cmdout stored from wreg
  5655  006656  6E02               	movwf	lcdcmd@cmdout,c
  5656                           
  5657                           ;receptor.c: 128: LATB = cmdout;
  5658  006658  C002  FF8A         	movff	lcdcmd@cmdout,3978	;volatile
  5659                           
  5660                           ;receptor.c: 129: LATDbits.LATD1 = 0;
  5661  00665C  928C               	bcf	3980,1,c	;volatile
  5662                           
  5663                           ;receptor.c: 130: LATDbits.LATD0 = 1;
  5664  00665E  808C               	bsf	3980,0,c	;volatile
  5665                           
  5666                           ;receptor.c: 131: _delay((unsigned long)((10)*(8000000/4000.0)));
  5667  006660  0E1A               	movlw	26
  5668  006662  6E01               	movwf	??_lcdcmd& (0+255),c
  5669  006664  0EF8               	movlw	248
  5670  006666                     u3177:
  5671  006666  2EE8               	decfsz	wreg,f,c
  5672  006668  D7FE               	bra	u3177
  5673  00666A  2E01               	decfsz	??_lcdcmd& (0+255),f,c
  5674  00666C  D7FC               	bra	u3177
  5675  00666E  D000               	nop2	
  5676                           
  5677                           ;receptor.c: 132: LATDbits.LATD0 = 0;
  5678  006670  908C               	bcf	3980,0,c	;volatile
  5679  006672  0012               	return		;funcret
  5680  006674                     __end_of_lcdcmd:
  5681                           	opt stack 0
  5682                           tblptru	equ	0xFF8
  5683                           tblptrh	equ	0xFF7
  5684                           tblptrl	equ	0xFF6
  5685                           tablat	equ	0xFF5
  5686                           prodh	equ	0xFF4
  5687                           prodl	equ	0xFF3
  5688                           wreg	equ	0xFE8
  5689                           indf2	equ	0xFDF
  5690                           postinc2	equ	0xFDE
  5691                           postdec2	equ	0xFDD
  5692                           plusw2	equ	0xFDB
  5693                           fsr2h	equ	0xFDA
  5694                           fsr2l	equ	0xFD9
  5695                           status	equ	0xFD8
  5696                           
  5697 ;; *************** function _UART_Init *****************
  5698 ;; Defined at:
  5699 ;;		line 1 in file "UART.h"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;  baudrate        4   14[COMRAM] const long 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  x               2   26[COMRAM] unsigned int 
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      unsigned char 
  5706 ;; Registers used:
  5707 ;;		wreg, status,2, status,0, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5713 ;;      Params:         4       0       0       0       0       0       0       0       0
  5714 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5715 ;;      Temps:          8       0       0       0       0       0       0       0       0
  5716 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5717 ;;Total ram usage:       14 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    1
  5720 ;; This function calls:
  5721 ;;		___aldiv
  5722 ;; This function is called by:
  5723 ;;		_main
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text28
  5728  006D38                     __ptext28:
  5729                           	opt stack 0
  5730  006D38                     _UART_Init:
  5731                           	opt stack 29
  5732                           
  5733                           ;UART.h: 2: unsigned int x;
  5734                           ;UART.h: 3: x = (8000000 - baudrate * 64) / (baudrate * 64);
  5735                           
  5736                           ;incstack = 0
  5737  006D38  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  5738  006D3C  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  5739  006D40  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  5740  006D44  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  5741  006D48  0E06               	movlw	6
  5742  006D4A                     u2785:
  5743  006D4A  90D8               	bcf	status,0,c
  5744  006D4C  3613               	rlcf	??_UART_Init,f,c
  5745  006D4E  3614               	rlcf	??_UART_Init+1,f,c
  5746  006D50  3615               	rlcf	??_UART_Init+2,f,c
  5747  006D52  3616               	rlcf	??_UART_Init+3,f,c
  5748  006D54  2EE8               	decfsz	wreg,f,c
  5749  006D56  D7F9               	goto	u2785
  5750  006D58  1E13               	comf	??_UART_Init,f,c
  5751  006D5A  1E14               	comf	??_UART_Init+1,f,c
  5752  006D5C  1E15               	comf	??_UART_Init+2,f,c
  5753  006D5E  1E16               	comf	??_UART_Init+3,f,c
  5754  006D60  2A13               	incf	??_UART_Init,f,c
  5755  006D62  0E00               	movlw	0
  5756  006D64  2214               	addwfc	??_UART_Init+1,f,c
  5757  006D66  2215               	addwfc	??_UART_Init+2,f,c
  5758  006D68  2216               	addwfc	??_UART_Init+3,f,c
  5759  006D6A  0E00               	movlw	0
  5760  006D6C  2413               	addwf	??_UART_Init,w,c
  5761  006D6E  6E01               	movwf	___aldiv@dividend,c
  5762  006D70  0E12               	movlw	18
  5763  006D72  2014               	addwfc	??_UART_Init+1,w,c
  5764  006D74  6E02               	movwf	___aldiv@dividend+1,c
  5765  006D76  0E7A               	movlw	122
  5766  006D78  2015               	addwfc	??_UART_Init+2,w,c
  5767  006D7A  6E03               	movwf	___aldiv@dividend+2,c
  5768  006D7C  0E00               	movlw	0
  5769  006D7E  2016               	addwfc	??_UART_Init+3,w,c
  5770  006D80  6E04               	movwf	___aldiv@dividend+3,c
  5771  006D82  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  5772  006D86  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  5773  006D8A  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  5774  006D8E  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  5775  006D92  0E06               	movlw	6
  5776  006D94                     u2795:
  5777  006D94  90D8               	bcf	status,0,c
  5778  006D96  3617               	rlcf	??_UART_Init+4,f,c
  5779  006D98  3618               	rlcf	??_UART_Init+5,f,c
  5780  006D9A  3619               	rlcf	??_UART_Init+6,f,c
  5781  006D9C  361A               	rlcf	??_UART_Init+7,f,c
  5782  006D9E  2EE8               	decfsz	wreg,f,c
  5783  006DA0  D7F9               	goto	u2795
  5784  006DA2  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  5785  006DA6  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  5786  006DAA  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  5787  006DAE  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  5788  006DB2  ECBC  F035         	call	___aldiv	;wreg free
  5789  006DB6  C001  F01B         	movff	?___aldiv,UART_Init@x
  5790  006DBA  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  5791                           
  5792                           ;UART.h: 4: if (x > 255)
  5793  006DBE  041C               	decf	UART_Init@x+1,w,c
  5794  006DC0  A0D8               	btfss	status,0,c
  5795  006DC2  D044               	goto	l53
  5796                           
  5797                           ;UART.h: 5: {
  5798                           ;UART.h: 6: x = (8000000 - baudrate * 16) / (baudrate * 16);
  5799  006DC4  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  5800  006DC8  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  5801  006DCC  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  5802  006DD0  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  5803  006DD4  0E04               	movlw	4
  5804  006DD6                     u2815:
  5805  006DD6  90D8               	bcf	status,0,c
  5806  006DD8  3613               	rlcf	??_UART_Init,f,c
  5807  006DDA  3614               	rlcf	??_UART_Init+1,f,c
  5808  006DDC  3615               	rlcf	??_UART_Init+2,f,c
  5809  006DDE  3616               	rlcf	??_UART_Init+3,f,c
  5810  006DE0  2EE8               	decfsz	wreg,f,c
  5811  006DE2  D7F9               	goto	u2815
  5812  006DE4  1E13               	comf	??_UART_Init,f,c
  5813  006DE6  1E14               	comf	??_UART_Init+1,f,c
  5814  006DE8  1E15               	comf	??_UART_Init+2,f,c
  5815  006DEA  1E16               	comf	??_UART_Init+3,f,c
  5816  006DEC  2A13               	incf	??_UART_Init,f,c
  5817  006DEE  0E00               	movlw	0
  5818  006DF0  2214               	addwfc	??_UART_Init+1,f,c
  5819  006DF2  2215               	addwfc	??_UART_Init+2,f,c
  5820  006DF4  2216               	addwfc	??_UART_Init+3,f,c
  5821  006DF6  0E00               	movlw	0
  5822  006DF8  2413               	addwf	??_UART_Init,w,c
  5823  006DFA  6E01               	movwf	___aldiv@dividend,c
  5824  006DFC  0E12               	movlw	18
  5825  006DFE  2014               	addwfc	??_UART_Init+1,w,c
  5826  006E00  6E02               	movwf	___aldiv@dividend+1,c
  5827  006E02  0E7A               	movlw	122
  5828  006E04  2015               	addwfc	??_UART_Init+2,w,c
  5829  006E06  6E03               	movwf	___aldiv@dividend+2,c
  5830  006E08  0E00               	movlw	0
  5831  006E0A  2016               	addwfc	??_UART_Init+3,w,c
  5832  006E0C  6E04               	movwf	___aldiv@dividend+3,c
  5833  006E0E  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  5834  006E12  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  5835  006E16  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  5836  006E1A  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  5837  006E1E  0E04               	movlw	4
  5838  006E20                     u2825:
  5839  006E20  90D8               	bcf	status,0,c
  5840  006E22  3617               	rlcf	??_UART_Init+4,f,c
  5841  006E24  3618               	rlcf	??_UART_Init+5,f,c
  5842  006E26  3619               	rlcf	??_UART_Init+6,f,c
  5843  006E28  361A               	rlcf	??_UART_Init+7,f,c
  5844  006E2A  2EE8               	decfsz	wreg,f,c
  5845  006E2C  D7F9               	goto	u2825
  5846  006E2E  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  5847  006E32  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  5848  006E36  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  5849  006E3A  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  5850  006E3E  ECBC  F035         	call	___aldiv	;wreg free
  5851  006E42  C001  F01B         	movff	?___aldiv,UART_Init@x
  5852  006E46  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  5853                           
  5854                           ;UART.h: 7: BRGH = 1;
  5855  006E4A  84AC               	bsf	4012,2,c	;volatile
  5856  006E4C                     l53:
  5857                           
  5858                           ;UART.h: 8: }
  5859                           ;UART.h: 9: if (x < 256) {
  5860  006E4C  041C               	decf	UART_Init@x+1,w,c
  5861  006E4E  B0D8               	btfsc	status,0,c
  5862  006E50  0012               	return	
  5863                           
  5864                           ;UART.h: 10: SPBRG = x;
  5865  006E52  C01B  FFAF         	movff	UART_Init@x,4015	;volatile
  5866                           
  5867                           ;UART.h: 11: SYNC = 0;
  5868  006E56  98AC               	bcf	4012,4,c	;volatile
  5869                           
  5870                           ;UART.h: 12: SPEN = 1;
  5871  006E58  8EAB               	bsf	4011,7,c	;volatile
  5872                           
  5873                           ;UART.h: 13: TRISC7 = 1;
  5874  006E5A  8E94               	bsf	3988,7,c	;volatile
  5875                           
  5876                           ;UART.h: 14: TRISC6 = 1;
  5877  006E5C  8C94               	bsf	3988,6,c	;volatile
  5878                           
  5879                           ;UART.h: 15: CREN = 1;
  5880  006E5E  88AB               	bsf	4011,4,c	;volatile
  5881                           
  5882                           ;UART.h: 16: TXEN = 1;
  5883  006E60  8AAC               	bsf	4012,5,c	;volatile
  5884                           
  5885                           ;UART.h: 17: return 1;
  5886                           ;	Return value of _UART_Init is never used
  5887  006E62  0012               	return	
  5888  006E64                     __end_of_UART_Init:
  5889                           	opt stack 0
  5890                           tblptru	equ	0xFF8
  5891                           tblptrh	equ	0xFF7
  5892                           tblptrl	equ	0xFF6
  5893                           tablat	equ	0xFF5
  5894                           prodh	equ	0xFF4
  5895                           prodl	equ	0xFF3
  5896                           wreg	equ	0xFE8
  5897                           indf2	equ	0xFDF
  5898                           postinc2	equ	0xFDE
  5899                           postdec2	equ	0xFDD
  5900                           plusw2	equ	0xFDB
  5901                           fsr2h	equ	0xFDA
  5902                           fsr2l	equ	0xFD9
  5903                           status	equ	0xFD8
  5904                           
  5905 ;; *************** function ___aldiv *****************
  5906 ;; Defined at:
  5907 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;  dividend        4    0[COMRAM] long 
  5910 ;;  divisor         4    4[COMRAM] long 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  quotient        4   10[COMRAM] long 
  5913 ;;  sign            1    9[COMRAM] unsigned char 
  5914 ;;  counter         1    8[COMRAM] unsigned char 
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  4    0[COMRAM] long 
  5917 ;; Registers used:
  5918 ;;		wreg, status,2, status,0
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5924 ;;      Params:         8       0       0       0       0       0       0       0       0
  5925 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5926 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5927 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5928 ;;Total ram usage:       14 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; This function calls:
  5931 ;;		Nothing
  5932 ;; This function is called by:
  5933 ;;		_UART_Init
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text29
  5938  006B78                     __ptext29:
  5939                           	opt stack 0
  5940  006B78                     ___aldiv:
  5941                           	opt stack 29
  5942                           
  5943                           ;incstack = 0
  5944  006B78  0E00               	movlw	0
  5945  006B7A  6E0A               	movwf	___aldiv@sign,c
  5946  006B7C  AE08               	btfss	___aldiv@divisor+3,7,c
  5947  006B7E  D00A               	goto	l373
  5948  006B80  1E08               	comf	___aldiv@divisor+3,f,c
  5949  006B82  1E07               	comf	___aldiv@divisor+2,f,c
  5950  006B84  1E06               	comf	___aldiv@divisor+1,f,c
  5951  006B86  6C05               	negf	___aldiv@divisor,c
  5952  006B88  0E00               	movlw	0
  5953  006B8A  2206               	addwfc	___aldiv@divisor+1,f,c
  5954  006B8C  2207               	addwfc	___aldiv@divisor+2,f,c
  5955  006B8E  2208               	addwfc	___aldiv@divisor+3,f,c
  5956  006B90  0E01               	movlw	1
  5957  006B92  6E0A               	movwf	___aldiv@sign,c
  5958  006B94                     l373:
  5959  006B94  AE04               	btfss	___aldiv@dividend+3,7,c
  5960  006B96  D00A               	goto	l374
  5961  006B98  1E04               	comf	___aldiv@dividend+3,f,c
  5962  006B9A  1E03               	comf	___aldiv@dividend+2,f,c
  5963  006B9C  1E02               	comf	___aldiv@dividend+1,f,c
  5964  006B9E  6C01               	negf	___aldiv@dividend,c
  5965  006BA0  0E00               	movlw	0
  5966  006BA2  2202               	addwfc	___aldiv@dividend+1,f,c
  5967  006BA4  2203               	addwfc	___aldiv@dividend+2,f,c
  5968  006BA6  2204               	addwfc	___aldiv@dividend+3,f,c
  5969  006BA8  0E01               	movlw	1
  5970  006BAA  1A0A               	xorwf	___aldiv@sign,f,c
  5971  006BAC                     l374:
  5972  006BAC  0E00               	movlw	0
  5973  006BAE  6E0B               	movwf	___aldiv@quotient,c
  5974  006BB0  0E00               	movlw	0
  5975  006BB2  6E0C               	movwf	___aldiv@quotient+1,c
  5976  006BB4  0E00               	movlw	0
  5977  006BB6  6E0D               	movwf	___aldiv@quotient+2,c
  5978  006BB8  0E00               	movlw	0
  5979  006BBA  6E0E               	movwf	___aldiv@quotient+3,c
  5980  006BBC  5005               	movf	___aldiv@divisor,w,c
  5981  006BBE  1006               	iorwf	___aldiv@divisor+1,w,c
  5982  006BC0  1007               	iorwf	___aldiv@divisor+2,w,c
  5983  006BC2  1008               	iorwf	___aldiv@divisor+3,w,c
  5984  006BC4  B4D8               	btfsc	status,2,c
  5985  006BC6  D02A               	goto	l381
  5986  006BC8  0E01               	movlw	1
  5987  006BCA  6E09               	movwf	___aldiv@counter,c
  5988  006BCC  D006               	goto	l376
  5989  006BCE  90D8               	bcf	status,0,c
  5990  006BD0  3605               	rlcf	___aldiv@divisor,f,c
  5991  006BD2  3606               	rlcf	___aldiv@divisor+1,f,c
  5992  006BD4  3607               	rlcf	___aldiv@divisor+2,f,c
  5993  006BD6  3608               	rlcf	___aldiv@divisor+3,f,c
  5994  006BD8  2A09               	incf	___aldiv@counter,f,c
  5995  006BDA                     l376:
  5996  006BDA  AE08               	btfss	___aldiv@divisor+3,7,c
  5997  006BDC  D7F8               	goto	l377
  5998  006BDE                     u2750:
  5999  006BDE  90D8               	bcf	status,0,c
  6000  006BE0  360B               	rlcf	___aldiv@quotient,f,c
  6001  006BE2  360C               	rlcf	___aldiv@quotient+1,f,c
  6002  006BE4  360D               	rlcf	___aldiv@quotient+2,f,c
  6003  006BE6  360E               	rlcf	___aldiv@quotient+3,f,c
  6004  006BE8  5005               	movf	___aldiv@divisor,w,c
  6005  006BEA  5C01               	subwf	___aldiv@dividend,w,c
  6006  006BEC  5006               	movf	___aldiv@divisor+1,w,c
  6007  006BEE  5802               	subwfb	___aldiv@dividend+1,w,c
  6008  006BF0  5007               	movf	___aldiv@divisor+2,w,c
  6009  006BF2  5803               	subwfb	___aldiv@dividend+2,w,c
  6010  006BF4  5008               	movf	___aldiv@divisor+3,w,c
  6011  006BF6  5804               	subwfb	___aldiv@dividend+3,w,c
  6012  006BF8  A0D8               	btfss	status,0,c
  6013  006BFA  D009               	goto	l380
  6014  006BFC  5005               	movf	___aldiv@divisor,w,c
  6015  006BFE  5E01               	subwf	___aldiv@dividend,f,c
  6016  006C00  5006               	movf	___aldiv@divisor+1,w,c
  6017  006C02  5A02               	subwfb	___aldiv@dividend+1,f,c
  6018  006C04  5007               	movf	___aldiv@divisor+2,w,c
  6019  006C06  5A03               	subwfb	___aldiv@dividend+2,f,c
  6020  006C08  5008               	movf	___aldiv@divisor+3,w,c
  6021  006C0A  5A04               	subwfb	___aldiv@dividend+3,f,c
  6022  006C0C  800B               	bsf	___aldiv@quotient,0,c
  6023  006C0E                     l380:
  6024  006C0E  90D8               	bcf	status,0,c
  6025  006C10  3208               	rrcf	___aldiv@divisor+3,f,c
  6026  006C12  3207               	rrcf	___aldiv@divisor+2,f,c
  6027  006C14  3206               	rrcf	___aldiv@divisor+1,f,c
  6028  006C16  3205               	rrcf	___aldiv@divisor,f,c
  6029  006C18  2E09               	decfsz	___aldiv@counter,f,c
  6030  006C1A  D7E1               	goto	u2750
  6031  006C1C                     l381:
  6032  006C1C  500A               	movf	___aldiv@sign,w,c
  6033  006C1E  B4D8               	btfsc	status,2,c
  6034  006C20  D008               	goto	l382
  6035  006C22  1E0E               	comf	___aldiv@quotient+3,f,c
  6036  006C24  1E0D               	comf	___aldiv@quotient+2,f,c
  6037  006C26  1E0C               	comf	___aldiv@quotient+1,f,c
  6038  006C28  6C0B               	negf	___aldiv@quotient,c
  6039  006C2A  0E00               	movlw	0
  6040  006C2C  220C               	addwfc	___aldiv@quotient+1,f,c
  6041  006C2E  220D               	addwfc	___aldiv@quotient+2,f,c
  6042  006C30  220E               	addwfc	___aldiv@quotient+3,f,c
  6043  006C32                     l382:
  6044  006C32  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  6045  006C36  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  6046  006C3A  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  6047  006C3E  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  6048  006C42  0012               	return	
  6049  006C44                     __end_of___aldiv:
  6050                           	opt stack 0
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           prodh	equ	0xFF4
  6056                           prodl	equ	0xFF3
  6057                           wreg	equ	0xFE8
  6058                           indf2	equ	0xFDF
  6059                           postinc2	equ	0xFDE
  6060                           postdec2	equ	0xFDD
  6061                           plusw2	equ	0xFDB
  6062                           fsr2h	equ	0xFDA
  6063                           fsr2l	equ	0xFD9
  6064                           status	equ	0xFD8
  6065                           tblptru	equ	0xFF8
  6066                           tblptrh	equ	0xFF7
  6067                           tblptrl	equ	0xFF6
  6068                           tablat	equ	0xFF5
  6069                           prodh	equ	0xFF4
  6070                           prodl	equ	0xFF3
  6071                           wreg	equ	0xFE8
  6072                           indf2	equ	0xFDF
  6073                           postinc2	equ	0xFDE
  6074                           postdec2	equ	0xFDD
  6075                           plusw2	equ	0xFDB
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080                           	psect	rparam
  6081  0000                     tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           wreg	equ	0xFE8
  6088                           indf2	equ	0xFDF
  6089                           postinc2	equ	0xFDE
  6090                           postdec2	equ	0xFDD
  6091                           plusw2	equ	0xFDB
  6092                           fsr2h	equ	0xFDA
  6093                           fsr2l	equ	0xFD9
  6094                           status	equ	0xFD8


Data Sizes:
    Strings     317
    Constant    10
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     62      64
    BANK0           160      0       0
    BANK1           256    168     170
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_27(CODE[3]), STR_25(CODE[3]), STR_19(CODE[3]), STR_14(CODE[3]), 
		 -> STR_12(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> trabajo@outx(BANK1[20]), trabajo@mx(BANK1[20]), trabajo@cutx(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    menu@comandos	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_35(CODE[27]), 

    sp__calibracion	PTR void  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    calibracion@Input	PTR unsigned char  size(2) Largest target is 10
		 -> menu@stepx(COMRAM[10]), 

    calibracion@stepx	PTR unsigned char  size(2) Largest target is 10
		 -> menu@stepx(COMRAM[10]), 

    lcdtext@t	PTR unsigned char  size(2) Largest target is 27
		 -> STR_39(CODE[14]), menu@stepx(COMRAM[10]), STR_38(CODE[13]), STR_37(CODE[9]), 
		 -> STR_36(CODE[18]), STR_35(CODE[27]), STR_34(CODE[13]), STR_33(CODE[13]), 
		 -> STR_32(CODE[14]), STR_31(CODE[13]), STR_30(CODE[16]), STR_29(CODE[16]), 
		 -> STR_28(CODE[21]), STR_26(CODE[2]), STR_24(CODE[7]), STR_23(CODE[10]), 
		 -> STR_22(CODE[10]), STR_21(CODE[12]), STR_20(CODE[2]), STR_18(CODE[7]), 
		 -> STR_17(CODE[16]), STR_16(CODE[12]), STR_15(CODE[2]), trabajo@mx(BANK1[20]), 
		 -> STR_13(CODE[7]), trabajo@cutx(BANK1[20]), STR_11(CODE[10]), STR_10(CODE[10]), 
		 -> STR_9(CODE[11]), STR_8(CODE[15]), STR_7(CODE[7]), STR_6(CODE[13]), 
		 -> STR_5(CODE[4]), STR_4(CODE[11]), STR_3(CODE[8]), STR_2(CODE[12]), 
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_menu
    _menu->_trabajo
    _trabajo->_trunc
    _trunc->___altoft
    ___altoft->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdshiftCursor->_lcdcmd
    ___lbtoft->___ftpack
    ___awtoft->___ftpack
    _calibracion->_lcdtext
    _lcdtext->_lcdwrite
    _lcdsetCursor->_lcdcmd
    _lcdclear->_lcdcmd
    _lcdinitialize->_lcdcmd
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    _menu->_trabajo

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   28952
                                             60 COMRAM     2     2      0
                          _UART_Init
                      _lcdinitialize
                            _lcdtext
                               _menu
 ---------------------------------------------------------------------------------
 (1) _menu                                                23    23      0   24866
                                             37 COMRAM    23    23      0
                             ___wmul
                        _calibracion
                           _lcdclear
                       _lcdsetCursor
                            _lcdtext
                           _lcdwrite
                       _leer_teclado
                            _trabajo
 ---------------------------------------------------------------------------------
 (2) _trabajo                                            172   172      0   16929
                                             33 COMRAM     4     4      0
                                              0 BANK1    168   168      0
                    _UART_Data_Ready
                          _UART_Read
                         _UART_Write
                            ___awdiv
                           ___awtoft
                            ___lbdiv
                           ___lbtoft
                             ___wmul
                           _lcdclear
                       _lcdsetCursor
                     _lcdshiftCursor
                            _lcdtext
                           _lcdwrite
                       _leer_teclado
                            _sprintf
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    3612
                                             25 COMRAM     8     5      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                           ___lbtoft (ARG)
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     360
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     328
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2641
                                             15 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    17      6    1862
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdshiftCursor                                       2     2      0      66
                                              2 COMRAM     2     2      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2449
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     238
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2594
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _calibracion                                         11     9      2    3678
                                              8 COMRAM    11     9      2
                    _UART_Data_Ready
                          _UART_Read
                         _UART_Write
                           _lcdclear
                       _lcdsetCursor
                            _lcdtext
                       _leer_teclado
 ---------------------------------------------------------------------------------
 (3) _leer_teclado                                         4     4      0      85
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (3) _lcdtext                                              6     4      2    3228
                                              2 COMRAM     6     4      2
                           _lcdwrite
 ---------------------------------------------------------------------------------
 (3) _lcdwrite                                             2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcdsetCursor                                         2     2      0      44
                                              2 COMRAM     2     2      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (3) _lcdclear                                             1     1      0      22
                                              2 COMRAM     1     1      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdinitialize                                        1     1      0      22
                                              2 COMRAM     1     1      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (4) _lcdcmd                                               2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           14    10      4     836
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _lcdinitialize
     _lcdcmd
   _lcdtext
     _lcdwrite
   _menu
     ___wmul
     _calibracion
       _UART_Data_Ready
       _UART_Read
       _UART_Write
       _lcdclear
         _lcdcmd
       _lcdsetCursor
         _lcdcmd
       _lcdtext
         _lcdwrite
       _leer_teclado
     _lcdclear
       _lcdcmd
     _lcdsetCursor
       _lcdcmd
     _lcdtext
       _lcdwrite
     _lcdwrite
     _leer_teclado
     _trabajo
       _UART_Data_Ready
       _UART_Read
       _UART_Write
       ___awdiv
       ___awtoft
         ___ftpack
       ___lbdiv
       ___lbtoft
         ___ftpack
       ___wmul
       _lcdclear
         _lcdcmd
       _lcdsetCursor
         _lcdcmd
       _lcdshiftCursor
         _lcdcmd
       _lcdtext
         _lcdwrite
       _lcdwrite
       _leer_teclado
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _trunc
         ___altoft
           ___ftpack
           ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     A8      AA       7       66.4%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3E      40       1       67.4%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EA      11        0.0%
DATA                 0      0      EA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 05 13:18:10 2017

            ___altoft@exp 0018             ___altoft@sign 0019                        l53 6E4C  
                      l90 6FD4                        l92 6FF2                        l94 6FEC  
                      l96 7000                        l98 6FFA              ___awdiv@sign 0006  
     ___wmul@multiplicand 0003               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
            trabajo@m_281 01A2                       l100 700E                       l110 7036  
                     l102 7008                       l120 7066                       l112 704A  
                     l104 701C                       l130 708E                       l122 7060  
                     l114 7044                       l106 7016                       l211 7566  
                     l203 7490                       l140 70D0                       l132 70A2  
                     l124 7086                       l116 7058                       l108 703C  
                     l300 6E88                       l213 7886                       l221 77B4  
                     l205 74C8                       l150 70E6                       l142 70CA  
                     l134 709C                       l126 7080                       l118 7052  
                     l214 758C                       l231 7B36                       l152 70FA  
                     l144 70DE                       l136 70B0                       l128 7094  
                     l312 6F26                       l232 7900                       l224 7866  
                     l216 761A                       l208 750E                       l313 6F7E  
                     l241 7A80                       l233 79DC                       l225 7870  
                     l209 7518                       l154 70F4                       l146 70D8  
                     l138 70AA                       l314 6F2C                       l306 6EB2  
                     l402 6984                       l234 799A                       l171 6922  
                     l403 6978                       l172 68EE                       l148 70EC  
                     l180 6714                       l308 6EDA                       l252 7B8C  
                     l244 7AFC                       l260 72DA                       l181 6722  
                     l237 7A20                       l229 78E4                       l261 72D6  
                     l190 715E                       l238 7A38                       l247 7B10  
                     l271 741C                       l192 727A                       l248 7B20  
                     l272 7390                       l264 730A                       l193 716A  
                     l513 6748                       l265 7426                       l273 73F2  
                     l274 73B4                       l266 7314                       l267 740C  
                     l380 6C0E                       l196 7290                       l532 6AF2  
                     l276 7406                       l268 7344                       l381 6C1C  
                     l373 6B94                       l197 7256                       l189 714C  
                     l533 6AE8                       l269 7354                       l382 6C32  
                     l374 6BAC                       l198 7268                       l286 6830  
                     l535 6B26                       l279 745A                       l376 6BDA  
                     l536 6B10                       l640 6D0A                       l632 6C70  
                     l377 6BCE                       l721 6854                       l641 6CFE  
                     l538 6B4E                       l722 684C                       l634 6CE6  
                     l539 6B44                       l651 679A                       l731 67BC  
                     l299 6E6E                       l643 6D26                       l635 6CD6  
                     l492 6AA8                       l652 67A2                       l732 67B4  
                     l493 6AB2                       l485 6A5A                       l725 6874  
                     l494 6AC0                       l486 6A6A                       l726 687E  
                     l647 6784                       l735 67D4                       l488 6A88  
                     l648 677E                       l736 67DE                       l489 6A80  
                     l868 68E2                       l893 69EA              __CFG_CPB$OFF 000000  
            __CFG_CPD$OFF 000000              __CFG_BOR$OFF 000000                       wreg 000FE8  
           _lcdinitialize 66DC              __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000  
                    l2240 6EDE                      l2170 7118                      l2098 6604  
                    l2674 7AFC                      STR_1 7C50                      STR_2 7BD0  
                    STR_3 7CDF                      STR_4 7CAC                      STR_5 7CF5  
                    STR_6 7C86                      STR_7 7CEE                      STR_8 7C33  
                    STR_9 7CB7                      _BRGH 007D62                      _CREN 007D5C  
                    u2100 694E              lcdcmd@cmdout 0002                      u2200 6F0A  
                    u2107 6944                      u2220 6F86                      u2230 6F9E  
                    _LATB 000F8A                      u3007 7A72                      u2080 7118  
                    u1520 6B58                      u2320 6788                      u2400 74B2  
                    u3017 7A9A                      u2090 691A                      u3107 7070  
                    u3027 7B7C                      u3117 70BA                      u3037 7BA6  
                    u2270 6A8C                      u1630 6D10                      u2510 7702  
                    u3127 7102                      u3047 6728                      u1480 6ADA  
                    u1720 6A12                      u2440 7522                      u3137 6684  
                    u2097 6910                      u3057 7200                      u2610 7A42  
                    u2530 77E2                      u3147 664A                      u3067 7246  
                    u1571 6C54                      u1660 6858                      u2700 7B58  
                    u3157 662E                      u3077 729A                      u1750 6FD2  
                    u1590 6C8E                      u2550 787A                      u3167 66E2  
                    u3087 6FDC                      u1728 6A14                      u3177 6666  
                    u3097 7026                      u1690 67C0                      u2570 78A0  
                    u2490 7656                      u1595 6C86                      u2750 6BDE  
                    u2670 7B2A                      u2815 6DD6                      u2825 6E20  
                    u2690 7B50                      u2880 7454                      u2785 6D4A  
                    u2937 6822                      u2795 6D94                      u2947 7380  
                    _RCIF 007CF5                      u2957 7556                      u2967 7738  
                    u2977 78D4                      u2987 79A4                      u2997 79F8  
                    _SPEN 007D5F              __CFG_WDTPS$1 000000                      _TRMT 007D61  
                    _TXEN 007D65                      _SYNC 007D64                      _main 67E8  
            ___ftpack@arg 0001                      _menu 72C0              ___ftpack@exp 0004  
                    fsr2h 000FDA                      indf2 000FDF                      fsr2l 000FD9  
                    prodh 000FF4                      prodl 000FF3                      start 0002  
           __CFG_IESO$OFF 000000             ?_lcdsetCursor 0001              ___param_bank 000000  
            ___fttol@exp1 000F              ___fttol@lval 000B             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000      __size_of_calibracion 019C           __end_of___aldiv 6C44  
                   ?_main 0001                     ?_menu 0001           __end_of___awdiv 6ACA  
         __end_of___lbdiv 67A6                     STR_10 7CCC                     STR_11 7CC2  
                   STR_20 7CFC                     STR_12 7CF9                     STR_21 7CA0  
                   STR_13 7CE7                     STR_14 7CF9                     STR_22 7CCC  
                   STR_30 7C13                     STR_23 7CC2                     STR_15 7CFC  
                   STR_31 7C79                     STR_24 7CE7                     STR_16 7CA0  
                   STR_32 7C42                     STR_33 7C86                     STR_25 7CF9  
                   STR_17 7C23                     STR_18 7CE7                     STR_26 7CFC  
                   STR_34 7C93                     STR_27 7CF9                     STR_19 7CF9  
                   STR_35 7BC1                     STR_36 7BF1                     STR_28 7BDC  
                   STR_37 7CD6                     STR_29 7C03                     STR_38 7C6C  
                   STR_39 7C5E           ___awdiv@divisor 0003           __end_of___fttol 6D38  
                   _LATB4 007C54                     _LATB5 007C55                     _LATB6 007C56  
                   _LATB7 007C57           __end_of___lwdiv 6888           __end_of___lwmod 67E8  
         ___awdiv@counter 0005                     _RCREG 000FAE                     _SPBRG 000FAF  
           __CFG_USBDIV$1 000000                     _TRISB 000F93            ?_lcdinitialize 0001  
                   _TXREG 000FAD             __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000  
           __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000  
           ?_leer_teclado 0001            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
             ?_UART_Write 0001        __size_of_UART_Init 012C        __size_of_UART_Read 0008  
           __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000  
          __CFG_EBTRB$OFF 000000           __end_of_lcdtext 6956             ___awtoft@sign 000C  
         __end_of_dpowers 7BC1                     _frexp 69CE                     _errno 003F  
           ___ftpack@sign 0005                     _steps 01A8                     _trunc 6888  
                   menu@c 003C                     menu@i 003A                     menu@k 0036  
                   menu@l 0034                     tablat 000FF5           __end_of_trabajo 7BB6  
                   plusw2 000FDB                     status 000FD8          calibracion@Input 0009  
         __end_of_sprintf 6FAC           ___lbdiv@divisor 0001            __CFG_ICPRT$OFF 000000  
          ??_lcdsetCursor 0003           ___lbdiv@counter 0003          calibracion@stepx 0012  
          __CFG_MCLRE$OFF 000000           __initialization 660E              __end_of_main 6836  
            __end_of_menu 7462            _lcdshiftCursor 6704                    ??_main 003D  
           ___fttol@sign1 000A                    ??_menu 0026             __activetblptr 000002  
          ??_leer_teclado 0001                    ?_frexp 0001          __end_of___altoft 69CE  
        ___awdiv@dividend 0001          __end_of___awtoft 676C          __end_of___ftpack 6B78  
        __end_of___lbtoft 66B6                    ?_trunc 001A                    _OSCCON 000FD3  
                  _TRISC6 007CA6                    _TRISC7 007CA7            __CFG_VREGEN$ON 000000  
          __CFG_XINST$OFF 000000         __end_of_UART_Init 6E64         __end_of_UART_Read 6602  
        __end_of_lcdclear 663A       __size_of_UART_Write 000C                 ??___aldiv 0009  
                  ___wmul 66B6                 ??___awdiv 0005                 ??___lbdiv 0002  
          __CFG_STVREN$ON 000000                 ??___fttol 0005    __end_of_lcdshiftCursor 6734  
        __end_of_lcdwrite 6692                 ??___lwdiv 0005                 ??___lwmod 000C  
                  _lcdcmd 6656          ___awdiv@quotient 0007           ??_lcdinitialize 0003  
               ??_lcdtext 0005              __mediumconst 7BB6                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                 ??_trabajo 0022  
               ??_sprintf 0013                    trunc@i 001D                    trunc@x 001A  
        ___lbdiv@dividend 0002                __accesstop 0060   __end_of__initialization 6618  
              ___altoft@c 0010           __CFG_PBADEN$OFF 000000         lcdsetCursor@value 0004  
           ___rparam_used 000001                ___awtoft@c 0009                ___lbtoft@c 000C  
              ___fttol@f1 0001            __pcstackCOMRAM 0001           ?_lcdshiftCursor 0001  
           __end_of_frexp 6A46             __end_of_trunc 68E4          ___lbdiv@quotient 0004  
    __end_of_lcdsetCursor 6656                   ??_frexp 0006                   ??_trunc 001D  
         lcdwrite@dataout 0002                __pbssBANK1 01A8  __size_of_UART_Data_Ready 0008  
    __end_of_leer_teclado 7124                   ?___wmul 0001                   ?_lcdcmd 0001  
               ?___altoft 0010                 ?___awtoft 0009                 ?___ftpack 0001  
               ?___lbtoft 0009              menu@comandos 0038              ??_UART_Write 0001  
               ?_lcdclear 0001                 ?_lcdwrite 0001                   __Hparam 0000  
                 __Lparam 0000                   ___aldiv 6B78             ??_calibracion 000B  
                 ___awdiv 6A46                   ___lbdiv 676C           __size_of___wmul 0026  
      __end_of_UART_Write 660E                   ___fttol 6C44                   ___lwdiv 6836  
                 ___lwmod 67A6                ??___altoft 0014           __size_of_lcdcmd 001E  
                 __pcinit 660E                ??___awtoft 000C                ??___ftpack 0006  
              ??___lbtoft 000C                   __ramtop 0800                   __ptext0 67E8  
                 __ptext1 72C0                   __ptext2 7462                   __ptext3 6888  
                 __ptext4 69CE                   __ptext5 6C44                   __ptext6 6956  
                 __ptext7 6E64                   __ptext8 67A6                   __ptext9 6836  
                 _lcdtext 68E4                   _dpowers 7BB7          ___aldiv@dividend 0001  
                 _trabajo 7462                   _sprintf 6E64                ??_lcdclear 0003  
    end_of_initialization 6618                ??_lcdwrite 0001             __Lmediumconst 7BB6  
        ___aldiv@quotient 000B                   postdec2 000FDD                   postinc2 000FDE  
       ??_UART_Data_Ready 0001     __size_of_lcdsetCursor 001C                 _UART_Init 6D38  
               _UART_Read 65FA                 _PORTBbits 000F81            UART_Write@data 0001  
     __end_of_calibracion 72C0                 _TRISDbits 000F95               trabajo@cuts 01A4  
             trabajo@cutx 0164               trabajo@outx 0178     __size_of_leer_teclado 0178  
        ??_lcdshiftCursor 0003              _lcdsetCursor 663A             leer_teclado@j 0002  
          __end_of___wmul 66DC                ?_UART_Init 000F                ?_UART_Read 0001  
          __end_of_lcdcmd 6674     __end_of_lcdinitialize 6704       start_initialization 660E  
            _leer_teclado 6FAC              calibracion@i 0010         leer_teclado@tecla 0004  
              frexp@value 0001                  ??___wmul 0005               _calibracion 7124  
                ??_lcdcmd 0001          __CFG_LPT1OSC$OFF 000000         __size_of___altoft 0078  
       __size_of___awtoft 0038         __size_of___ftpack 00AE         __size_of___lbtoft 0024  
             __pbssCOMRAM 003F             __pcstackBANK1 0100         __size_of_lcdclear 0018  
             sprintf@flag 0016               sprintf@prec 0017         __size_of_lcdwrite 001E  
        ___lwdiv@dividend 0001             __pmediumconst 7BB6                  ?___aldiv 0001  
                ?___awdiv 0001                  ?___lbdiv 0001                  ?___fttol 0001  
                ?___lwdiv 0001                  ?___lwmod 0008               ??_UART_Init 0013  
             ??_UART_Read 0001                  ?_lcdtext 0003                  ?_trabajo 0001  
        ___lwdiv@quotient 0005                  ?_sprintf 000D            __size_of_frexp 0078  
              UART_Init@x 001B            __size_of_trunc 005C           ___aldiv@divisor 0005  
         ___aldiv@counter 0009            ___wmul@product 0005           _UART_Data_Ready 65F2  
                _LATDbits 000F8C         UART_Init@baudrate 000F         ___wmul@multiplier 0001  
              trabajo@num 01A7                 frexp@eptr 0004                  __Hrparam 0000  
               menu@stepx 002A                  __Lrparam 0000          __size_of___aldiv 00CC  
        __size_of___awdiv 0084          __size_of___lbdiv 003A                  ___altoft 6956  
        __size_of___fttol 00F4          __size_of___lwdiv 0052          __size_of___lwmod 0042  
                ___awtoft 6734                  ___ftpack 6ACA                  ___lbtoft 6692  
              sprintf@val 0018          __size_of_lcdtext 0072           ___lwdiv@divisor 0003  
         ___lwdiv@counter 0007                  __ptext10 6704                  __ptext11 66B6  
                __ptext20 6674                  __ptext12 6692                  __ptext21 663A  
                __ptext13 676C                  __ptext22 6622                  __ptext14 6734  
                __ptext23 6602                  __ptext15 6ACA                  __ptext24 65FA  
                __ptext16 6A46                  __ptext25 65F2                  __ptext17 7124  
                __ptext26 66DC                  __ptext18 6FAC                  __ptext27 6656  
                __ptext19 68E4                  __ptext28 6D38                  __ptext29 6B78  
 __end_of_UART_Data_Ready 65FA          __size_of_trabajo 0754                  _lcdclear 6622  
        __size_of_sprintf 0148         trabajo@distancias 0100                  _lcdwrite 6674  
              trunc@expon 0020             __size_of_main 004E             __size_of_menu 01A2  
            ?_calibracion 0009                 trabajo@mx 018C     __CFG_CPUDIV$OSC1_PLL2 000000  
     lcdshiftCursor@value 0004                  lcdtext@i 0007                  lcdtext@t 0003  
               sprintf@ap 0014                 sprintf@sp 000D          ___lwmod@dividend 0008  
  __size_of_lcdinitialize 0028                  trabajo@i 01A0                  trabajo@m 01A5  
 __size_of_lcdshiftCursor 0030       __CFG_FOSC$INTOSC_EC 000000                  sprintf@c 001A  
                sprintf@f 000F           ___lwmod@divisor 000A           ___lwmod@counter 000C  
            ___aldiv@sign 000A                _UART_Write 6602          ?_UART_Data_Ready 0001  
