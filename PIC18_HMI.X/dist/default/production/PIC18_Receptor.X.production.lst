

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Nov 09 10:07:07 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.44
    23                           ; Generated 14/09/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _TRISDbits	set	3989
    57  0000                     _TRISB	set	3987
    58  0000                     _OSCCON	set	4051
    59  0000                     _LATDbits	set	3980
    60  0000                     _LATB	set	3978
    61  0000                     _RCREG	set	4014
    62  0000                     _TXREG	set	4013
    63  0000                     _SPBRG	set	4015
    64  0000                     _RCIF	set	31989
    65  0000                     _TRMT	set	32097
    66  0000                     _TXEN	set	32101
    67  0000                     _CREN	set	32092
    68  0000                     _TRISC6	set	31910
    69  0000                     _TRISC7	set	31911
    70  0000                     _SPEN	set	32095
    71  0000                     _SYNC	set	32100
    72  0000                     _BRGH	set	32098
    73                           
    74                           	psect	smallconst
    75  000800                     __psmallconst:
    76                           	opt stack 0
    77  000800  00                 	db	0
    78  000801                     STR_1:
    79  000801  4C                 	db	76	;'L'
    80  000802  69                 	db	105	;'i'
    81  000803  73                 	db	115	;'s'
    82  000804  74                 	db	116	;'t'
    83  000805  6F                 	db	111	;'o'
    84  000806  00                 	db	0
    85                           
    86                           ; #config settings
    87  000807  00                 	db	0	; dummy byte at the end
    88  0000                     
    89                           	psect	cinit
    90  000B70                     __pcinit:
    91                           	opt stack 0
    92  000B70                     start_initialization:
    93                           	opt stack 0
    94  000B70                     __initialization:
    95                           	opt stack 0
    96  000B70                     end_of_initialization:
    97                           	opt stack 0
    98  000B70                     __end_of__initialization:
    99                           	opt stack 0
   100  000B70  0E00               	movlw	low (__Lmediumconst shr (0+16))
   101  000B72  6EF8               	movwf	tblptru,c
   102  000B74  0100               	movlb	0
   103  000B76  EF03  F005         	goto	_main	;jump to C main() function
   104                           tblptru	equ	0xFF8
   105                           
   106                           	psect	cstackCOMRAM
   107  000001                     __pcstackCOMRAM:
   108                           	opt stack 0
   109  000001                     ??_lcdcmd:
   110  000001                     ??_lcdwrite:
   111  000001                     ?___aldiv:
   112                           	opt stack 0
   113  000001                     ___aldiv@dividend:
   114                           	opt stack 0
   115                           
   116                           ; 4 bytes @ 0x0
   117  000001                     	ds	1
   118  000002                     lcdcmd@cmdout:
   119                           	opt stack 0
   120  000002                     lcdwrite@dataout:
   121                           	opt stack 0
   122                           
   123                           ; 1 bytes @ 0x1
   124  000002                     	ds	1
   125  000003                     ??_lcdinitialize:
   126  000003                     ??_lcdclear:
   127  000003                     ??_lcdsetCursor:
   128  000003                     lcdtext@t:
   129                           	opt stack 0
   130                           
   131                           ; 2 bytes @ 0x2
   132  000003                     	ds	1
   133  000004                     lcdsetCursor@value:
   134                           	opt stack 0
   135                           
   136                           ; 1 bytes @ 0x3
   137  000004                     	ds	1
   138  000005                     ??_lcdtext:
   139  000005                     ___aldiv@divisor:
   140                           	opt stack 0
   141                           
   142                           ; 4 bytes @ 0x4
   143  000005                     	ds	2
   144  000007                     lcdtext@i:
   145                           	opt stack 0
   146                           
   147                           ; 2 bytes @ 0x6
   148  000007                     	ds	2
   149  000009                     ___aldiv@counter:
   150                           	opt stack 0
   151                           
   152                           ; 1 bytes @ 0x8
   153  000009                     	ds	1
   154  00000A                     ___aldiv@sign:
   155                           	opt stack 0
   156                           
   157                           ; 1 bytes @ 0x9
   158  00000A                     	ds	1
   159  00000B                     ___aldiv@quotient:
   160                           	opt stack 0
   161                           
   162                           ; 4 bytes @ 0xA
   163  00000B                     	ds	4
   164  00000F                     UART_Init@baudrate:
   165                           	opt stack 0
   166                           
   167                           ; 4 bytes @ 0xE
   168  00000F                     	ds	4
   169  000013                     ??_UART_Init:
   170                           
   171                           ; 1 bytes @ 0x12
   172  000013                     	ds	8
   173  00001B                     UART_Init@x:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x1A
   177  00001B                     	ds	2
   178  00001D                     ??_main:
   179                           
   180                           ; 1 bytes @ 0x1C
   181  00001D                     	ds	2
   182  00001F                     main@c:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x1E
   186  00001F                     	ds	1
   187                           tblptru	equ	0xFF8
   188                           
   189 ;;
   190 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   191 ;;
   192 ;; *************** function _main *****************
   193 ;; Defined at:
   194 ;;		line 51 in file "receptor.c"
   195 ;; Parameters:    Size  Location     Type
   196 ;;		None
   197 ;; Auto vars:     Size  Location     Type
   198 ;;  c               1   30[COMRAM] unsigned char 
   199 ;; Return value:  Size  Location     Type
   200 ;;                  1    wreg      void 
   201 ;; Registers used:
   202 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   203 ;; Tracked objects:
   204 ;;		On entry : 0/0
   205 ;;		On exit  : 0/0
   206 ;;		Unchanged: 0/0
   207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   208 ;;      Params:         0       0       0       0       0       0       0       0       0
   209 ;;      Locals:         1       0       0       0       0       0       0       0       0
   210 ;;      Temps:          2       0       0       0       0       0       0       0       0
   211 ;;      Totals:         3       0       0       0       0       0       0       0       0
   212 ;;Total ram usage:        3 bytes
   213 ;; Hardware stack levels required when called:    2
   214 ;; This function calls:
   215 ;;		_UART_Data_Ready
   216 ;;		_UART_Init
   217 ;;		_UART_Read
   218 ;;		_lcdclear
   219 ;;		_lcdinitialize
   220 ;;		_lcdsetCursor
   221 ;;		_lcdtext
   222 ;;		_lcdwrite
   223 ;; This function is called by:
   224 ;;		Startup code after reset
   225 ;; This function uses a non-reentrant model
   226 ;;
   227                           
   228                           	psect	text0
   229  000A06                     __ptext0:
   230                           	opt stack 0
   231  000A06                     _main:
   232                           	opt stack 29
   233                           
   234                           ;receptor.c: 52: OSCCON = 0b01111110;
   235                           
   236                           ;incstack = 0
   237  000A06  0E7E               	movlw	126
   238  000A08  6ED3               	movwf	4051,c	;volatile
   239                           
   240                           ;receptor.c: 53: unsigned char c;
   241                           ;receptor.c: 54: TRISB = 0;
   242  000A0A  0E00               	movlw	0
   243  000A0C  6E93               	movwf	3987,c	;volatile
   244                           
   245                           ;receptor.c: 55: TRISDbits.RD0 = 0;
   246  000A0E  9095               	bcf	3989,0,c	;volatile
   247                           
   248                           ;receptor.c: 56: TRISDbits.RD1 = 0;
   249  000A10  9295               	bcf	3989,1,c	;volatile
   250                           
   251                           ;receptor.c: 57: lcdinitialize();
   252  000A12  EC6C  F005         	call	_lcdinitialize	;wreg free
   253                           
   254                           ;receptor.c: 59: if (UART_Init(9600)){
   255  000A16  0E80               	movlw	128
   256  000A18  6E0F               	movwf	UART_Init@baudrate,c
   257  000A1A  0E25               	movlw	37
   258  000A1C  6E10               	movwf	UART_Init@baudrate+1,c
   259  000A1E  0E00               	movlw	0
   260  000A20  6E11               	movwf	UART_Init@baudrate+2,c
   261  000A22  0E00               	movlw	0
   262  000A24  6E12               	movwf	UART_Init@baudrate+3,c
   263  000A26  EC04  F004         	call	_UART_Init	;wreg free
   264  000A2A  0900               	iorlw	0
   265  000A2C  B4D8               	btfsc	status,2,c
   266  000A2E  D006               	goto	l97
   267                           
   268                           ;receptor.c: 60: lcdtext("Listo");
   269  000A30  0E01               	movlw	low STR_1
   270  000A32  6E03               	movwf	lcdtext@t,c
   271  000A34  0E08               	movlw	high STR_1
   272  000A36  6E04               	movwf	lcdtext@t+1,c
   273  000A38  EC47  F005         	call	_lcdtext	;wreg free
   274  000A3C                     l97:
   275                           
   276                           ;receptor.c: 61: }
   277                           ;receptor.c: 62: _delay((unsigned long)((1000)*(8000000/4000.0)));
   278  000A3C  0E0B               	movlw	11
   279  000A3E  6E1E               	movwf	(??_main+1)& (0+255),c
   280  000A40  0E26               	movlw	38
   281  000A42  6E1D               	movwf	??_main& (0+255),c
   282  000A44  0E5E               	movlw	94
   283  000A46                     u357:
   284  000A46  2EE8               	decfsz	wreg,f,c
   285  000A48  D7FE               	bra	u357
   286  000A4A  2E1D               	decfsz	??_main& (0+255),f,c
   287  000A4C  D7FC               	bra	u357
   288  000A4E  2E1E               	decfsz	(??_main+1)& (0+255),f,c
   289  000A50  D7FA               	bra	u357
   290                           
   291                           ;receptor.c: 63: lcdclear();
   292  000A52  ECAC  F005         	call	_lcdclear	;wreg free
   293  000A56                     
   294                           ;receptor.c: 66: if (UART_Data_Ready()){
   295  000A56  ECC1  F005         	call	_UART_Data_Ready	;wreg free
   296  000A5A  0900               	iorlw	0
   297  000A5C  B4D8               	btfsc	status,2,c
   298  000A5E  D7FB               	goto	l98
   299                           
   300                           ;receptor.c: 67: c = UART_Read();
   301  000A60  ECBD  F005         	call	_UART_Read	;wreg free
   302  000A64  6E1F               	movwf	main@c,c
   303                           
   304                           ;receptor.c: 68: switch(c){
   305  000A66  D00B               	goto	l100
   306  000A68                     
   307                           ;receptor.c: 70: lcdclear();
   308  000A68  ECAC  F005         	call	_lcdclear	;wreg free
   309                           
   310                           ;receptor.c: 71: break;
   311  000A6C  D7F4               	goto	l98
   312  000A6E                     
   313                           ;receptor.c: 73: lcdsetCursor(0x40);
   314  000A6E  0E40               	movlw	64
   315  000A70  EC9E  F005         	call	_lcdsetCursor
   316                           
   317                           ;receptor.c: 74: break;
   318  000A74  D7F0               	goto	l98
   319  000A76                     
   320                           ;receptor.c: 76: lcdwrite(c);
   321  000A76  501F               	movf	main@c,w,c
   322  000A78  EC80  F005         	call	_lcdwrite
   323                           
   324                           ;receptor.c: 78: }
   325                           
   326                           ;receptor.c: 77: break;
   327  000A7C  D7EC               	goto	l98
   328  000A7E                     l100:
   329  000A7E  501F               	movf	main@c,w,c
   330                           
   331                           ; Switch size 1, requested type "space"
   332                           ; Number of cases is 2, Range of values is 13 to 127
   333                           ; switch strategies available:
   334                           ; Name         Instructions Cycles
   335                           ; simple_byte            7     4 (average)
   336                           ;	Chosen strategy is simple_byte
   337  000A80  0A0D               	xorlw	13	; case 13
   338  000A82  B4D8               	btfsc	status,2,c
   339  000A84  D7F4               	goto	l103
   340  000A86  0A72               	xorlw	114	; case 127
   341  000A88  B4D8               	btfsc	status,2,c
   342  000A8A  D7EE               	goto	l101
   343  000A8C  D7F4               	goto	l104
   344  000A8E                     __end_of_main:
   345                           	opt stack 0
   346                           tblptru	equ	0xFF8
   347                           wreg	equ	0xFE8
   348                           status	equ	0xFD8
   349                           
   350 ;; *************** function _lcdtext *****************
   351 ;; Defined at:
   352 ;;		line 40 in file "receptor.c"
   353 ;; Parameters:    Size  Location     Type
   354 ;;  t               2    2[COMRAM] PTR unsigned char 
   355 ;;		 -> STR_1(6), 
   356 ;; Auto vars:     Size  Location     Type
   357 ;;  i               2    6[COMRAM] int 
   358 ;; Return value:  Size  Location     Type
   359 ;;                  1    wreg      void 
   360 ;; Registers used:
   361 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   362 ;; Tracked objects:
   363 ;;		On entry : 0/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   367 ;;      Params:         2       0       0       0       0       0       0       0       0
   368 ;;      Locals:         2       0       0       0       0       0       0       0       0
   369 ;;      Temps:          2       0       0       0       0       0       0       0       0
   370 ;;      Totals:         6       0       0       0       0       0       0       0       0
   371 ;;Total ram usage:        6 bytes
   372 ;; Hardware stack levels used:    1
   373 ;; Hardware stack levels required when called:    1
   374 ;; This function calls:
   375 ;;		_lcdwrite
   376 ;; This function is called by:
   377 ;;		_main
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381                           	psect	text1
   382  000A8E                     __ptext1:
   383                           	opt stack 0
   384  000A8E                     _lcdtext:
   385                           	opt stack 29
   386                           
   387                           ;receptor.c: 41: for (int i = 0; t[i] != '\0'; i++) {
   388                           
   389                           ;incstack = 0
   390  000A8E  0E00               	movlw	0
   391  000A90  6E08               	movwf	lcdtext@i+1,c
   392  000A92  0E00               	movlw	0
   393  000A94  6E07               	movwf	lcdtext@i,c
   394  000A96  D010               	goto	l86
   395  000A98                     
   396                           ;receptor.c: 42: lcdwrite(t[i]);
   397  000A98  5007               	movf	lcdtext@i,w,c
   398  000A9A  2403               	addwf	lcdtext@t,w,c
   399  000A9C  6E05               	movwf	??_lcdtext& (0+255),c
   400  000A9E  5008               	movf	lcdtext@i+1,w,c
   401  000AA0  2004               	addwfc	lcdtext@t+1,w,c
   402  000AA2  6E06               	movwf	(??_lcdtext+1)& (0+255),c
   403  000AA4  C005  FFF6         	movff	??_lcdtext,tblptrl
   404  000AA8  C006  FFF7         	movff	??_lcdtext+1,tblptrh
   405  000AAC                     	if	0	;tblptru may be non-zero
   406  000AAC                     	endif
   407  000AAC                     	if	0	;tblptru may be non-zero
   408  000AAC                     	endif
   409  000AAC  0008               	tblrd		*
   410  000AAE  50F5               	movf	tablat,w,c
   411  000AB0  EC80  F005         	call	_lcdwrite
   412  000AB4  4A07               	infsnz	lcdtext@i,f,c
   413  000AB6  2A08               	incf	lcdtext@i+1,f,c
   414  000AB8                     l86:
   415  000AB8  5007               	movf	lcdtext@i,w,c
   416  000ABA  2403               	addwf	lcdtext@t,w,c
   417  000ABC  6E05               	movwf	??_lcdtext& (0+255),c
   418  000ABE  5008               	movf	lcdtext@i+1,w,c
   419  000AC0  2004               	addwfc	lcdtext@t+1,w,c
   420  000AC2  6E06               	movwf	(??_lcdtext+1)& (0+255),c
   421  000AC4  C005  FFF6         	movff	??_lcdtext,tblptrl
   422  000AC8  C006  FFF7         	movff	??_lcdtext+1,tblptrh
   423  000ACC                     	if	0	;tblptru may be non-zero
   424  000ACC                     	endif
   425  000ACC                     	if	0	;tblptru may be non-zero
   426  000ACC                     	endif
   427  000ACC  0008               	tblrd		*
   428  000ACE  50F5               	movf	tablat,w,c
   429  000AD0  0900               	iorlw	0
   430  000AD2  B4D8               	btfsc	status,2,c
   431  000AD4  0012               	return	
   432  000AD6  D7E0               	goto	l87
   433  000AD8                     __end_of_lcdtext:
   434                           	opt stack 0
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           wreg	equ	0xFE8
   440                           status	equ	0xFD8
   441                           
   442 ;; *************** function _lcdwrite *****************
   443 ;; Defined at:
   444 ;;		line 32 in file "receptor.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;  dataout         1    wreg     unsigned char 
   447 ;; Auto vars:     Size  Location     Type
   448 ;;  dataout         1    1[COMRAM] unsigned char 
   449 ;; Return value:  Size  Location     Type
   450 ;;                  1    wreg      void 
   451 ;; Registers used:
   452 ;;		wreg, status,2, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : 0/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   458 ;;      Params:         0       0       0       0       0       0       0       0       0
   459 ;;      Locals:         1       0       0       0       0       0       0       0       0
   460 ;;      Temps:          1       0       0       0       0       0       0       0       0
   461 ;;      Totals:         2       0       0       0       0       0       0       0       0
   462 ;;Total ram usage:        2 bytes
   463 ;; Hardware stack levels used:    1
   464 ;; This function calls:
   465 ;;		Nothing
   466 ;; This function is called by:
   467 ;;		_lcdtext
   468 ;;		_main
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text2
   473  000B00                     __ptext2:
   474                           	opt stack 0
   475  000B00                     _lcdwrite:
   476                           	opt stack 30
   477                           
   478                           ;incstack = 0
   479                           ;lcdwrite@dataout stored from wreg
   480  000B00  6E02               	movwf	lcdwrite@dataout,c
   481                           
   482                           ;receptor.c: 33: LATB = dataout;
   483  000B02  C002  FF8A         	movff	lcdwrite@dataout,3978	;volatile
   484                           
   485                           ;receptor.c: 34: LATDbits.LATD1 = 1;
   486  000B06  828C               	bsf	3980,1,c	;volatile
   487                           
   488                           ;receptor.c: 35: LATDbits.LATD0 = 1;
   489  000B08  808C               	bsf	3980,0,c	;volatile
   490                           
   491                           ;receptor.c: 36: _delay((unsigned long)((10)*(8000000/4000.0)));
   492  000B0A  0E1A               	movlw	26
   493  000B0C  6E01               	movwf	??_lcdwrite& (0+255),c
   494  000B0E  0EF8               	movlw	248
   495  000B10                     u367:
   496  000B10  2EE8               	decfsz	wreg,f,c
   497  000B12  D7FE               	bra	u367
   498  000B14  2E01               	decfsz	??_lcdwrite& (0+255),f,c
   499  000B16  D7FC               	bra	u367
   500  000B18  D000               	nop2	
   501                           
   502                           ;receptor.c: 37: LATDbits.LATD0 = 0;
   503  000B1A  908C               	bcf	3980,0,c	;volatile
   504  000B1C  0012               	return		;funcret
   505  000B1E                     __end_of_lcdwrite:
   506                           	opt stack 0
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           wreg	equ	0xFE8
   512                           status	equ	0xFD8
   513                           
   514 ;; *************** function _lcdsetCursor *****************
   515 ;; Defined at:
   516 ;;		line 46 in file "receptor.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;  value           1    wreg     unsigned char 
   519 ;; Auto vars:     Size  Location     Type
   520 ;;  value           1    3[COMRAM] unsigned char 
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   530 ;;      Params:         0       0       0       0       0       0       0       0       0
   531 ;;      Locals:         1       0       0       0       0       0       0       0       0
   532 ;;      Temps:          1       0       0       0       0       0       0       0       0
   533 ;;      Totals:         2       0       0       0       0       0       0       0       0
   534 ;;Total ram usage:        2 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    1
   537 ;; This function calls:
   538 ;;		_lcdcmd
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           	psect	text3
   545  000B3C                     __ptext3:
   546                           	opt stack 0
   547  000B3C                     _lcdsetCursor:
   548                           	opt stack 29
   549                           
   550                           ;incstack = 0
   551                           ;lcdsetCursor@value stored from wreg
   552  000B3C  6E04               	movwf	lcdsetCursor@value,c
   553                           
   554                           ;receptor.c: 47: lcdcmd(0b10000000 | value);
   555  000B3E  5004               	movf	lcdsetCursor@value,w,c
   556  000B40  0980               	iorlw	128
   557  000B42  EC8F  F005         	call	_lcdcmd
   558                           
   559                           ;receptor.c: 48: _delay((unsigned long)((2)*(8000000/4000.0)));
   560  000B46  0E06               	movlw	6
   561  000B48  6E03               	movwf	??_lcdsetCursor& (0+255),c
   562  000B4A  0E30               	movlw	48
   563  000B4C                     u377:
   564  000B4C  2EE8               	decfsz	wreg,f,c
   565  000B4E  D7FE               	bra	u377
   566  000B50  2E03               	decfsz	??_lcdsetCursor& (0+255),f,c
   567  000B52  D7FC               	bra	u377
   568  000B54  D000               	nop2	
   569  000B56  0012               	return		;funcret
   570  000B58                     __end_of_lcdsetCursor:
   571                           	opt stack 0
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           wreg	equ	0xFE8
   577                           status	equ	0xFD8
   578                           
   579 ;; *************** function _lcdinitialize *****************
   580 ;; Defined at:
   581 ;;		line 19 in file "receptor.c"
   582 ;; Parameters:    Size  Location     Type
   583 ;;		None
   584 ;; Auto vars:     Size  Location     Type
   585 ;;		None
   586 ;; Return value:  Size  Location     Type
   587 ;;                  1    wreg      void 
   588 ;; Registers used:
   589 ;;		wreg, status,2, cstack
   590 ;; Tracked objects:
   591 ;;		On entry : 0/0
   592 ;;		On exit  : 0/0
   593 ;;		Unchanged: 0/0
   594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   595 ;;      Params:         0       0       0       0       0       0       0       0       0
   596 ;;      Locals:         0       0       0       0       0       0       0       0       0
   597 ;;      Temps:          1       0       0       0       0       0       0       0       0
   598 ;;      Totals:         1       0       0       0       0       0       0       0       0
   599 ;;Total ram usage:        1 bytes
   600 ;; Hardware stack levels used:    1
   601 ;; Hardware stack levels required when called:    1
   602 ;; This function calls:
   603 ;;		_lcdcmd
   604 ;; This function is called by:
   605 ;;		_main
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           	psect	text4
   610  000AD8                     __ptext4:
   611                           	opt stack 0
   612  000AD8                     _lcdinitialize:
   613                           	opt stack 29
   614                           
   615                           ;receptor.c: 20: _delay((unsigned long)((50)*(8000000/4000.0)));
   616                           
   617                           ;incstack = 0
   618  000AD8  0E82               	movlw	130
   619  000ADA  6E03               	movwf	??_lcdinitialize& (0+255),c
   620  000ADC  0EDE               	movlw	222
   621  000ADE                     u387:
   622  000ADE  2EE8               	decfsz	wreg,f,c
   623  000AE0  D7FE               	bra	u387
   624  000AE2  2E03               	decfsz	??_lcdinitialize& (0+255),f,c
   625  000AE4  D7FC               	bra	u387
   626                           
   627                           ;receptor.c: 21: lcdcmd(0b00111000);
   628  000AE6  0E38               	movlw	56
   629  000AE8  EC8F  F005         	call	_lcdcmd
   630                           
   631                           ;receptor.c: 22: lcdcmd(0b00001111);
   632  000AEC  0E0F               	movlw	15
   633  000AEE  EC8F  F005         	call	_lcdcmd
   634                           
   635                           ;receptor.c: 23: lcdcmd(0b00000010);
   636  000AF2  0E02               	movlw	2
   637  000AF4  EC8F  F005         	call	_lcdcmd
   638                           
   639                           ;receptor.c: 24: lcdcmd(0b00000001);
   640  000AF8  0E01               	movlw	1
   641  000AFA  EC8F  F005         	call	_lcdcmd
   642  000AFE  0012               	return		;funcret
   643  000B00                     __end_of_lcdinitialize:
   644                           	opt stack 0
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           wreg	equ	0xFE8
   650                           status	equ	0xFD8
   651                           
   652 ;; *************** function _lcdclear *****************
   653 ;; Defined at:
   654 ;;		line 27 in file "receptor.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;		None
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg, status,2, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   668 ;;      Params:         0       0       0       0       0       0       0       0       0
   669 ;;      Locals:         0       0       0       0       0       0       0       0       0
   670 ;;      Temps:          1       0       0       0       0       0       0       0       0
   671 ;;      Totals:         1       0       0       0       0       0       0       0       0
   672 ;;Total ram usage:        1 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    1
   675 ;; This function calls:
   676 ;;		_lcdcmd
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text5
   683  000B58                     __ptext5:
   684                           	opt stack 0
   685  000B58                     _lcdclear:
   686                           	opt stack 29
   687                           
   688                           ;receptor.c: 28: lcdcmd(0b00000001);
   689                           
   690                           ;incstack = 0
   691  000B58  0E01               	movlw	1
   692  000B5A  EC8F  F005         	call	_lcdcmd
   693                           
   694                           ;receptor.c: 29: _delay((unsigned long)((2)*(8000000/4000.0)));
   695  000B5E  0E06               	movlw	6
   696  000B60  6E03               	movwf	??_lcdclear& (0+255),c
   697  000B62  0E30               	movlw	48
   698  000B64                     u397:
   699  000B64  2EE8               	decfsz	wreg,f,c
   700  000B66  D7FE               	bra	u397
   701  000B68  2E03               	decfsz	??_lcdclear& (0+255),f,c
   702  000B6A  D7FC               	bra	u397
   703  000B6C  D000               	nop2	
   704  000B6E  0012               	return		;funcret
   705  000B70                     __end_of_lcdclear:
   706                           	opt stack 0
   707                           tblptru	equ	0xFF8
   708                           tblptrh	equ	0xFF7
   709                           tblptrl	equ	0xFF6
   710                           tablat	equ	0xFF5
   711                           wreg	equ	0xFE8
   712                           status	equ	0xFD8
   713                           
   714 ;; *************** function _lcdcmd *****************
   715 ;; Defined at:
   716 ;;		line 11 in file "receptor.c"
   717 ;; Parameters:    Size  Location     Type
   718 ;;  cmdout          1    wreg     unsigned char 
   719 ;; Auto vars:     Size  Location     Type
   720 ;;  cmdout          1    1[COMRAM] unsigned char 
   721 ;; Return value:  Size  Location     Type
   722 ;;                  1    wreg      void 
   723 ;; Registers used:
   724 ;;		wreg, status,2, cstack
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   730 ;;      Params:         0       0       0       0       0       0       0       0       0
   731 ;;      Locals:         1       0       0       0       0       0       0       0       0
   732 ;;      Temps:          1       0       0       0       0       0       0       0       0
   733 ;;      Totals:         2       0       0       0       0       0       0       0       0
   734 ;;Total ram usage:        2 bytes
   735 ;; Hardware stack levels used:    1
   736 ;; This function calls:
   737 ;;		Nothing
   738 ;; This function is called by:
   739 ;;		_lcdinitialize
   740 ;;		_lcdclear
   741 ;;		_lcdsetCursor
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745                           	psect	text6
   746  000B1E                     __ptext6:
   747                           	opt stack 0
   748  000B1E                     _lcdcmd:
   749                           	opt stack 29
   750                           
   751                           ;incstack = 0
   752                           ;lcdcmd@cmdout stored from wreg
   753  000B1E  6E02               	movwf	lcdcmd@cmdout,c
   754                           
   755                           ;receptor.c: 12: LATB = cmdout;
   756  000B20  C002  FF8A         	movff	lcdcmd@cmdout,3978	;volatile
   757                           
   758                           ;receptor.c: 13: LATDbits.LATD1 = 0;
   759  000B24  928C               	bcf	3980,1,c	;volatile
   760                           
   761                           ;receptor.c: 14: LATDbits.LATD0 = 1;
   762  000B26  808C               	bsf	3980,0,c	;volatile
   763                           
   764                           ;receptor.c: 15: _delay((unsigned long)((10)*(8000000/4000.0)));
   765  000B28  0E1A               	movlw	26
   766  000B2A  6E01               	movwf	??_lcdcmd& (0+255),c
   767  000B2C  0EF8               	movlw	248
   768  000B2E                     u407:
   769  000B2E  2EE8               	decfsz	wreg,f,c
   770  000B30  D7FE               	bra	u407
   771  000B32  2E01               	decfsz	??_lcdcmd& (0+255),f,c
   772  000B34  D7FC               	bra	u407
   773  000B36  D000               	nop2	
   774                           
   775                           ;receptor.c: 16: LATDbits.LATD0 = 0;
   776  000B38  908C               	bcf	3980,0,c	;volatile
   777  000B3A  0012               	return		;funcret
   778  000B3C                     __end_of_lcdcmd:
   779                           	opt stack 0
   780                           tblptru	equ	0xFF8
   781                           tblptrh	equ	0xFF7
   782                           tblptrl	equ	0xFF6
   783                           tablat	equ	0xFF5
   784                           wreg	equ	0xFE8
   785                           status	equ	0xFD8
   786                           
   787 ;; *************** function _UART_Read *****************
   788 ;; Defined at:
   789 ;;		line 41 in file "UART.h"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      unsigned char 
   796 ;; Registers used:
   797 ;;		wreg, status,2
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   803 ;;      Params:         0       0       0       0       0       0       0       0       0
   804 ;;      Locals:         0       0       0       0       0       0       0       0       0
   805 ;;      Temps:          0       0       0       0       0       0       0       0       0
   806 ;;      Totals:         0       0       0       0       0       0       0       0       0
   807 ;;Total ram usage:        0 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		_main
   813 ;;		_UART_Read_Text
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text7
   818  000B7A                     __ptext7:
   819                           	opt stack 0
   820  000B7A                     _UART_Read:
   821                           	opt stack 30
   822                           
   823                           ;UART.h: 42: while (!RCIF);
   824                           
   825                           ;incstack = 0
   826  000B7A  AA9E               	btfss	3998,5,c	;volatile
   827  000B7C  D7FE               	goto	_UART_Read
   828                           
   829                           ;UART.h: 43: return RCREG;
   830  000B7E  50AE               	movf	4014,w,c	;volatile
   831  000B80  0012               	return	
   832  000B82                     __end_of_UART_Read:
   833                           	opt stack 0
   834                           tblptru	equ	0xFF8
   835                           tblptrh	equ	0xFF7
   836                           tblptrl	equ	0xFF6
   837                           tablat	equ	0xFF5
   838                           wreg	equ	0xFE8
   839                           status	equ	0xFD8
   840                           
   841 ;; *************** function _UART_Init *****************
   842 ;; Defined at:
   843 ;;		line 1 in file "UART.h"
   844 ;; Parameters:    Size  Location     Type
   845 ;;  baudrate        4   14[COMRAM] const long 
   846 ;; Auto vars:     Size  Location     Type
   847 ;;  x               2   26[COMRAM] unsigned int 
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      unsigned char 
   850 ;; Registers used:
   851 ;;		wreg, status,2, status,0, cstack
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   857 ;;      Params:         4       0       0       0       0       0       0       0       0
   858 ;;      Locals:         2       0       0       0       0       0       0       0       0
   859 ;;      Temps:          8       0       0       0       0       0       0       0       0
   860 ;;      Totals:        14       0       0       0       0       0       0       0       0
   861 ;;Total ram usage:       14 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    1
   864 ;; This function calls:
   865 ;;		___aldiv
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text8
   872  000808                     __ptext8:
   873                           	opt stack 0
   874  000808                     _UART_Init:
   875                           	opt stack 29
   876                           
   877                           ;UART.h: 2: unsigned int x;
   878                           ;UART.h: 3: x = (8000000 - baudrate * 64) / (baudrate * 64);
   879                           
   880                           ;incstack = 0
   881  000808  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
   882  00080C  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
   883  000810  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
   884  000814  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
   885  000818  0E06               	movlw	6
   886  00081A                     u265:
   887  00081A  90D8               	bcf	status,0,c
   888  00081C  3613               	rlcf	??_UART_Init,f,c
   889  00081E  3614               	rlcf	??_UART_Init+1,f,c
   890  000820  3615               	rlcf	??_UART_Init+2,f,c
   891  000822  3616               	rlcf	??_UART_Init+3,f,c
   892  000824  2EE8               	decfsz	wreg,f,c
   893  000826  D7F9               	goto	u265
   894  000828  1E13               	comf	??_UART_Init,f,c
   895  00082A  1E14               	comf	??_UART_Init+1,f,c
   896  00082C  1E15               	comf	??_UART_Init+2,f,c
   897  00082E  1E16               	comf	??_UART_Init+3,f,c
   898  000830  2A13               	incf	??_UART_Init,f,c
   899  000832  0E00               	movlw	0
   900  000834  2214               	addwfc	??_UART_Init+1,f,c
   901  000836  2215               	addwfc	??_UART_Init+2,f,c
   902  000838  2216               	addwfc	??_UART_Init+3,f,c
   903  00083A  0E00               	movlw	0
   904  00083C  2413               	addwf	??_UART_Init,w,c
   905  00083E  6E01               	movwf	___aldiv@dividend,c
   906  000840  0E12               	movlw	18
   907  000842  2014               	addwfc	??_UART_Init+1,w,c
   908  000844  6E02               	movwf	___aldiv@dividend+1,c
   909  000846  0E7A               	movlw	122
   910  000848  2015               	addwfc	??_UART_Init+2,w,c
   911  00084A  6E03               	movwf	___aldiv@dividend+2,c
   912  00084C  0E00               	movlw	0
   913  00084E  2016               	addwfc	??_UART_Init+3,w,c
   914  000850  6E04               	movwf	___aldiv@dividend+3,c
   915  000852  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
   916  000856  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
   917  00085A  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
   918  00085E  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
   919  000862  0E06               	movlw	6
   920  000864                     u275:
   921  000864  90D8               	bcf	status,0,c
   922  000866  3617               	rlcf	??_UART_Init+4,f,c
   923  000868  3618               	rlcf	??_UART_Init+5,f,c
   924  00086A  3619               	rlcf	??_UART_Init+6,f,c
   925  00086C  361A               	rlcf	??_UART_Init+7,f,c
   926  00086E  2EE8               	decfsz	wreg,f,c
   927  000870  D7F9               	goto	u275
   928  000872  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
   929  000876  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
   930  00087A  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
   931  00087E  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
   932  000882  EC9D  F004         	call	___aldiv	;wreg free
   933  000886  C001  F01B         	movff	?___aldiv,UART_Init@x
   934  00088A  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
   935                           
   936                           ;UART.h: 4: if (x > 255)
   937  00088E  041C               	decf	UART_Init@x+1,w,c
   938  000890  A0D8               	btfss	status,0,c
   939  000892  D044               	goto	l39
   940                           
   941                           ;UART.h: 5: {
   942                           ;UART.h: 6: x = (8000000 - baudrate * 16) / (baudrate * 16);
   943  000894  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
   944  000898  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
   945  00089C  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
   946  0008A0  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
   947  0008A4  0E04               	movlw	4
   948  0008A6                     u295:
   949  0008A6  90D8               	bcf	status,0,c
   950  0008A8  3613               	rlcf	??_UART_Init,f,c
   951  0008AA  3614               	rlcf	??_UART_Init+1,f,c
   952  0008AC  3615               	rlcf	??_UART_Init+2,f,c
   953  0008AE  3616               	rlcf	??_UART_Init+3,f,c
   954  0008B0  2EE8               	decfsz	wreg,f,c
   955  0008B2  D7F9               	goto	u295
   956  0008B4  1E13               	comf	??_UART_Init,f,c
   957  0008B6  1E14               	comf	??_UART_Init+1,f,c
   958  0008B8  1E15               	comf	??_UART_Init+2,f,c
   959  0008BA  1E16               	comf	??_UART_Init+3,f,c
   960  0008BC  2A13               	incf	??_UART_Init,f,c
   961  0008BE  0E00               	movlw	0
   962  0008C0  2214               	addwfc	??_UART_Init+1,f,c
   963  0008C2  2215               	addwfc	??_UART_Init+2,f,c
   964  0008C4  2216               	addwfc	??_UART_Init+3,f,c
   965  0008C6  0E00               	movlw	0
   966  0008C8  2413               	addwf	??_UART_Init,w,c
   967  0008CA  6E01               	movwf	___aldiv@dividend,c
   968  0008CC  0E12               	movlw	18
   969  0008CE  2014               	addwfc	??_UART_Init+1,w,c
   970  0008D0  6E02               	movwf	___aldiv@dividend+1,c
   971  0008D2  0E7A               	movlw	122
   972  0008D4  2015               	addwfc	??_UART_Init+2,w,c
   973  0008D6  6E03               	movwf	___aldiv@dividend+2,c
   974  0008D8  0E00               	movlw	0
   975  0008DA  2016               	addwfc	??_UART_Init+3,w,c
   976  0008DC  6E04               	movwf	___aldiv@dividend+3,c
   977  0008DE  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
   978  0008E2  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
   979  0008E6  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
   980  0008EA  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
   981  0008EE  0E04               	movlw	4
   982  0008F0                     u305:
   983  0008F0  90D8               	bcf	status,0,c
   984  0008F2  3617               	rlcf	??_UART_Init+4,f,c
   985  0008F4  3618               	rlcf	??_UART_Init+5,f,c
   986  0008F6  3619               	rlcf	??_UART_Init+6,f,c
   987  0008F8  361A               	rlcf	??_UART_Init+7,f,c
   988  0008FA  2EE8               	decfsz	wreg,f,c
   989  0008FC  D7F9               	goto	u305
   990  0008FE  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
   991  000902  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
   992  000906  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
   993  00090A  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
   994  00090E  EC9D  F004         	call	___aldiv	;wreg free
   995  000912  C001  F01B         	movff	?___aldiv,UART_Init@x
   996  000916  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
   997                           
   998                           ;UART.h: 7: BRGH = 1;
   999  00091A  84AC               	bsf	4012,2,c	;volatile
  1000  00091C                     l39:
  1001                           
  1002                           ;UART.h: 8: }
  1003                           ;UART.h: 9: if (x < 256) {
  1004  00091C  041C               	decf	UART_Init@x+1,w,c
  1005  00091E  B0D8               	btfsc	status,0,c
  1006  000920  D00A               	goto	l40
  1007                           
  1008                           ;UART.h: 10: SPBRG = x;
  1009  000922  C01B  FFAF         	movff	UART_Init@x,4015	;volatile
  1010                           
  1011                           ;UART.h: 11: SYNC = 0;
  1012  000926  98AC               	bcf	4012,4,c	;volatile
  1013                           
  1014                           ;UART.h: 12: SPEN = 1;
  1015  000928  8EAB               	bsf	4011,7,c	;volatile
  1016                           
  1017                           ;UART.h: 13: TRISC7 = 1;
  1018  00092A  8E94               	bsf	3988,7,c	;volatile
  1019                           
  1020                           ;UART.h: 14: TRISC6 = 1;
  1021  00092C  8C94               	bsf	3988,6,c	;volatile
  1022                           
  1023                           ;UART.h: 15: CREN = 1;
  1024  00092E  88AB               	bsf	4011,4,c	;volatile
  1025                           
  1026                           ;UART.h: 16: TXEN = 1;
  1027  000930  8AAC               	bsf	4012,5,c	;volatile
  1028                           
  1029                           ;UART.h: 17: return 1;
  1030  000932  0E01               	movlw	1
  1031  000934  0012               	return	
  1032  000936                     l40:
  1033                           
  1034                           ;UART.h: 18: }
  1035                           ;UART.h: 19: return 0;
  1036  000936  0E00               	movlw	0
  1037  000938  0012               	return	
  1038  00093A                     __end_of_UART_Init:
  1039                           	opt stack 0
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           wreg	equ	0xFE8
  1045                           status	equ	0xFD8
  1046                           
  1047 ;; *************** function ___aldiv *****************
  1048 ;; Defined at:
  1049 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;  dividend        4    0[COMRAM] long 
  1052 ;;  divisor         4    4[COMRAM] long 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  quotient        4   10[COMRAM] long 
  1055 ;;  sign            1    9[COMRAM] unsigned char 
  1056 ;;  counter         1    8[COMRAM] unsigned char 
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  4    0[COMRAM] long 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2, status,0
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1066 ;;      Params:         8       0       0       0       0       0       0       0       0
  1067 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1069 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1070 ;;Total ram usage:       14 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_UART_Init
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text9
  1080  00093A                     __ptext9:
  1081                           	opt stack 0
  1082  00093A                     ___aldiv:
  1083                           	opt stack 29
  1084                           
  1085                           ;incstack = 0
  1086  00093A  0E00               	movlw	0
  1087  00093C  6E0A               	movwf	___aldiv@sign,c
  1088  00093E  AE08               	btfss	___aldiv@divisor+3,7,c
  1089  000940  D00A               	goto	l163
  1090  000942  1E08               	comf	___aldiv@divisor+3,f,c
  1091  000944  1E07               	comf	___aldiv@divisor+2,f,c
  1092  000946  1E06               	comf	___aldiv@divisor+1,f,c
  1093  000948  6C05               	negf	___aldiv@divisor,c
  1094  00094A  0E00               	movlw	0
  1095  00094C  2206               	addwfc	___aldiv@divisor+1,f,c
  1096  00094E  2207               	addwfc	___aldiv@divisor+2,f,c
  1097  000950  2208               	addwfc	___aldiv@divisor+3,f,c
  1098  000952  0E01               	movlw	1
  1099  000954  6E0A               	movwf	___aldiv@sign,c
  1100  000956                     l163:
  1101  000956  AE04               	btfss	___aldiv@dividend+3,7,c
  1102  000958  D00A               	goto	l164
  1103  00095A  1E04               	comf	___aldiv@dividend+3,f,c
  1104  00095C  1E03               	comf	___aldiv@dividend+2,f,c
  1105  00095E  1E02               	comf	___aldiv@dividend+1,f,c
  1106  000960  6C01               	negf	___aldiv@dividend,c
  1107  000962  0E00               	movlw	0
  1108  000964  2202               	addwfc	___aldiv@dividend+1,f,c
  1109  000966  2203               	addwfc	___aldiv@dividend+2,f,c
  1110  000968  2204               	addwfc	___aldiv@dividend+3,f,c
  1111  00096A  0E01               	movlw	1
  1112  00096C  1A0A               	xorwf	___aldiv@sign,f,c
  1113  00096E                     l164:
  1114  00096E  0E00               	movlw	0
  1115  000970  6E0B               	movwf	___aldiv@quotient,c
  1116  000972  0E00               	movlw	0
  1117  000974  6E0C               	movwf	___aldiv@quotient+1,c
  1118  000976  0E00               	movlw	0
  1119  000978  6E0D               	movwf	___aldiv@quotient+2,c
  1120  00097A  0E00               	movlw	0
  1121  00097C  6E0E               	movwf	___aldiv@quotient+3,c
  1122  00097E  5005               	movf	___aldiv@divisor,w,c
  1123  000980  1006               	iorwf	___aldiv@divisor+1,w,c
  1124  000982  1007               	iorwf	___aldiv@divisor+2,w,c
  1125  000984  1008               	iorwf	___aldiv@divisor+3,w,c
  1126  000986  B4D8               	btfsc	status,2,c
  1127  000988  D02A               	goto	l171
  1128  00098A  0E01               	movlw	1
  1129  00098C  6E09               	movwf	___aldiv@counter,c
  1130  00098E  D006               	goto	l166
  1131  000990  90D8               	bcf	status,0,c
  1132  000992  3605               	rlcf	___aldiv@divisor,f,c
  1133  000994  3606               	rlcf	___aldiv@divisor+1,f,c
  1134  000996  3607               	rlcf	___aldiv@divisor+2,f,c
  1135  000998  3608               	rlcf	___aldiv@divisor+3,f,c
  1136  00099A  2A09               	incf	___aldiv@counter,f,c
  1137  00099C                     l166:
  1138  00099C  AE08               	btfss	___aldiv@divisor+3,7,c
  1139  00099E  D7F8               	goto	l167
  1140  0009A0                     u230:
  1141  0009A0  90D8               	bcf	status,0,c
  1142  0009A2  360B               	rlcf	___aldiv@quotient,f,c
  1143  0009A4  360C               	rlcf	___aldiv@quotient+1,f,c
  1144  0009A6  360D               	rlcf	___aldiv@quotient+2,f,c
  1145  0009A8  360E               	rlcf	___aldiv@quotient+3,f,c
  1146  0009AA  5005               	movf	___aldiv@divisor,w,c
  1147  0009AC  5C01               	subwf	___aldiv@dividend,w,c
  1148  0009AE  5006               	movf	___aldiv@divisor+1,w,c
  1149  0009B0  5802               	subwfb	___aldiv@dividend+1,w,c
  1150  0009B2  5007               	movf	___aldiv@divisor+2,w,c
  1151  0009B4  5803               	subwfb	___aldiv@dividend+2,w,c
  1152  0009B6  5008               	movf	___aldiv@divisor+3,w,c
  1153  0009B8  5804               	subwfb	___aldiv@dividend+3,w,c
  1154  0009BA  A0D8               	btfss	status,0,c
  1155  0009BC  D009               	goto	l170
  1156  0009BE  5005               	movf	___aldiv@divisor,w,c
  1157  0009C0  5E01               	subwf	___aldiv@dividend,f,c
  1158  0009C2  5006               	movf	___aldiv@divisor+1,w,c
  1159  0009C4  5A02               	subwfb	___aldiv@dividend+1,f,c
  1160  0009C6  5007               	movf	___aldiv@divisor+2,w,c
  1161  0009C8  5A03               	subwfb	___aldiv@dividend+2,f,c
  1162  0009CA  5008               	movf	___aldiv@divisor+3,w,c
  1163  0009CC  5A04               	subwfb	___aldiv@dividend+3,f,c
  1164  0009CE  800B               	bsf	___aldiv@quotient,0,c
  1165  0009D0                     l170:
  1166  0009D0  90D8               	bcf	status,0,c
  1167  0009D2  3208               	rrcf	___aldiv@divisor+3,f,c
  1168  0009D4  3207               	rrcf	___aldiv@divisor+2,f,c
  1169  0009D6  3206               	rrcf	___aldiv@divisor+1,f,c
  1170  0009D8  3205               	rrcf	___aldiv@divisor,f,c
  1171  0009DA  2E09               	decfsz	___aldiv@counter,f,c
  1172  0009DC  D7E1               	goto	u230
  1173  0009DE                     l171:
  1174  0009DE  500A               	movf	___aldiv@sign,w,c
  1175  0009E0  B4D8               	btfsc	status,2,c
  1176  0009E2  D008               	goto	l172
  1177  0009E4  1E0E               	comf	___aldiv@quotient+3,f,c
  1178  0009E6  1E0D               	comf	___aldiv@quotient+2,f,c
  1179  0009E8  1E0C               	comf	___aldiv@quotient+1,f,c
  1180  0009EA  6C0B               	negf	___aldiv@quotient,c
  1181  0009EC  0E00               	movlw	0
  1182  0009EE  220C               	addwfc	___aldiv@quotient+1,f,c
  1183  0009F0  220D               	addwfc	___aldiv@quotient+2,f,c
  1184  0009F2  220E               	addwfc	___aldiv@quotient+3,f,c
  1185  0009F4                     l172:
  1186  0009F4  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  1187  0009F8  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  1188  0009FC  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  1189  000A00  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  1190  000A04  0012               	return	
  1191  000A06                     __end_of___aldiv:
  1192                           	opt stack 0
  1193                           tblptru	equ	0xFF8
  1194                           tblptrh	equ	0xFF7
  1195                           tblptrl	equ	0xFF6
  1196                           tablat	equ	0xFF5
  1197                           wreg	equ	0xFE8
  1198                           status	equ	0xFD8
  1199                           
  1200 ;; *************** function _UART_Data_Ready *****************
  1201 ;; Defined at:
  1202 ;;		line 37 in file "UART.h"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;		None
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      unsigned char 
  1209 ;; Registers used:
  1210 ;;		wreg
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1216 ;;      Params:         0       0       0       0       0       0       0       0       0
  1217 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1218 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1219 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1220 ;;Total ram usage:        0 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; This function calls:
  1223 ;;		Nothing
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text10
  1230  000B82                     __ptext10:
  1231                           	opt stack 0
  1232  000B82                     _UART_Data_Ready:
  1233                           	opt stack 30
  1234                           
  1235                           ;UART.h: 38: return RCIF;
  1236                           
  1237                           ;incstack = 0
  1238  000B82  0E00               	movlw	0
  1239  000B84  BA9E               	btfsc	3998,5,c	;volatile
  1240  000B86  0E01               	movlw	1
  1241  000B88  0012               	return	
  1242  000B8A                     __end_of_UART_Data_Ready:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           wreg	equ	0xFE8
  1249                           status	equ	0xFD8
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           wreg	equ	0xFE8
  1255                           status	equ	0xFD8
  1256                           
  1257                           	psect	rparam
  1258  0000                     tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           wreg	equ	0xFE8
  1263                           status	equ	0xFD8


Data Sizes:
    Strings     6
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     31      31
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcdtext@t	PTR unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_UART_Init
    _lcdtext->_lcdwrite
    _lcdsetCursor->_lcdcmd
    _lcdinitialize->_lcdcmd
    _lcdclear->_lcdcmd
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1137
                                             28 COMRAM     3     3      0
                    _UART_Data_Ready
                          _UART_Init
                          _UART_Read
                           _lcdclear
                      _lcdinitialize
                       _lcdsetCursor
                            _lcdtext
                           _lcdwrite
 ---------------------------------------------------------------------------------
 (1) _lcdtext                                              6     4      2     181
                                              2 COMRAM     6     4      2
                           _lcdwrite
 ---------------------------------------------------------------------------------
 (1) _lcdwrite                                             2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcdsetCursor                                         2     2      0      30
                                              2 COMRAM     2     2      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (1) _lcdinitialize                                        1     1      0      15
                                              2 COMRAM     1     1      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (1) _lcdclear                                             1     1      0      15
                                              2 COMRAM     1     1      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (2) _lcdcmd                                               2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           14    10      4     836
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Data_Ready
   _UART_Init
     ___aldiv
   _UART_Read
   _lcdclear
     _lcdcmd
   _lcdinitialize
     _lcdcmd
   _lcdsetCursor
     _lcdcmd
   _lcdtext
     _lcdwrite
   _lcdwrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     1F      1F       1       32.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Nov 09 10:07:07 2017

                      l40 0936                        l39 091C                        l86 0AB8  
                      l87 0A98                        l97 0A3C                        l98 0A56  
             __CFG_BORV$3 000000              __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000  
            __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000                       l100 0A7E  
                     l101 0A68                       l103 0A6E                       l104 0A76  
                     l170 09D0                       l171 09DE                       l163 0956  
                     l172 09F4                       l164 096E                       l166 099C  
                     l167 0990              __CFG_CPB$OFF 000000                       u230 09A0  
                     u305 08F0                       u407 0B2E                       u265 081A  
            __CFG_CPD$OFF 000000                       u275 0864                       u357 0A46  
                     u295 08A6                       u367 0B10                       u377 0B4C  
                     u387 0ADE                       u397 0B64              __CFG_BOR$OFF 000000  
                     wreg 000FE8             _lcdinitialize 0AD8              __CFG_LVP$OFF 000000  
            __CFG_WDT$OFF 000000                      STR_1 0801                      _BRGH 007D62  
                    _CREN 007D5C              lcdcmd@cmdout 0002                      _LATB 000F8A  
                    _RCIF 007CF5                      _SPEN 007D5F              __CFG_WDTPS$1 000000  
                    _TRMT 007D61                      _TXEN 007D65                      _SYNC 007D64  
                    _main 0A06                      start 0000             __CFG_IESO$OFF 000000  
           ?_lcdsetCursor 0001              ___param_bank 000000             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000           __end_of___aldiv 0A06                     ?_main 0001  
                   _RCREG 000FAE                     _SPBRG 000FAF             __CFG_USBDIV$1 000000  
                   _TRISB 000F93            ?_lcdinitialize 0001                     _TXREG 000FAD  
           __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
           __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000  
          __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000  
          __CFG_EBTR3$OFF 000000        __size_of_UART_Init 0132        __size_of_UART_Read 0008  
           __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000  
          __CFG_EBTRB$OFF 000000           __end_of_lcdtext 0AD8                     main@c 001F  
                   tablat 000FF5                     status 000FD8            __CFG_ICPRT$OFF 000000  
          ??_lcdsetCursor 0003            __CFG_MCLRE$OFF 000000           __initialization 0B70  
            __end_of_main 0A8E                    ??_main 001D             __activetblptr 000002  
                  _OSCCON 000FD3                    _TRISC6 007CA6                    _TRISC7 007CA7  
          __CFG_VREGEN$ON 000000            __CFG_XINST$OFF 000000         __end_of_UART_Init 093A  
       __end_of_UART_Read 0B82          __end_of_lcdclear 0B70                 ??___aldiv 0009  
          __CFG_STVREN$ON 000000          __end_of_lcdwrite 0B1E                    _lcdcmd 0B1E  
         ??_lcdinitialize 0003                 ??_lcdtext 0005              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 0B70           __CFG_PBADEN$OFF 000000  
       lcdsetCursor@value 0004             ___rparam_used 000001            __pcstackCOMRAM 0001  
    __end_of_lcdsetCursor 0B58           lcdwrite@dataout 0002  __size_of_UART_Data_Ready 0008  
                 ?_lcdcmd 0001                 ?_lcdclear 0001                 ?_lcdwrite 0001  
                 __Hparam 0000                   __Lparam 0000                   ___aldiv 093A  
            __psmallconst 0800           __size_of_lcdcmd 001E                   __pcinit 0B70  
                 __ramtop 0800                   __ptext0 0A06                   __ptext1 0A8E  
                 __ptext2 0B00                   __ptext3 0B3C                   __ptext4 0AD8  
                 __ptext5 0B58                   __ptext6 0B1E                   __ptext7 0B7A  
                 __ptext8 0808                   __ptext9 093A                   _lcdtext 0A8E  
        ___aldiv@dividend 0001                ??_lcdclear 0003      end_of_initialization 0B70  
              ??_lcdwrite 0001             __Lmediumconst 0000          ___aldiv@quotient 000B  
       ??_UART_Data_Ready 0001     __size_of_lcdsetCursor 001C                 _UART_Init 0808  
               _UART_Read 0B7A                 _TRISDbits 000F95              _lcdsetCursor 0B3C  
              ?_UART_Init 000F                ?_UART_Read 0001            __end_of_lcdcmd 0B3C  
   __end_of_lcdinitialize 0B00       start_initialization 0B70                  ??_lcdcmd 0001  
        __CFG_LPT1OSC$OFF 000000         __size_of_lcdclear 0018         __size_of_lcdwrite 001E  
                ?___aldiv 0001               ??_UART_Init 0013               ??_UART_Read 0001  
                ?_lcdtext 0003               __smallconst 0800                UART_Init@x 001B  
         ___aldiv@divisor 0005           ___aldiv@counter 0009           _UART_Data_Ready 0B82  
                _LATDbits 000F8C         UART_Init@baudrate 000F                  __Hrparam 0000  
                __Lrparam 0000          __size_of___aldiv 00CC          __size_of_lcdtext 004A  
                __ptext10 0B82   __end_of_UART_Data_Ready 0B8A                  _lcdclear 0B58  
                _lcdwrite 0B00             __size_of_main 0088     __CFG_CPUDIV$OSC1_PLL2 000000  
                lcdtext@i 0007                  lcdtext@t 0003    __size_of_lcdinitialize 0028  
     __CFG_FOSC$INTOSC_EC 000000              ___aldiv@sign 000A          ?_UART_Data_Ready 0001  
