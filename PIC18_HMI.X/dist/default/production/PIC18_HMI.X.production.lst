

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 05 18:22:04 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43  0000                     
    44                           ; Version 1.44
    45                           ; Generated 14/09/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4550 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	mediumconst
    80  007EB6                     __pmediumconst:
    81                           	opt stack 0
    82  007EB6  00                 	db	0
    83  007EB7                     _dpowers:
    84                           	opt stack 0
    85  007EB7  0001               	dw	1
    86  007EB9  000A               	dw	10
    87  007EBB  0064               	dw	100
    88  007EBD  03E8               	dw	1000
    89  007EBF  2710               	dw	10000
    90  007EC1                     __end_of_dpowers:
    91                           	opt stack 0
    92  0000                     _TRISDbits	set	3989
    93  0000                     _OSCCON	set	4051
    94  0000                     _LATDbits	set	3980
    95  0000                     _PORTBbits	set	3969
    96  0000                     _TRISB	set	3987
    97  0000                     _LATB	set	3978
    98  0000                     _RCREG	set	4014
    99  0000                     _TXREG	set	4013
   100  0000                     _SPBRG	set	4015
   101  0000                     _LATB4	set	31828
   102  0000                     _LATB5	set	31829
   103  0000                     _LATB6	set	31830
   104  0000                     _LATB7	set	31831
   105  0000                     _RCIF	set	31989
   106  0000                     _TRMT	set	32097
   107  0000                     _TXEN	set	32101
   108  0000                     _CREN	set	32092
   109  0000                     _TRISC6	set	31910
   110  0000                     _TRISC7	set	31911
   111  0000                     _SPEN	set	32095
   112  0000                     _SYNC	set	32100
   113  0000                     _BRGH	set	32098
   114  007EC1                     STR_35:
   115  007EC1  20                 	db	32
   116  007EC2  20                 	db	32
   117  007EC3  20                 	db	32
   118  007EC4  31                 	db	49	;'1'
   119  007EC5  29                 	db	41
   120  007EC6  54                 	db	84	;'T'
   121  007EC7  72                 	db	114	;'r'
   122  007EC8  61                 	db	97	;'a'
   123  007EC9  62                 	db	98	;'b'
   124  007ECA  61                 	db	97	;'a'
   125  007ECB  6A                 	db	106	;'j'
   126  007ECC  6F                 	db	111	;'o'
   127  007ECD  20                 	db	32
   128  007ECE  32                 	db	50	;'2'
   129  007ECF  29                 	db	41
   130  007ED0  43                 	db	67	;'C'
   131  007ED1  61                 	db	97	;'a'
   132  007ED2  6C                 	db	108	;'l'
   133  007ED3  69                 	db	105	;'i'
   134  007ED4  62                 	db	98	;'b'
   135  007ED5  72                 	db	114	;'r'
   136  007ED6  61                 	db	97	;'a'
   137  007ED7  63                 	db	99	;'c'
   138  007ED8  69                 	db	105	;'i'
   139  007ED9  6F                 	db	111	;'o'
   140  007EDA  6E                 	db	110	;'n'
   141  007EDB  00                 	db	0
   142  007EDC                     STR_28:
   143  007EDC  4D                 	db	77	;'M'
   144  007EDD  6F                 	db	111	;'o'
   145  007EDE  76                 	db	118	;'v'
   146  007EDF  69                 	db	105	;'i'
   147  007EE0  65                 	db	101	;'e'
   148  007EE1  6E                 	db	110	;'n'
   149  007EE2  64                 	db	100	;'d'
   150  007EE3  6F                 	db	111	;'o'
   151  007EE4  2E                 	db	46
   152  007EE5  2E                 	db	46
   153  007EE6  2E                 	db	46
   154  007EE7  20                 	db	32
   155  007EE8  20                 	db	32
   156  007EE9  20                 	db	32
   157  007EEA  20                 	db	32
   158  007EEB  20                 	db	32
   159  007EEC  20                 	db	32
   160  007EED  20                 	db	32
   161  007EEE  20                 	db	32
   162  007EEF  20                 	db	32
   163  007EF0  00                 	db	0
   164  007EF1                     STR_36:
   165  007EF1  45                 	db	69	;'E'
   166  007EF2  6C                 	db	108	;'l'
   167  007EF3  69                 	db	105	;'i'
   168  007EF4  6A                 	db	106	;'j'
   169  007EF5  61                 	db	97	;'a'
   170  007EF6  20                 	db	32
   171  007EF7  75                 	db	117	;'u'
   172  007EF8  6E                 	db	110	;'n'
   173  007EF9  20                 	db	32
   174  007EFA  43                 	db	67	;'C'
   175  007EFB  6F                 	db	111	;'o'
   176  007EFC  6D                 	db	109	;'m'
   177  007EFD  61                 	db	97	;'a'
   178  007EFE  6E                 	db	110	;'n'
   179  007EFF  64                 	db	100	;'d'
   180  007F00  6F                 	db	111	;'o'
   181  007F01  3A                 	db	58	;':'
   182  007F02  00                 	db	0
   183  007F03                     STR_29:
   184  007F03  4C                 	db	76	;'L'
   185  007F04  69                 	db	105	;'i'
   186  007F05  73                 	db	115	;'s'
   187  007F06  74                 	db	116	;'t'
   188  007F07  6F                 	db	111	;'o'
   189  007F08  20                 	db	32
   190  007F09  20                 	db	32
   191  007F0A  20                 	db	32
   192  007F0B  20                 	db	32
   193  007F0C  20                 	db	32
   194  007F0D  20                 	db	32
   195  007F0E  20                 	db	32
   196  007F0F  20                 	db	32
   197  007F10  20                 	db	32
   198  007F11  20                 	db	32
   199  007F12  00                 	db	0
   200  007F13                     STR_30:
   201  007F13  45                 	db	69	;'E'
   202  007F14  72                 	db	114	;'r'
   203  007F15  72                 	db	114	;'r'
   204  007F16  6F                 	db	111	;'o'
   205  007F17  72                 	db	114	;'r'
   206  007F18  21                 	db	33
   207  007F19  20                 	db	32
   208  007F1A  20                 	db	32
   209  007F1B  20                 	db	32
   210  007F1C  20                 	db	32
   211  007F1D  20                 	db	32
   212  007F1E  20                 	db	32
   213  007F1F  20                 	db	32
   214  007F20  20                 	db	32
   215  007F21  20                 	db	32
   216  007F22  00                 	db	0
   217  007F23                     STR_17:
   218  007F23  4C                 	db	76	;'L'
   219  007F24  69                 	db	105	;'i'
   220  007F25  6D                 	db	109	;'m'
   221  007F26  69                 	db	105	;'i'
   222  007F27  74                 	db	116	;'t'
   223  007F28  65                 	db	101	;'e'
   224  007F29  20                 	db	32
   225  007F2A  65                 	db	101	;'e'
   226  007F2B  78                 	db	120	;'x'
   227  007F2C  63                 	db	99	;'c'
   228  007F2D  65                 	db	101	;'e'
   229  007F2E  64                 	db	100	;'d'
   230  007F2F  69                 	db	105	;'i'
   231  007F30  64                 	db	100	;'d'
   232  007F31  6F                 	db	111	;'o'
   233  007F32  00                 	db	0
   234  007F33                     STR_8:
   235  007F33  49                 	db	73	;'I'
   236  007F34  6E                 	db	110	;'n'
   237  007F35  67                 	db	103	;'g'
   238  007F36  72                 	db	114	;'r'
   239  007F37  65                 	db	101	;'e'
   240  007F38  73                 	db	115	;'s'
   241  007F39  65                 	db	101	;'e'
   242  007F3A  20                 	db	32
   243  007F3B  4E                 	db	78	;'N'
   244  007F3C  75                 	db	117	;'u'
   245  007F3D  6D                 	db	109	;'m'
   246  007F3E  65                 	db	101	;'e'
   247  007F3F  72                 	db	114	;'r'
   248  007F40  6F                 	db	111	;'o'
   249  007F41  00                 	db	0
   250  007F42                     STR_32:
   251  007F42  53                 	db	83	;'S'
   252  007F43  69                 	db	105	;'i'
   253  007F44  67                 	db	103	;'g'
   254  007F45  75                 	db	117	;'u'
   255  007F46  69                 	db	105	;'i'
   256  007F47  65                 	db	101	;'e'
   257  007F48  6E                 	db	110	;'n'
   258  007F49  74                 	db	116	;'t'
   259  007F4A  65                 	db	101	;'e'
   260  007F4B  20                 	db	32
   261  007F4C  28                 	db	40
   262  007F4D  41                 	db	65	;'A'
   263  007F4E  29                 	db	41
   264  007F4F  00                 	db	0
   265  007F50                     STR_1:
   266  007F50  43                 	db	67	;'C'
   267  007F51  61                 	db	97	;'a'
   268  007F52  6C                 	db	108	;'l'
   269  007F53  69                 	db	105	;'i'
   270  007F54  62                 	db	98	;'b'
   271  007F55  72                 	db	114	;'r'
   272  007F56  61                 	db	97	;'a'
   273  007F57  6E                 	db	110	;'n'
   274  007F58  64                 	db	100	;'d'
   275  007F59  6F                 	db	111	;'o'
   276  007F5A  2E                 	db	46
   277  007F5B  2E                 	db	46
   278  007F5C  2E                 	db	46
   279  007F5D  00                 	db	0
   280  007F5E                     STR_39:
   281  007F5E  20                 	db	32
   282  007F5F  20                 	db	32
   283  007F60  20                 	db	32
   284  007F61  42                 	db	66	;'B'
   285  007F62  69                 	db	105	;'i'
   286  007F63  65                 	db	101	;'e'
   287  007F64  6E                 	db	110	;'n'
   288  007F65  76                 	db	118	;'v'
   289  007F66  65                 	db	101	;'e'
   290  007F67  6E                 	db	110	;'n'
   291  007F68  69                 	db	105	;'i'
   292  007F69  64                 	db	100	;'d'
   293  007F6A  6F                 	db	111	;'o'
   294  007F6B  00                 	db	0
   295  007F6C                     STR_38:
   296  007F6C  43                 	db	67	;'C'
   297  007F6D  61                 	db	97	;'a'
   298  007F6E  6C                 	db	108	;'l'
   299  007F6F  69                 	db	105	;'i'
   300  007F70  62                 	db	98	;'b'
   301  007F71  72                 	db	114	;'r'
   302  007F72  61                 	db	97	;'a'
   303  007F73  63                 	db	99	;'c'
   304  007F74  69                 	db	105	;'i'
   305  007F75  6F                 	db	111	;'o'
   306  007F76  6E                 	db	110	;'n'
   307  007F77  21                 	db	33
   308  007F78  00                 	db	0
   309  007F79                     STR_31:
   310  007F79  54                 	db	84	;'T'
   311  007F7A  65                 	db	101	;'e'
   312  007F7B  72                 	db	114	;'r'
   313  007F7C  6D                 	db	109	;'m'
   314  007F7D  69                 	db	105	;'i'
   315  007F7E  6E                 	db	110	;'n'
   316  007F7F  61                 	db	97	;'a'
   317  007F80  72                 	db	114	;'r'
   318  007F81  20                 	db	32
   319  007F82  28                 	db	40
   320  007F83  41                 	db	65	;'A'
   321  007F84  29                 	db	41
   322  007F85  00                 	db	0
   323  007F86                     STR_6:
   324  007F86  43                 	db	67	;'C'
   325  007F87  61                 	db	97	;'a'
   326  007F88  6E                 	db	110	;'n'
   327  007F89  63                 	db	99	;'c'
   328  007F8A  65                 	db	101	;'e'
   329  007F8B  6C                 	db	108	;'l'
   330  007F8C  61                 	db	97	;'a'
   331  007F8D  64                 	db	100	;'d'
   332  007F8E  6F                 	db	111	;'o'
   333  007F8F  2E                 	db	46
   334  007F90  2E                 	db	46
   335  007F91  2E                 	db	46
   336  007F92  00                 	db	0
   337  007F93                     STR_34:
   338  007F93  54                 	db	84	;'T'
   339  007F94  65                 	db	101	;'e'
   340  007F95  72                 	db	114	;'r'
   341  007F96  6D                 	db	109	;'m'
   342  007F97  69                 	db	105	;'i'
   343  007F98  6E                 	db	110	;'n'
   344  007F99  61                 	db	97	;'a'
   345  007F9A  64                 	db	100	;'d'
   346  007F9B  6F                 	db	111	;'o'
   347  007F9C  2E                 	db	46
   348  007F9D  2E                 	db	46
   349  007F9E  2E                 	db	46
   350  007F9F  00                 	db	0
   351  007FA0                     STR_16:
   352  007FA0  44                 	db	68	;'D'
   353  007FA1  69                 	db	105	;'i'
   354  007FA2  73                 	db	115	;'s'
   355  007FA3  74                 	db	116	;'t'
   356  007FA4  61                 	db	97	;'a'
   357  007FA5  6E                 	db	110	;'n'
   358  007FA6  63                 	db	99	;'c'
   359  007FA7  69                 	db	105	;'i'
   360  007FA8  61                 	db	97	;'a'
   361  007FA9  3A                 	db	58	;':'
   362  007FAA  20                 	db	32
   363  007FAB  00                 	db	0
   364  007FAC                     STR_4:
   365  007FAC  44                 	db	68	;'D'
   366  007FAD  69                 	db	105	;'i'
   367  007FAE  73                 	db	115	;'s'
   368  007FAF  74                 	db	116	;'t'
   369  007FB0  61                 	db	97	;'a'
   370  007FB1  6E                 	db	110	;'n'
   371  007FB2  63                 	db	99	;'c'
   372  007FB3  69                 	db	105	;'i'
   373  007FB4  61                 	db	97	;'a'
   374  007FB5  3A                 	db	58	;':'
   375  007FB6  00                 	db	0
   376  007FB7                     STR_9:
   377  007FB7  64                 	db	100	;'d'
   378  007FB8  65                 	db	101	;'e'
   379  007FB9  20                 	db	32
   380  007FBA  43                 	db	67	;'C'
   381  007FBB  6F                 	db	111	;'o'
   382  007FBC  72                 	db	114	;'r'
   383  007FBD  74                 	db	116	;'t'
   384  007FBE  65                 	db	101	;'e'
   385  007FBF  73                 	db	115	;'s'
   386  007FC0  3A                 	db	58	;':'
   387  007FC1  00                 	db	0
   388  007FC2                     STR_11:
   389  007FC2  43                 	db	67	;'C'
   390  007FC3  61                 	db	97	;'a'
   391  007FC4  6E                 	db	110	;'n'
   392  007FC5  63                 	db	99	;'c'
   393  007FC6  65                 	db	101	;'e'
   394  007FC7  6C                 	db	108	;'l'
   395  007FC8  61                 	db	97	;'a'
   396  007FC9  64                 	db	100	;'d'
   397  007FCA  61                 	db	97	;'a'
   398  007FCB  00                 	db	0
   399  007FCC                     STR_10:
   400  007FCC  4F                 	db	79	;'O'
   401  007FCD  70                 	db	112	;'p'
   402  007FCE  65                 	db	101	;'e'
   403  007FCF  72                 	db	114	;'r'
   404  007FD0  61                 	db	97	;'a'
   405  007FD1  63                 	db	99	;'c'
   406  007FD2  69                 	db	105	;'i'
   407  007FD3  6F                 	db	111	;'o'
   408  007FD4  6E                 	db	110	;'n'
   409  007FD5  00                 	db	0
   410  007FD6                     STR_37:
   411  007FD6  45                 	db	69	;'E'
   412  007FD7  6A                 	db	106	;'j'
   413  007FD8  65                 	db	101	;'e'
   414  007FD9  63                 	db	99	;'c'
   415  007FDA  75                 	db	117	;'u'
   416  007FDB  74                 	db	116	;'t'
   417  007FDC  61                 	db	97	;'a'
   418  007FDD  72                 	db	114	;'r'
   419  007FDE  00                 	db	0
   420  007FDF                     STR_3:
   421  007FDF  45                 	db	69	;'E'
   422  007FE0  78                 	db	120	;'x'
   423  007FE1  69                 	db	105	;'i'
   424  007FE2  74                 	db	116	;'t'
   425  007FE3  6F                 	db	111	;'o'
   426  007FE4  73                 	db	115	;'s'
   427  007FE5  61                 	db	97	;'a'
   428  007FE6  00                 	db	0
   429  007FE7                     STR_13:
   430  007FE7  43                 	db	67	;'C'
   431  007FE8  6F                 	db	111	;'o'
   432  007FE9  72                 	db	114	;'r'
   433  007FEA  74                 	db	116	;'t'
   434  007FEB  65                 	db	101	;'e'
   435  007FEC  20                 	db	32
   436  007FED  00                 	db	0
   437  007FEE                     STR_7:
   438  007FEE  45                 	db	69	;'E'
   439  007FEF  72                 	db	114	;'r'
   440  007FF0  72                 	db	114	;'r'
   441  007FF1  6F                 	db	111	;'o'
   442  007FF2  72                 	db	114	;'r'
   443  007FF3  21                 	db	33
   444  007FF4  00                 	db	0
   445  007FF5                     STR_5:
   446  007FF5  20                 	db	32
   447  007FF6  6D                 	db	109	;'m'
   448  007FF7  6D                 	db	109	;'m'
   449  007FF8  00                 	db	0
   450  007FF9                     STR_12:
   451  007FF9  25                 	db	37
   452  007FFA  64                 	db	100	;'d'
   453  007FFB  00                 	db	0
   454  007FFC                     STR_15:
   455  007FFC  2F                 	db	47
   456  007FFD  00                 	db	0
   457  0000                     
   458                           ; #config settings
   459  007FFE  00                 	db	0	; dummy byte at the end
   460  0000                     
   461                           	psect	cinit
   462  006932                     __pcinit:
   463                           	opt stack 0
   464  006932                     start_initialization:
   465                           	opt stack 0
   466  006932                     __initialization:
   467                           	opt stack 0
   468                           
   469                           ; Clear objects allocated to BANK1 (2 bytes)
   470  006932  0101               	movlb	1
   471  006934  6BA9               	clrf	(__pbssBANK1+1)& (0+255),b
   472  006936  6BA8               	clrf	__pbssBANK1& (0+255),b
   473                           
   474                           ; Clear objects allocated to COMRAM (2 bytes)
   475  006938  6A40               	clrf	(__pbssCOMRAM+1)& (0+255),c
   476  00693A  6A3F               	clrf	__pbssCOMRAM& (0+255),c
   477  00693C                     end_of_initialization:
   478                           	opt stack 0
   479  00693C                     __end_of__initialization:
   480                           	opt stack 0
   481  00693C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   482  00693E  6EF8               	movwf	tblptru,c
   483  006940  0100               	movlb	0
   484  006942  EF86  F035         	goto	_main	;jump to C main() function
   485                           tblptru	equ	0xFF8
   486                           
   487                           	psect	bssCOMRAM
   488  00003F                     __pbssCOMRAM:
   489                           	opt stack 0
   490  00003F                     _errno:
   491                           	opt stack 0
   492  00003F                     	ds	2
   493                           tblptru	equ	0xFF8
   494                           
   495                           	psect	bssBANK1
   496  0001A8                     __pbssBANK1:
   497                           	opt stack 0
   498  0001A8                     _steps:
   499                           	opt stack 0
   500  0001A8                     	ds	2
   501                           tblptru	equ	0xFF8
   502                           
   503                           	psect	cstackBANK1
   504  000100                     __pcstackBANK1:
   505                           	opt stack 0
   506  000100                     trabajo@distancias:
   507                           	opt stack 0
   508                           
   509                           ; 100 bytes @ 0x0
   510  000100                     	ds	100
   511  000164                     trabajo@cutx:
   512                           	opt stack 0
   513                           
   514                           ; 20 bytes @ 0x64
   515  000164                     	ds	20
   516  000178                     trabajo@outx:
   517                           	opt stack 0
   518                           
   519                           ; 20 bytes @ 0x78
   520  000178                     	ds	20
   521  00018C                     trabajo@mx:
   522                           	opt stack 0
   523                           
   524                           ; 20 bytes @ 0x8C
   525  00018C                     	ds	20
   526  0001A0                     trabajo@i:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0xA0
   530  0001A0                     	ds	2
   531  0001A2                     trabajo@m_281:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0xA2
   535  0001A2                     	ds	2
   536  0001A4                     trabajo@cuts:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0xA4
   540  0001A4                     	ds	1
   541  0001A5                     trabajo@m:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0xA5
   545  0001A5                     	ds	2
   546  0001A7                     trabajo@num:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0xA7
   550  0001A7                     	ds	1
   551                           tblptru	equ	0xFF8
   552                           
   553                           	psect	cstackCOMRAM
   554  000001                     __pcstackCOMRAM:
   555                           	opt stack 0
   556  000001                     ??_leer_teclado:
   557  000001                     ??_lcdcmd:
   558  000001                     ??_lcdwrite:
   559  000001                     ?___wmul:
   560                           	opt stack 0
   561  000001                     ?___awdiv:
   562                           	opt stack 0
   563  000001                     ?___lwdiv:
   564                           	opt stack 0
   565  000001                     ?___ftpack:
   566                           	opt stack 0
   567  000001                     ?___aldiv:
   568                           	opt stack 0
   569  000001                     ?___fttol:
   570                           	opt stack 0
   571  000001                     UART_Write@data:
   572                           	opt stack 0
   573  000001                     ___lbdiv@divisor:
   574                           	opt stack 0
   575  000001                     ___wmul@multiplier:
   576                           	opt stack 0
   577  000001                     ___awdiv@dividend:
   578                           	opt stack 0
   579  000001                     ___lwdiv@dividend:
   580                           	opt stack 0
   581  000001                     ___ftpack@arg:
   582                           	opt stack 0
   583  000001                     ___fttol@f1:
   584                           	opt stack 0
   585  000001                     frexp@value:
   586                           	opt stack 0
   587  000001                     ___aldiv@dividend:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0x0
   591  000001                     	ds	1
   592  000002                     lcdcmd@cmdout:
   593                           	opt stack 0
   594  000002                     lcdwrite@dataout:
   595                           	opt stack 0
   596  000002                     ___lbdiv@dividend:
   597                           	opt stack 0
   598  000002                     leer_teclado@j:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x1
   602  000002                     	ds	1
   603  000003                     ??_lcdinitialize:
   604  000003                     ??_lcdclear:
   605  000003                     ??_lcdsetCursor:
   606  000003                     ??_lcdshiftCursor:
   607  000003                     ___lbdiv@counter:
   608                           	opt stack 0
   609  000003                     lcdtext@t:
   610                           	opt stack 0
   611  000003                     ___wmul@multiplicand:
   612                           	opt stack 0
   613  000003                     ___awdiv@divisor:
   614                           	opt stack 0
   615  000003                     ___lwdiv@divisor:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x2
   619  000003                     	ds	1
   620  000004                     leer_teclado@tecla:
   621                           	opt stack 0
   622  000004                     lcdsetCursor@value:
   623                           	opt stack 0
   624  000004                     lcdshiftCursor@value:
   625                           	opt stack 0
   626  000004                     ___ftpack@exp:
   627                           	opt stack 0
   628  000004                     ___lbdiv@quotient:
   629                           	opt stack 0
   630  000004                     frexp@eptr:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x3
   634  000004                     	ds	1
   635  000005                     ??_lcdtext:
   636  000005                     ??___fttol:
   637  000005                     ___awdiv@counter:
   638                           	opt stack 0
   639  000005                     ___ftpack@sign:
   640                           	opt stack 0
   641  000005                     ___wmul@product:
   642                           	opt stack 0
   643  000005                     ___lwdiv@quotient:
   644                           	opt stack 0
   645  000005                     ___aldiv@divisor:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0x4
   649  000005                     	ds	1
   650  000006                     ??___ftpack:
   651  000006                     ??_frexp:
   652  000006                     ___awdiv@sign:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x5
   656  000006                     	ds	1
   657  000007                     ___lwdiv@counter:
   658                           	opt stack 0
   659  000007                     lcdtext@i:
   660                           	opt stack 0
   661  000007                     ___awdiv@quotient:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x6
   665  000007                     	ds	1
   666  000008                     ?___lwmod:
   667                           	opt stack 0
   668  000008                     ___lwmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x7
   672  000008                     	ds	1
   673  000009                     ?_calibracion:
   674                           	opt stack 0
   675  000009                     ?___awtoft:
   676                           	opt stack 0
   677  000009                     ?___lbtoft:
   678                           	opt stack 0
   679  000009                     ___aldiv@counter:
   680                           	opt stack 0
   681  000009                     calibracion@Input:
   682                           	opt stack 0
   683  000009                     ___awtoft@c:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x8
   687  000009                     	ds	1
   688  00000A                     ___aldiv@sign:
   689                           	opt stack 0
   690  00000A                     ___fttol@sign1:
   691                           	opt stack 0
   692  00000A                     ___lwmod@divisor:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x9
   696  00000A                     	ds	1
   697  00000B                     ??_calibracion:
   698  00000B                     ___aldiv@quotient:
   699                           	opt stack 0
   700  00000B                     ___fttol@lval:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0xA
   704  00000B                     	ds	1
   705  00000C                     ___awtoft@sign:
   706                           	opt stack 0
   707  00000C                     ___lbtoft@c:
   708                           	opt stack 0
   709  00000C                     ___lwmod@counter:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0xB
   713  00000C                     	ds	1
   714  00000D                     ?_sprintf:
   715                           	opt stack 0
   716  00000D                     sprintf@sp:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0xC
   720  00000D                     	ds	2
   721  00000F                     ___fttol@exp1:
   722                           	opt stack 0
   723  00000F                     sprintf@f:
   724                           	opt stack 0
   725  00000F                     UART_Init@baudrate:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0xE
   729  00000F                     	ds	1
   730  000010                     ?___altoft:
   731                           	opt stack 0
   732  000010                     calibracion@i:
   733                           	opt stack 0
   734  000010                     ___altoft@c:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0xF
   738  000010                     	ds	2
   739  000012                     calibracion@stepx:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x11
   743  000012                     	ds	1
   744  000013                     ??_sprintf:
   745  000013                     ??_UART_Init:
   746                           
   747                           ; 1 bytes @ 0x12
   748  000013                     	ds	1
   749  000014                     ??___altoft:
   750  000014                     sprintf@ap:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x13
   754  000014                     	ds	2
   755  000016                     sprintf@flag:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x15
   759  000016                     	ds	1
   760  000017                     sprintf@prec:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x16
   764  000017                     	ds	1
   765  000018                     ___altoft@exp:
   766                           	opt stack 0
   767  000018                     sprintf@val:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x17
   771  000018                     	ds	1
   772  000019                     ___altoft@sign:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x18
   776  000019                     	ds	1
   777  00001A                     sprintf@c:
   778                           	opt stack 0
   779  00001A                     trunc@x:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0x19
   783  00001A                     	ds	1
   784  00001B                     UART_Init@x:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x1A
   788  00001B                     	ds	2
   789  00001D                     trunc@i:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x1C
   793  00001D                     	ds	3
   794  000020                     trunc@expon:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x1F
   798  000020                     	ds	2
   799  000022                     ??_trabajo:
   800                           
   801                           ; 1 bytes @ 0x21
   802  000022                     	ds	4
   803  000026                     ??_menu:
   804                           
   805                           ; 1 bytes @ 0x25
   806  000026                     	ds	4
   807  00002A                     menu@stepx:
   808                           	opt stack 0
   809                           
   810                           ; 10 bytes @ 0x29
   811  00002A                     	ds	10
   812  000034                     menu@l:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x33
   816  000034                     	ds	2
   817  000036                     menu@k:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x35
   821  000036                     	ds	2
   822  000038                     menu@comandos:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x37
   826  000038                     	ds	2
   827  00003A                     menu@i:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x39
   831  00003A                     	ds	2
   832  00003C                     menu@c:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x3B
   836  00003C                     	ds	1
   837  00003D                     ??_main:
   838                           
   839                           ; 1 bytes @ 0x3C
   840  00003D                     	ds	2
   841                           tblptru	equ	0xFF8
   842                           
   843 ;;
   844 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   845 ;;
   846 ;; *************** function _main *****************
   847 ;; Defined at:
   848 ;;		line 424 in file "receptor.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;		None
   851 ;; Auto vars:     Size  Location     Type
   852 ;;		None
   853 ;; Return value:  Size  Location     Type
   854 ;;                  1    wreg      void 
   855 ;; Registers used:
   856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   857 ;; Tracked objects:
   858 ;;		On entry : 0/0
   859 ;;		On exit  : 0/0
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   862 ;;      Params:         0       0       0       0       0       0       0       0       0
   863 ;;      Locals:         0       0       0       0       0       0       0       0       0
   864 ;;      Temps:          2       0       0       0       0       0       0       0       0
   865 ;;      Totals:         2       0       0       0       0       0       0       0       0
   866 ;;Total ram usage:        2 bytes
   867 ;; Hardware stack levels required when called:    5
   868 ;; This function calls:
   869 ;;		_UART_Init
   870 ;;		_lcdinitialize
   871 ;;		_lcdtext
   872 ;;		_menu
   873 ;; This function is called by:
   874 ;;		Startup code after reset
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text0
   879  006B0C                     __ptext0:
   880                           	opt stack 0
   881  006B0C                     _main:
   882                           	opt stack 26
   883                           
   884                           ;receptor.c: 425: OSCCON = 0b01111110;
   885                           
   886                           ;incstack = 0
   887  006B0C  0E7E               	movlw	126
   888  006B0E  6ED3               	movwf	4051,c	;volatile
   889                           
   890                           ;receptor.c: 426: TRISB = 0;
   891  006B10  0E00               	movlw	0
   892  006B12  6E93               	movwf	3987,c	;volatile
   893                           
   894                           ;receptor.c: 427: TRISDbits.RD0 = 0;
   895  006B14  9095               	bcf	3989,0,c	;volatile
   896                           
   897                           ;receptor.c: 428: TRISDbits.RD1 = 0;
   898  006B16  9295               	bcf	3989,1,c	;volatile
   899                           
   900                           ;receptor.c: 429: lcdinitialize();
   901  006B18  EC00  F035         	call	_lcdinitialize	;wreg free
   902                           
   903                           ;receptor.c: 430: UART_Init(9600);
   904  006B1C  0E80               	movlw	128
   905  006B1E  6E0F               	movwf	UART_Init@baudrate,c
   906  006B20  0E25               	movlw	37
   907  006B22  6E10               	movwf	UART_Init@baudrate+1,c
   908  006B24  0E00               	movlw	0
   909  006B26  6E11               	movwf	UART_Init@baudrate+2,c
   910  006B28  0E00               	movlw	0
   911  006B2A  6E12               	movwf	UART_Init@baudrate+3,c
   912  006B2C  EC2E  F038         	call	_UART_Init	;wreg free
   913                           
   914                           ;receptor.c: 431: lcdtext("   Bienvenido");
   915  006B30  0E5E               	movlw	low STR_39
   916  006B32  6E03               	movwf	lcdtext@t,c
   917  006B34  0E7F               	movlw	high STR_39
   918  006B36  6E04               	movwf	lcdtext@t+1,c
   919  006B38  EC04  F036         	call	_lcdtext	;wreg free
   920                           
   921                           ;receptor.c: 432: _delay((unsigned long)((2000)*(8000000/4000.0)));
   922  006B3C  0E15               	movlw	21
   923  006B3E  6E3E               	movwf	(??_main+1)& (0+255),c
   924  006B40  0E4B               	movlw	75
   925  006B42  6E3D               	movwf	??_main& (0+255),c
   926  006B44  0EBE               	movlw	190
   927  006B46                     u2917:
   928  006B46  2EE8               	decfsz	wreg,f,c
   929  006B48  D7FE               	bra	u2917
   930  006B4A  2E3D               	decfsz	??_main& (0+255),f,c
   931  006B4C  D7FC               	bra	u2917
   932  006B4E  2E3E               	decfsz	(??_main+1)& (0+255),f,c
   933  006B50  D7FA               	bra	u2917
   934  006B52  D000               	nop2	
   935  006B54  ECF2  F03A         	call	_menu	;wreg free
   936  006B58  D7FD               	goto	l284
   937  006B5A                     __end_of_main:
   938                           	opt stack 0
   939                           tblptru	equ	0xFF8
   940                           wreg	equ	0xFE8
   941                           
   942 ;; *************** function _menu *****************
   943 ;; Defined at:
   944 ;;		line 381 in file "receptor.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;		None
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  k               2   53[COMRAM] int 
   949 ;;  i               2   57[COMRAM] int 
   950 ;;  stepx          10   41[COMRAM] unsigned char [10]
   951 ;;  comandos        2   55[COMRAM] PTR const unsigned char 
   952 ;;		 -> STR_35(27), 
   953 ;;  l               2   51[COMRAM] int 
   954 ;;  c               1   59[COMRAM] unsigned char 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   964 ;;      Params:         0       0       0       0       0       0       0       0       0
   965 ;;      Locals:        19       0       0       0       0       0       0       0       0
   966 ;;      Temps:          4       0       0       0       0       0       0       0       0
   967 ;;      Totals:        23       0       0       0       0       0       0       0       0
   968 ;;Total ram usage:       23 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    4
   971 ;; This function calls:
   972 ;;		___wmul
   973 ;;		_calibracion
   974 ;;		_lcdclear
   975 ;;		_lcdsetCursor
   976 ;;		_lcdtext
   977 ;;		_lcdwrite
   978 ;;		_leer_teclado
   979 ;;		_trabajo
   980 ;; This function is called by:
   981 ;;		_main
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           	psect	text1
   986  0075E4                     __ptext1:
   987                           	opt stack 0
   988  0075E4                     _menu:
   989                           	opt stack 26
   990                           
   991                           ;receptor.c: 382: const char *comandos = "   1)Trabajo 2)Calibracion";
   992                           
   993                           ;incstack = 0
   994  0075E4  0EC1               	movlw	low STR_35
   995  0075E6  6E38               	movwf	menu@comandos,c
   996  0075E8  0E7E               	movlw	high STR_35
   997  0075EA  6E39               	movwf	menu@comandos+1,c
   998                           
   999                           ;receptor.c: 383: int l;
  1000                           ;receptor.c: 384: char stepx[10];
  1001                           ;receptor.c: 385: unsigned char c = 0;
  1002  0075EC  0E00               	movlw	0
  1003  0075EE  6E3C               	movwf	menu@c,c
  1004                           
  1005                           ;receptor.c: 386: for (l = 0; comandos[l] != '\0'; l++);
  1006  0075F0  0E00               	movlw	0
  1007  0075F2  6E35               	movwf	menu@l+1,c
  1008  0075F4  0E00               	movlw	0
  1009  0075F6  6E34               	movwf	menu@l,c
  1010  0075F8  D002               	goto	l258
  1011  0075FA  4A34               	infsnz	menu@l,f,c
  1012  0075FC  2A35               	incf	menu@l+1,f,c
  1013  0075FE                     l258:
  1014  0075FE  5034               	movf	menu@l,w,c
  1015  007600  2438               	addwf	menu@comandos,w,c
  1016  007602  6E26               	movwf	??_menu& (0+255),c
  1017  007604  5035               	movf	menu@l+1,w,c
  1018  007606  2039               	addwfc	menu@comandos+1,w,c
  1019  007608  6E27               	movwf	(??_menu+1)& (0+255),c
  1020  00760A  C026  FFF6         	movff	??_menu,tblptrl
  1021  00760E  C027  FFF7         	movff	??_menu+1,tblptrh
  1022  007612                     	if	0	;tblptru may be non-zero
  1023  007612                     	endif
  1024  007612                     	if	0	;tblptru may be non-zero
  1025  007612                     	endif
  1026  007612  0008               	tblrd		*
  1027  007614  50F5               	movf	tablat,w,c
  1028  007616  0900               	iorlw	0
  1029  007618  A4D8               	btfss	status,2,c
  1030  00761A  D7EF               	goto	l259
  1031                           
  1032                           ;receptor.c: 387: lcdclear();
  1033  00761C  ECA3  F034         	call	_lcdclear	;wreg free
  1034                           
  1035                           ;receptor.c: 388: lcdtext("Elija un Comando:");
  1036  007620  0EF1               	movlw	low STR_36
  1037  007622  6E03               	movwf	lcdtext@t,c
  1038  007624  0E7E               	movlw	high STR_36
  1039  007626  6E04               	movwf	lcdtext@t+1,c
  1040  007628  EC04  F036         	call	_lcdtext	;wreg free
  1041                           
  1042                           ;receptor.c: 389: while (c == 0) {
  1043  00762C  D0A8               	goto	l277
  1044  00762E                     
  1045                           ;receptor.c: 390: for (int i = 0; comandos[i + 13] != '\0'; i++) {
  1046  00762E  0E00               	movlw	0
  1047  007630  6E3B               	movwf	menu@i+1,c
  1048  007632  0E00               	movlw	0
  1049  007634  6E3A               	movwf	menu@i,c
  1050  007636  D089               	goto	l263
  1051  007638                     
  1052                           ;receptor.c: 391: lcdsetCursor(0x40);
  1053  007638  0E40               	movlw	64
  1054  00763A  ECAF  F034         	call	_lcdsetCursor
  1055                           
  1056                           ;receptor.c: 392: lcdtext(comandos + i);
  1057  00763E  503A               	movf	menu@i,w,c
  1058  007640  2438               	addwf	menu@comandos,w,c
  1059  007642  6E03               	movwf	lcdtext@t,c
  1060  007644  503B               	movf	menu@i+1,w,c
  1061  007646  2039               	addwfc	menu@comandos+1,w,c
  1062  007648  6E04               	movwf	lcdtext@t+1,c
  1063  00764A  EC04  F036         	call	_lcdtext	;wreg free
  1064                           
  1065                           ;receptor.c: 393: lcdsetCursor(0x40 + l - i);
  1066  00764E  503A               	movf	menu@i,w,c
  1067  007650  0800               	sublw	0
  1068  007652  2434               	addwf	menu@l,w,c
  1069  007654  0F40               	addlw	64
  1070  007656  ECAF  F034         	call	_lcdsetCursor
  1071                           
  1072                           ;receptor.c: 394: lcdwrite(' ');
  1073  00765A  0E20               	movlw	32
  1074  00765C  ECCC  F034         	call	_lcdwrite
  1075                           
  1076                           ;receptor.c: 395: c = leer_teclado();
  1077  007660  EC68  F039         	call	_leer_teclado	;wreg free
  1078  007664  6E3C               	movwf	menu@c,c
  1079                           
  1080                           ;receptor.c: 396: switch (c) {
  1081  007666  D064               	goto	l265
  1082  007668                     
  1083                           ;receptor.c: 398: if (steps != 0)trabajo();
  1084  007668  0101               	movlb	1	; () banked
  1085  00766A  51A8               	movf	_steps& (0+255),w,b
  1086  00766C  11A9               	iorwf	(_steps+1)& (0+255),w,b
  1087  00766E  B4D8               	btfsc	status,2,c
  1088  007670  D003               	goto	l267
  1089                           
  1090                           ; BSR set to: 1
  1091  007672  ECC3  F03B         	call	_trabajo	;wreg free
  1092  007676  D064               	goto	l269
  1093  007678                     l267:
  1094                           
  1095                           ;receptor.c: 399: else {
  1096                           ;receptor.c: 400: lcdclear();
  1097  007678  ECA3  F034         	call	_lcdclear	;wreg free
  1098                           
  1099                           ;receptor.c: 401: lcdtext("Ejecutar");
  1100  00767C  0ED6               	movlw	low STR_37
  1101  00767E  6E03               	movwf	lcdtext@t,c
  1102  007680  0E7F               	movlw	high STR_37
  1103  007682  6E04               	movwf	lcdtext@t+1,c
  1104  007684  EC04  F036         	call	_lcdtext	;wreg free
  1105                           
  1106                           ;receptor.c: 402: lcdsetCursor(0x40);
  1107  007688  0E40               	movlw	64
  1108  00768A  ECAF  F034         	call	_lcdsetCursor
  1109                           
  1110                           ;receptor.c: 403: lcdtext("Calibracion!");
  1111  00768E  0E6C               	movlw	low STR_38
  1112  007690  6E03               	movwf	lcdtext@t,c
  1113  007692  0E7F               	movlw	high STR_38
  1114  007694  6E04               	movwf	lcdtext@t+1,c
  1115  007696  EC04  F036         	call	_lcdtext	;wreg free
  1116                           
  1117                           ;receptor.c: 404: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1118  00769A  0E15               	movlw	21
  1119  00769C  6E27               	movwf	(??_menu+1)& (0+255),c
  1120  00769E  0E4B               	movlw	75
  1121  0076A0  6E26               	movwf	??_menu& (0+255),c
  1122  0076A2  0EBE               	movlw	190
  1123  0076A4                     u2927:
  1124  0076A4  2EE8               	decfsz	wreg,f,c
  1125  0076A6  D7FE               	bra	u2927
  1126  0076A8  2E26               	decfsz	??_menu& (0+255),f,c
  1127  0076AA  D7FC               	bra	u2927
  1128  0076AC  2E27               	decfsz	(??_menu+1)& (0+255),f,c
  1129  0076AE  D7FA               	bra	u2927
  1130  0076B0  D000               	nop2	
  1131                           
  1132                           ;receptor.c: 405: }
  1133                           ;receptor.c: 406: break;
  1134  0076B2  D046               	goto	l269
  1135  0076B4                     
  1136                           ;receptor.c: 408: steps = 0;
  1137  0076B4  0E00               	movlw	0
  1138  0076B6  0101               	movlb	1	; () banked
  1139  0076B8  6FA9               	movwf	(_steps+1)& (0+255),b
  1140  0076BA  0E00               	movlw	0
  1141  0076BC  6FA8               	movwf	_steps& (0+255),b
  1142                           
  1143                           ; BSR set to: 1
  1144                           ;receptor.c: 409: *stepx = calibracion(stepx);
  1145  0076BE  0E2A               	movlw	low menu@stepx
  1146  0076C0  6E09               	movwf	calibracion@Input,c
  1147  0076C2  0E00               	movlw	high menu@stepx
  1148  0076C4  6E0A               	movwf	calibracion@Input+1,c
  1149  0076C6  EC24  F03A         	call	_calibracion	;wreg free
  1150  0076CA  5009               	movf	?_calibracion,w,c
  1151  0076CC  6E2A               	movwf	menu@stepx,c
  1152                           
  1153                           ;receptor.c: 410: for (int k = 0; stepx[k] != '\0'; k++) {
  1154  0076CE  0E00               	movlw	0
  1155  0076D0  6E37               	movwf	menu@k+1,c
  1156  0076D2  0E00               	movlw	0
  1157  0076D4  6E36               	movwf	menu@k,c
  1158  0076D6  D01F               	goto	l271
  1159  0076D8                     
  1160                           ;receptor.c: 411: steps = steps * 10 + stepx[k] - '0';
  1161  0076D8  C1A8  F001         	movff	_steps,___wmul@multiplier
  1162  0076DC  C1A9  F002         	movff	_steps+1,___wmul@multiplier+1
  1163  0076E0  0E00               	movlw	0
  1164  0076E2  6E04               	movwf	___wmul@multiplicand+1,c
  1165  0076E4  0E0A               	movlw	10
  1166  0076E6  6E03               	movwf	___wmul@multiplicand,c
  1167  0076E8  ECED  F034         	call	___wmul	;wreg free
  1168  0076EC  0E2A               	movlw	low menu@stepx
  1169  0076EE  2436               	addwf	menu@k,w,c
  1170  0076F0  6ED9               	movwf	fsr2l,c
  1171  0076F2  0E00               	movlw	high menu@stepx
  1172  0076F4  2037               	addwfc	menu@k+1,w,c
  1173  0076F6  6EDA               	movwf	fsr2h,c
  1174  0076F8  50DF               	movf	indf2,w,c
  1175  0076FA  6E26               	movwf	??_menu& (0+255),c
  1176  0076FC  5026               	movf	??_menu,w,c
  1177  0076FE  2601               	addwf	?___wmul,f,c
  1178  007700  0E00               	movlw	0
  1179  007702  2202               	addwfc	?___wmul+1,f,c
  1180  007704  0ED0               	movlw	208
  1181  007706  2401               	addwf	?___wmul,w,c
  1182  007708  0101               	movlb	1	; () banked
  1183  00770A  6FA8               	movwf	_steps& (0+255),b
  1184  00770C  0EFF               	movlw	255
  1185  00770E  2002               	addwfc	?___wmul+1,w,c
  1186  007710  6FA9               	movwf	(_steps+1)& (0+255),b
  1187                           
  1188                           ; BSR set to: 1
  1189  007712  4A36               	infsnz	menu@k,f,c
  1190  007714  2A37               	incf	menu@k+1,f,c
  1191  007716                     l271:
  1192                           
  1193                           ; BSR set to: 1
  1194  007716  0E2A               	movlw	low menu@stepx
  1195  007718  2436               	addwf	menu@k,w,c
  1196  00771A  6ED9               	movwf	fsr2l,c
  1197  00771C  0E00               	movlw	high menu@stepx
  1198  00771E  2037               	addwfc	menu@k+1,w,c
  1199  007720  6EDA               	movwf	fsr2h,c
  1200  007722  50DF               	movf	indf2,w,c
  1201  007724  B4D8               	btfsc	status,2,c
  1202  007726  D00C               	goto	l269
  1203  007728  D7D7               	goto	l272
  1204  00772A                     
  1205                           ;receptor.c: 415: c = 0;
  1206  00772A  0E00               	movlw	0
  1207  00772C  6E3C               	movwf	menu@c,c
  1208                           
  1209                           ;receptor.c: 417: }
  1210                           
  1211                           ;receptor.c: 416: break;
  1212  00772E  D008               	goto	l269
  1213  007730                     l265:
  1214  007730  503C               	movf	menu@c,w,c
  1215                           
  1216                           ; Switch size 1, requested type "space"
  1217                           ; Number of cases is 2, Range of values is 49 to 50
  1218                           ; switch strategies available:
  1219                           ; Name         Instructions Cycles
  1220                           ; simple_byte            7     4 (average)
  1221                           ;	Chosen strategy is simple_byte
  1222  007732  0A31               	xorlw	49	; case 49
  1223  007734  B4D8               	btfsc	status,2,c
  1224  007736  D798               	goto	l266
  1225  007738  0A03               	xorlw	3	; case 50
  1226  00773A  B4D8               	btfsc	status,2,c
  1227  00773C  D7BB               	goto	l270
  1228  00773E  D7F5               	goto	l274
  1229  007740                     l269:
  1230                           
  1231                           ;receptor.c: 418: if (c != 0)break;
  1232  007740  503C               	movf	menu@c,w,c
  1233  007742  A4D8               	btfss	status,2,c
  1234  007744  D019               	goto	u2860
  1235  007746  4A3A               	infsnz	menu@i,f,c
  1236  007748  2A3B               	incf	menu@i+1,f,c
  1237  00774A                     l263:
  1238  00774A  0E0D               	movlw	13
  1239  00774C  243A               	addwf	menu@i,w,c
  1240  00774E  6E26               	movwf	??_menu& (0+255),c
  1241  007750  0E00               	movlw	0
  1242  007752  203B               	addwfc	menu@i+1,w,c
  1243  007754  6E27               	movwf	(??_menu+1)& (0+255),c
  1244  007756  C038  F028         	movff	menu@comandos,??_menu+2
  1245  00775A  C039  F029         	movff	menu@comandos+1,??_menu+3
  1246  00775E  5026               	movf	??_menu,w,c
  1247  007760  2628               	addwf	??_menu+2,f,c
  1248  007762  5027               	movf	??_menu+1,w,c
  1249  007764  2229               	addwfc	??_menu+3,f,c
  1250  007766  C028  FFF6         	movff	??_menu+2,tblptrl
  1251  00776A  C029  FFF7         	movff	??_menu+3,tblptrh
  1252  00776E                     	if	0	;tblptru may be non-zero
  1253  00776E                     	endif
  1254  00776E                     	if	0	;tblptru may be non-zero
  1255  00776E                     	endif
  1256  00776E  0008               	tblrd		*
  1257  007770  50F5               	movf	tablat,w,c
  1258  007772  0900               	iorlw	0
  1259  007774  A4D8               	btfss	status,2,c
  1260  007776  D760               	goto	l264
  1261  007778                     u2860:
  1262                           
  1263                           ;receptor.c: 419: }
  1264                           ;receptor.c: 420: if (c != 0)break;
  1265  007778  503C               	movf	menu@c,w,c
  1266  00777A  A4D8               	btfss	status,2,c
  1267  00777C  0012               	return	
  1268  00777E                     l277:
  1269  00777E  503C               	movf	menu@c,w,c
  1270  007780  A4D8               	btfss	status,2,c
  1271  007782  0012               	return	
  1272  007784  D754               	goto	l262
  1273  007786                     __end_of_menu:
  1274                           	opt stack 0
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           wreg	equ	0xFE8
  1280                           indf2	equ	0xFDF
  1281                           fsr2h	equ	0xFDA
  1282                           fsr2l	equ	0xFD9
  1283                           status	equ	0xFD8
  1284                           
  1285 ;; *************** function _trabajo *****************
  1286 ;; Defined at:
  1287 ;;		line 222 in file "receptor.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;		None
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  i               2  160[BANK1 ] int 
  1292 ;;  m               2  162[BANK1 ] int 
  1293 ;;  m               2  165[BANK1 ] int 
  1294 ;;  distancias    100    0[BANK1 ] int [50]
  1295 ;;  mx             20  140[BANK1 ] unsigned char [20]
  1296 ;;  outx           20  120[BANK1 ] unsigned char [20]
  1297 ;;  cutx           20  100[BANK1 ] unsigned char [20]
  1298 ;;  num             1  167[BANK1 ] unsigned char 
  1299 ;;  cuts            1  164[BANK1 ] unsigned char 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1309 ;;      Params:         0       0       0       0       0       0       0       0       0
  1310 ;;      Locals:         0       0     168       0       0       0       0       0       0
  1311 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1312 ;;      Totals:         4       0     168       0       0       0       0       0       0
  1313 ;;Total ram usage:      172 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    3
  1316 ;; This function calls:
  1317 ;;		_UART_Data_Ready
  1318 ;;		_UART_Read
  1319 ;;		_UART_Write
  1320 ;;		___awdiv
  1321 ;;		___awtoft
  1322 ;;		___lbdiv
  1323 ;;		___lbtoft
  1324 ;;		___wmul
  1325 ;;		_lcdclear
  1326 ;;		_lcdsetCursor
  1327 ;;		_lcdshiftCursor
  1328 ;;		_lcdtext
  1329 ;;		_lcdwrite
  1330 ;;		_leer_teclado
  1331 ;;		_sprintf
  1332 ;;		_trunc
  1333 ;; This function is called by:
  1334 ;;		_menu
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text2
  1339  007786                     __ptext2:
  1340                           	opt stack 0
  1341  007786                     _trabajo:
  1342                           	opt stack 26
  1343                           
  1344                           ;receptor.c: 223: unsigned char num = 0;
  1345                           
  1346                           ;incstack = 0
  1347  007786  0E00               	movlw	0
  1348  007788  0101               	movlb	1	; () banked
  1349  00778A  6FA7               	movwf	trabajo@num& (0+255),b
  1350                           
  1351                           ;receptor.c: 224: unsigned char cuts = 0;
  1352  00778C  0E00               	movlw	0
  1353  00778E  6FA4               	movwf	trabajo@cuts& (0+255),b
  1354                           
  1355                           ; BSR set to: 1
  1356                           ;receptor.c: 225: char cutx[20];
  1357                           ;receptor.c: 226: char mx[20];
  1358                           ;receptor.c: 227: char outx[20];
  1359                           ;receptor.c: 228: int distancias[50];
  1360                           ;receptor.c: 229: lcdclear();
  1361  007790  ECA3  F034         	call	_lcdclear	;wreg free
  1362                           
  1363                           ;receptor.c: 230: lcdtext("Ingrese Numero");
  1364  007794  0E33               	movlw	low STR_8
  1365  007796  6E03               	movwf	lcdtext@t,c
  1366  007798  0E7F               	movlw	high STR_8
  1367  00779A  6E04               	movwf	lcdtext@t+1,c
  1368  00779C  EC04  F036         	call	_lcdtext	;wreg free
  1369                           
  1370                           ;receptor.c: 231: lcdsetCursor(0x40);
  1371  0077A0  0E40               	movlw	64
  1372  0077A2  ECAF  F034         	call	_lcdsetCursor
  1373                           
  1374                           ;receptor.c: 232: lcdtext("de Cortes:");
  1375  0077A6  0EB7               	movlw	low STR_9
  1376  0077A8  6E03               	movwf	lcdtext@t,c
  1377  0077AA  0E7F               	movlw	high STR_9
  1378  0077AC  6E04               	movwf	lcdtext@t+1,c
  1379  0077AE  EC04  F036         	call	_lcdtext	;wreg free
  1380                           
  1381                           ;receptor.c: 233: while (num != 'A') {
  1382  0077B2  D044               	goto	l209
  1383  0077B4                     
  1384                           ;receptor.c: 234: num = leer_teclado();
  1385  0077B4  EC68  F039         	call	_leer_teclado	;wreg free
  1386  0077B8  0101               	movlb	1	; () banked
  1387  0077BA  6FA7               	movwf	trabajo@num& (0+255),b
  1388                           
  1389                           ; BSR set to: 1
  1390                           ;receptor.c: 235: if (num >= '0' && num <= '9') {
  1391  0077BC  0E2F               	movlw	47
  1392  0077BE  65A7               	cpfsgt	trabajo@num& (0+255),b
  1393  0077C0  D015               	goto	l205
  1394                           
  1395                           ; BSR set to: 1
  1396  0077C2  0E3A               	movlw	58
  1397  0077C4  61A7               	cpfslt	trabajo@num& (0+255),b
  1398  0077C6  D012               	goto	l205
  1399                           
  1400                           ; BSR set to: 1
  1401                           ;receptor.c: 236: if (!(cuts == 0 && num == '0')) {
  1402  0077C8  51A4               	movf	trabajo@cuts& (0+255),w,b
  1403  0077CA  A4D8               	btfss	status,2,c
  1404  0077CC  D004               	goto	u2390
  1405                           
  1406                           ; BSR set to: 1
  1407  0077CE  0E30               	movlw	48
  1408  0077D0  19A7               	xorwf	trabajo@num& (0+255),w,b
  1409  0077D2  B4D8               	btfsc	status,2,c
  1410  0077D4  D00B               	goto	l205
  1411  0077D6                     u2390:
  1412                           
  1413                           ; BSR set to: 1
  1414                           ;receptor.c: 237: lcdwrite(num);
  1415                           
  1416                           ; BSR set to: 1
  1417  0077D6  51A7               	movf	trabajo@num& (0+255),w,b
  1418  0077D8  ECCC  F034         	call	_lcdwrite
  1419                           
  1420                           ;receptor.c: 238: cuts *= 10;
  1421  0077DC  0E0A               	movlw	10
  1422  0077DE  0101               	movlb	1	; () banked
  1423  0077E0  03A4               	mulwf	trabajo@cuts& (0+255),b
  1424  0077E2  50F3               	movf	prodl,w,c
  1425  0077E4  6FA4               	movwf	trabajo@cuts& (0+255),b
  1426                           
  1427                           ; BSR set to: 1
  1428                           ;receptor.c: 239: cuts += num - '0';
  1429  0077E6  51A7               	movf	trabajo@num& (0+255),w,b
  1430  0077E8  0FD0               	addlw	208
  1431  0077EA  27A4               	addwf	trabajo@cuts& (0+255),f,b
  1432  0077EC                     l205:
  1433                           
  1434                           ; BSR set to: 1
  1435                           ;receptor.c: 240: }
  1436                           ;receptor.c: 241: }
  1437                           ;receptor.c: 242: if ((num == 'C') && (cuts > 0)) {
  1438                           
  1439                           ; BSR set to: 1
  1440                           
  1441                           ; BSR set to: 1
  1442  0077EC  0E43               	movlw	67
  1443  0077EE  19A7               	xorwf	trabajo@num& (0+255),w,b
  1444  0077F0  A4D8               	btfss	status,2,c
  1445  0077F2  D01F               	goto	l208
  1446                           
  1447                           ; BSR set to: 1
  1448  0077F4  51A4               	movf	trabajo@cuts& (0+255),w,b
  1449  0077F6  B4D8               	btfsc	status,2,c
  1450  0077F8  D01C               	goto	l208
  1451                           
  1452                           ; BSR set to: 1
  1453                           ;receptor.c: 243: lcdshiftCursor('L');
  1454  0077FA  0E4C               	movlw	76
  1455  0077FC  EC14  F035         	call	_lcdshiftCursor
  1456                           
  1457                           ;receptor.c: 244: lcdwrite(' ');
  1458  007800  0E20               	movlw	32
  1459  007802  ECCC  F034         	call	_lcdwrite
  1460                           
  1461                           ;receptor.c: 245: lcdshiftCursor('L');
  1462  007806  0E4C               	movlw	76
  1463  007808  EC14  F035         	call	_lcdshiftCursor
  1464                           
  1465                           ;receptor.c: 246: cuts /= 10;
  1466  00780C  0E0A               	movlw	10
  1467  00780E  6E01               	movwf	___lbdiv@divisor,c
  1468  007810  0101               	movlb	1	; () banked
  1469  007812  51A4               	movf	trabajo@cuts& (0+255),w,b
  1470  007814  EC48  F035         	call	___lbdiv
  1471  007818  0101               	movlb	1	; () banked
  1472  00781A  6FA4               	movwf	trabajo@cuts& (0+255),b
  1473                           
  1474                           ; BSR set to: 1
  1475                           ;receptor.c: 247: trunc(cuts);
  1476  00781C  51A4               	movf	trabajo@cuts& (0+255),w,b
  1477  00781E  ECDB  F034         	call	___lbtoft
  1478  007822  C009  F01A         	movff	?___lbtoft,trunc@x
  1479  007826  C00A  F01B         	movff	?___lbtoft+1,trunc@x+1
  1480  00782A  C00B  F01C         	movff	?___lbtoft+2,trunc@x+2
  1481  00782E  ECD6  F035         	call	_trunc	;wreg free
  1482  007832                     l208:
  1483                           
  1484                           ;receptor.c: 248: }
  1485                           ;receptor.c: 249: if (num == 'B')break;
  1486  007832  0E42               	movlw	66
  1487  007834  0101               	movlb	1	; () banked
  1488  007836  19A7               	xorwf	trabajo@num& (0+255),w,b
  1489  007838  B4D8               	btfsc	status,2,c
  1490  00783A  D005               	goto	u2430
  1491  00783C                     l209:
  1492                           
  1493                           ; BSR set to: 1
  1494                           
  1495                           ; BSR set to: 1
  1496  00783C  0E41               	movlw	65
  1497  00783E  0101               	movlb	1	; () banked
  1498  007840  19A7               	xorwf	trabajo@num& (0+255),w,b
  1499  007842  A4D8               	btfss	status,2,c
  1500  007844  D7B7               	goto	l203
  1501  007846                     u2430:
  1502                           
  1503                           ; BSR set to: 1
  1504                           ;receptor.c: 250: }
  1505                           ;receptor.c: 251: if (num == 'B') {
  1506                           
  1507                           ; BSR set to: 1
  1508  007846  0E42               	movlw	66
  1509  007848  19A7               	xorwf	trabajo@num& (0+255),w,b
  1510  00784A  A4D8               	btfss	status,2,c
  1511  00784C  D01E               	goto	l211
  1512                           
  1513                           ; BSR set to: 1
  1514                           ;receptor.c: 252: lcdclear();
  1515  00784E  ECA3  F034         	call	_lcdclear	;wreg free
  1516                           
  1517                           ;receptor.c: 253: lcdtext("Operacion");
  1518  007852  0ECC               	movlw	low STR_10
  1519  007854  6E03               	movwf	lcdtext@t,c
  1520  007856  0E7F               	movlw	high STR_10
  1521  007858  6E04               	movwf	lcdtext@t+1,c
  1522  00785A  EC04  F036         	call	_lcdtext	;wreg free
  1523                           
  1524                           ;receptor.c: 254: lcdsetCursor(0x40);
  1525  00785E  0E40               	movlw	64
  1526  007860  ECAF  F034         	call	_lcdsetCursor
  1527                           
  1528                           ;receptor.c: 255: lcdtext("Cancelada");
  1529  007864  0EC2               	movlw	low STR_11
  1530  007866  6E03               	movwf	lcdtext@t,c
  1531  007868  0E7F               	movlw	high STR_11
  1532  00786A  6E04               	movwf	lcdtext@t+1,c
  1533  00786C  EC04  F036         	call	_lcdtext	;wreg free
  1534                           
  1535                           ;receptor.c: 256: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1536  007870  0E15               	movlw	21
  1537  007872  6E23               	movwf	(??_trabajo+1)& (0+255),c
  1538  007874  0E4B               	movlw	75
  1539  007876  6E22               	movwf	??_trabajo& (0+255),c
  1540  007878  0EBE               	movlw	190
  1541  00787A                     u2937:
  1542  00787A  2EE8               	decfsz	wreg,f,c
  1543  00787C  D7FE               	bra	u2937
  1544  00787E  2E22               	decfsz	??_trabajo& (0+255),f,c
  1545  007880  D7FC               	bra	u2937
  1546  007882  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  1547  007884  D7FA               	bra	u2937
  1548  007886  D000               	nop2	
  1549                           
  1550                           ;receptor.c: 257: } else {
  1551  007888  0012               	return	
  1552  00788A                     l211:
  1553                           
  1554                           ;receptor.c: 258: sprintf(cutx, "%d", cuts);
  1555  00788A  0E64               	movlw	low trabajo@cutx
  1556  00788C  6E0D               	movwf	sprintf@sp,c
  1557  00788E  0E01               	movlw	high trabajo@cutx
  1558  007890  6E0E               	movwf	sprintf@sp+1,c
  1559  007892  0EF9               	movlw	low STR_12
  1560  007894  6E0F               	movwf	sprintf@f,c
  1561  007896  0E7F               	movlw	high STR_12
  1562  007898  6E10               	movwf	sprintf@f+1,c
  1563  00789A  C1A4  F011         	movff	trabajo@cuts,?_sprintf+4
  1564  00789E  6A12               	clrf	?_sprintf+5,c
  1565  0078A0  ECC4  F038         	call	_sprintf	;wreg free
  1566                           
  1567                           ;receptor.c: 259: for (int m = 0; m < cuts; m++) {
  1568  0078A4  0E00               	movlw	0
  1569  0078A6  0101               	movlb	1	; () banked
  1570  0078A8  6FA6               	movwf	(trabajo@m+1)& (0+255),b
  1571  0078AA  0E00               	movlw	0
  1572  0078AC  6FA5               	movwf	trabajo@m& (0+255),b
  1573  0078AE  D16B               	goto	l213
  1574  0078B0                     
  1575                           ; BSR set to: 1
  1576                           ;receptor.c: 260: distancias[m] = 0;
  1577                           
  1578                           ; BSR set to: 1
  1579  0078B0  90D8               	bcf	status,0,c
  1580  0078B2  35A5               	rlcf	trabajo@m& (0+255),w,b
  1581  0078B4  6ED9               	movwf	fsr2l,c
  1582  0078B6  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1583  0078B8  6EDA               	movwf	fsr2h,c
  1584  0078BA  0E00               	movlw	low trabajo@distancias
  1585  0078BC  26D9               	addwf	fsr2l,f,c
  1586  0078BE  0E01               	movlw	high trabajo@distancias
  1587  0078C0  22DA               	addwfc	fsr2h,f,c
  1588  0078C2  0E00               	movlw	0
  1589  0078C4  6EDE               	movwf	postinc2,c
  1590  0078C6  0E00               	movlw	0
  1591  0078C8  6EDD               	movwf	postdec2,c
  1592                           
  1593                           ; BSR set to: 1
  1594                           ;receptor.c: 261: num = 0;
  1595  0078CA  0E00               	movlw	0
  1596  0078CC  6FA7               	movwf	trabajo@num& (0+255),b
  1597                           
  1598                           ; BSR set to: 1
  1599                           ;receptor.c: 262: lcdclear();
  1600  0078CE  ECA3  F034         	call	_lcdclear	;wreg free
  1601                           
  1602                           ;receptor.c: 263: lcdtext("Corte ");
  1603  0078D2  0EE7               	movlw	low STR_13
  1604  0078D4  6E03               	movwf	lcdtext@t,c
  1605  0078D6  0E7F               	movlw	high STR_13
  1606  0078D8  6E04               	movwf	lcdtext@t+1,c
  1607  0078DA  EC04  F036         	call	_lcdtext	;wreg free
  1608                           
  1609                           ;receptor.c: 264: lcdsetCursor(0x06);
  1610  0078DE  0E06               	movlw	6
  1611  0078E0  ECAF  F034         	call	_lcdsetCursor
  1612                           
  1613                           ;receptor.c: 265: sprintf(mx, "%d", m + 1);
  1614  0078E4  0E8C               	movlw	low trabajo@mx
  1615  0078E6  6E0D               	movwf	sprintf@sp,c
  1616  0078E8  0E01               	movlw	high trabajo@mx
  1617  0078EA  6E0E               	movwf	sprintf@sp+1,c
  1618  0078EC  0EF9               	movlw	low STR_12
  1619  0078EE  6E0F               	movwf	sprintf@f,c
  1620  0078F0  0E7F               	movlw	high STR_12
  1621  0078F2  6E10               	movwf	sprintf@f+1,c
  1622  0078F4  0E01               	movlw	1
  1623  0078F6  0101               	movlb	1	; () banked
  1624  0078F8  25A5               	addwf	trabajo@m& (0+255),w,b
  1625  0078FA  6E11               	movwf	?_sprintf+4,c
  1626  0078FC  0E00               	movlw	0
  1627  0078FE  21A6               	addwfc	(trabajo@m+1)& (0+255),w,b
  1628  007900  6E12               	movwf	?_sprintf+5,c
  1629  007902  ECC4  F038         	call	_sprintf	;wreg free
  1630                           
  1631                           ;receptor.c: 266: lcdtext(mx);
  1632  007906  0E8C               	movlw	low trabajo@mx
  1633  007908  6E03               	movwf	lcdtext@t,c
  1634  00790A  0E01               	movlw	high trabajo@mx
  1635  00790C  6E04               	movwf	lcdtext@t+1,c
  1636  00790E  EC04  F036         	call	_lcdtext	;wreg free
  1637                           
  1638                           ;receptor.c: 267: lcdtext("/");
  1639  007912  0EFC               	movlw	low STR_15
  1640  007914  6E03               	movwf	lcdtext@t,c
  1641  007916  0E7F               	movlw	high STR_15
  1642  007918  6E04               	movwf	lcdtext@t+1,c
  1643  00791A  EC04  F036         	call	_lcdtext	;wreg free
  1644                           
  1645                           ;receptor.c: 268: lcdtext(cutx);
  1646  00791E  0E64               	movlw	low trabajo@cutx
  1647  007920  6E03               	movwf	lcdtext@t,c
  1648  007922  0E01               	movlw	high trabajo@cutx
  1649  007924  6E04               	movwf	lcdtext@t+1,c
  1650  007926  EC04  F036         	call	_lcdtext	;wreg free
  1651                           
  1652                           ;receptor.c: 269: lcdsetCursor(0x40);
  1653  00792A  0E40               	movlw	64
  1654  00792C  ECAF  F034         	call	_lcdsetCursor
  1655                           
  1656                           ;receptor.c: 270: lcdtext("Distancia: ");
  1657  007930  0EA0               	movlw	low STR_16
  1658  007932  6E03               	movwf	lcdtext@t,c
  1659  007934  0E7F               	movlw	high STR_16
  1660  007936  6E04               	movwf	lcdtext@t+1,c
  1661  007938  EC04  F036         	call	_lcdtext	;wreg free
  1662                           
  1663                           ;receptor.c: 271: while (num != 'A') {
  1664  00793C  D119               	goto	l223
  1665  00793E                     
  1666                           ;receptor.c: 272: num = 0;
  1667  00793E  0E00               	movlw	0
  1668  007940  0101               	movlb	1	; () banked
  1669  007942  6FA7               	movwf	trabajo@num& (0+255),b
  1670                           
  1671                           ; BSR set to: 1
  1672                           ;receptor.c: 273: num = leer_teclado();
  1673  007944  EC68  F039         	call	_leer_teclado	;wreg free
  1674  007948  0101               	movlb	1	; () banked
  1675  00794A  6FA7               	movwf	trabajo@num& (0+255),b
  1676                           
  1677                           ; BSR set to: 1
  1678                           ;receptor.c: 274: if (num >= '0' && num <= '9') {
  1679  00794C  0E2F               	movlw	47
  1680  00794E  65A7               	cpfsgt	trabajo@num& (0+255),b
  1681  007950  D0B1               	goto	l221
  1682                           
  1683                           ; BSR set to: 1
  1684  007952  0E3A               	movlw	58
  1685  007954  61A7               	cpfslt	trabajo@num& (0+255),b
  1686  007956  D0AE               	goto	l221
  1687                           
  1688                           ; BSR set to: 1
  1689                           ;receptor.c: 275: if (!(distancias[m] == 0 && num == '0')) {
  1690  007958  90D8               	bcf	status,0,c
  1691  00795A  35A5               	rlcf	trabajo@m& (0+255),w,b
  1692  00795C  6ED9               	movwf	fsr2l,c
  1693  00795E  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1694  007960  6EDA               	movwf	fsr2h,c
  1695  007962  0E00               	movlw	low trabajo@distancias
  1696  007964  26D9               	addwf	fsr2l,f,c
  1697  007966  0E01               	movlw	high trabajo@distancias
  1698  007968  22DA               	addwfc	fsr2h,f,c
  1699  00796A  50DE               	movf	postinc2,w,c
  1700  00796C  10DE               	iorwf	postinc2,w,c
  1701  00796E  A4D8               	btfss	status,2,c
  1702  007970  D004               	goto	u2480
  1703                           
  1704                           ; BSR set to: 1
  1705  007972  0E30               	movlw	48
  1706  007974  19A7               	xorwf	trabajo@num& (0+255),w,b
  1707  007976  B4D8               	btfsc	status,2,c
  1708  007978  D09D               	goto	l221
  1709  00797A                     u2480:
  1710                           
  1711                           ; BSR set to: 1
  1712                           ;receptor.c: 276: lcdwrite(num);
  1713                           
  1714                           ; BSR set to: 1
  1715  00797A  51A7               	movf	trabajo@num& (0+255),w,b
  1716  00797C  ECCC  F034         	call	_lcdwrite
  1717                           
  1718                           ;receptor.c: 277: distancias[m] = 10 * distancias[m] + num - '0';
  1719  007980  0ED0               	movlw	208
  1720  007982  6E22               	movwf	??_trabajo& (0+255),c
  1721  007984  0EFF               	movlw	255
  1722  007986  6E23               	movwf	(??_trabajo+1)& (0+255),c
  1723  007988  90D8               	bcf	status,0,c
  1724  00798A  0101               	movlb	1	; () banked
  1725  00798C  35A5               	rlcf	trabajo@m& (0+255),w,b
  1726  00798E  6ED9               	movwf	fsr2l,c
  1727  007990  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1728  007992  6EDA               	movwf	fsr2h,c
  1729  007994  0E00               	movlw	low trabajo@distancias
  1730  007996  26D9               	addwf	fsr2l,f,c
  1731  007998  0E01               	movlw	high trabajo@distancias
  1732  00799A  22DA               	addwfc	fsr2h,f,c
  1733  00799C  CFDE F001          	movff	postinc2,___wmul@multiplier
  1734  0079A0  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1735  0079A4  0E00               	movlw	0
  1736  0079A6  6E04               	movwf	___wmul@multiplicand+1,c
  1737  0079A8  0E0A               	movlw	10
  1738  0079AA  6E03               	movwf	___wmul@multiplicand,c
  1739  0079AC  ECED  F034         	call	___wmul	;wreg free
  1740  0079B0  0101               	movlb	1	; () banked
  1741  0079B2  51A7               	movf	trabajo@num& (0+255),w,b
  1742  0079B4  2601               	addwf	?___wmul,f,c
  1743  0079B6  0E00               	movlw	0
  1744  0079B8  2202               	addwfc	?___wmul+1,f,c
  1745  0079BA  5022               	movf	??_trabajo,w,c
  1746  0079BC  2601               	addwf	?___wmul,f,c
  1747  0079BE  5023               	movf	??_trabajo+1,w,c
  1748  0079C0  2202               	addwfc	?___wmul+1,f,c
  1749  0079C2  90D8               	bcf	status,0,c
  1750  0079C4  35A5               	rlcf	trabajo@m& (0+255),w,b
  1751  0079C6  6ED9               	movwf	fsr2l,c
  1752  0079C8  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1753  0079CA  6EDA               	movwf	fsr2h,c
  1754  0079CC  0E00               	movlw	low trabajo@distancias
  1755  0079CE  26D9               	addwf	fsr2l,f,c
  1756  0079D0  0E01               	movlw	high trabajo@distancias
  1757  0079D2  22DA               	addwfc	fsr2h,f,c
  1758  0079D4  C001  FFDE         	movff	?___wmul,postinc2
  1759  0079D8  C002  FFDD         	movff	?___wmul+1,postdec2
  1760                           
  1761                           ; BSR set to: 1
  1762                           ;receptor.c: 278: if (distancias[m] > (steps)) {
  1763  0079DC  90D8               	bcf	status,0,c
  1764  0079DE  35A5               	rlcf	trabajo@m& (0+255),w,b
  1765  0079E0  6ED9               	movwf	fsr2l,c
  1766  0079E2  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1767  0079E4  6EDA               	movwf	fsr2h,c
  1768  0079E6  0E00               	movlw	low trabajo@distancias
  1769  0079E8  26D9               	addwf	fsr2l,f,c
  1770  0079EA  0E01               	movlw	high trabajo@distancias
  1771  0079EC  22DA               	addwfc	fsr2h,f,c
  1772  0079EE  50DE               	movf	postinc2,w,c
  1773  0079F0  5DA8               	subwf	_steps& (0+255),w,b
  1774  0079F2  51A9               	movf	(_steps+1)& (0+255),w,b
  1775  0079F4  0A80               	xorlw	128
  1776  0079F6  6E24               	movwf	(??_trabajo+2)& (0+255),c
  1777  0079F8  50DE               	movf	postinc2,w,c
  1778  0079FA  0A80               	xorlw	128
  1779  0079FC  5824               	subwfb	(??_trabajo+2)& (0+255),w,c
  1780  0079FE  B0D8               	btfsc	status,0,c
  1781  007A00  D059               	goto	l221
  1782                           
  1783                           ; BSR set to: 1
  1784                           ;receptor.c: 279: lcdclear();
  1785  007A02  ECA3  F034         	call	_lcdclear	;wreg free
  1786                           
  1787                           ;receptor.c: 280: lcdtext("Limite excedido");
  1788  007A06  0E23               	movlw	low STR_17
  1789  007A08  6E03               	movwf	lcdtext@t,c
  1790  007A0A  0E7F               	movlw	high STR_17
  1791  007A0C  6E04               	movwf	lcdtext@t+1,c
  1792  007A0E  EC04  F036         	call	_lcdtext	;wreg free
  1793                           
  1794                           ;receptor.c: 281: distancias[m] = 0;
  1795  007A12  90D8               	bcf	status,0,c
  1796  007A14  0101               	movlb	1	; () banked
  1797  007A16  35A5               	rlcf	trabajo@m& (0+255),w,b
  1798  007A18  6ED9               	movwf	fsr2l,c
  1799  007A1A  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1800  007A1C  6EDA               	movwf	fsr2h,c
  1801  007A1E  0E00               	movlw	low trabajo@distancias
  1802  007A20  26D9               	addwf	fsr2l,f,c
  1803  007A22  0E01               	movlw	high trabajo@distancias
  1804  007A24  22DA               	addwfc	fsr2h,f,c
  1805  007A26  0E00               	movlw	0
  1806  007A28  6EDE               	movwf	postinc2,c
  1807  007A2A  0E00               	movlw	0
  1808  007A2C  6EDD               	movwf	postdec2,c
  1809                           
  1810                           ; BSR set to: 1
  1811                           ;receptor.c: 282: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1812  007A2E  0E15               	movlw	21
  1813  007A30  6E23               	movwf	(??_trabajo+1)& (0+255),c
  1814  007A32  0E4B               	movlw	75
  1815  007A34  6E22               	movwf	??_trabajo& (0+255),c
  1816  007A36  0EBE               	movlw	190
  1817  007A38                     u2947:
  1818  007A38  2EE8               	decfsz	wreg,f,c
  1819  007A3A  D7FE               	bra	u2947
  1820  007A3C  2E22               	decfsz	??_trabajo& (0+255),f,c
  1821  007A3E  D7FC               	bra	u2947
  1822  007A40  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  1823  007A42  D7FA               	bra	u2947
  1824  007A44  D000               	nop2	
  1825                           
  1826                           ;receptor.c: 283: lcdclear();
  1827  007A46  ECA3  F034         	call	_lcdclear	;wreg free
  1828                           
  1829                           ;receptor.c: 284: lcdtext("Corte ");
  1830  007A4A  0EE7               	movlw	low STR_13
  1831  007A4C  6E03               	movwf	lcdtext@t,c
  1832  007A4E  0E7F               	movlw	high STR_13
  1833  007A50  6E04               	movwf	lcdtext@t+1,c
  1834  007A52  EC04  F036         	call	_lcdtext	;wreg free
  1835                           
  1836                           ;receptor.c: 285: lcdsetCursor(0x06);
  1837  007A56  0E06               	movlw	6
  1838  007A58  ECAF  F034         	call	_lcdsetCursor
  1839                           
  1840                           ;receptor.c: 286: sprintf(mx, "%d", m + 1);
  1841  007A5C  0E8C               	movlw	low trabajo@mx
  1842  007A5E  6E0D               	movwf	sprintf@sp,c
  1843  007A60  0E01               	movlw	high trabajo@mx
  1844  007A62  6E0E               	movwf	sprintf@sp+1,c
  1845  007A64  0EF9               	movlw	low STR_12
  1846  007A66  6E0F               	movwf	sprintf@f,c
  1847  007A68  0E7F               	movlw	high STR_12
  1848  007A6A  6E10               	movwf	sprintf@f+1,c
  1849  007A6C  0E01               	movlw	1
  1850  007A6E  0101               	movlb	1	; () banked
  1851  007A70  25A5               	addwf	trabajo@m& (0+255),w,b
  1852  007A72  6E11               	movwf	?_sprintf+4,c
  1853  007A74  0E00               	movlw	0
  1854  007A76  21A6               	addwfc	(trabajo@m+1)& (0+255),w,b
  1855  007A78  6E12               	movwf	?_sprintf+5,c
  1856  007A7A  ECC4  F038         	call	_sprintf	;wreg free
  1857                           
  1858                           ;receptor.c: 287: lcdtext(mx);
  1859  007A7E  0E8C               	movlw	low trabajo@mx
  1860  007A80  6E03               	movwf	lcdtext@t,c
  1861  007A82  0E01               	movlw	high trabajo@mx
  1862  007A84  6E04               	movwf	lcdtext@t+1,c
  1863  007A86  EC04  F036         	call	_lcdtext	;wreg free
  1864                           
  1865                           ;receptor.c: 288: lcdtext("/");
  1866  007A8A  0EFC               	movlw	low STR_15
  1867  007A8C  6E03               	movwf	lcdtext@t,c
  1868  007A8E  0E7F               	movlw	high STR_15
  1869  007A90  6E04               	movwf	lcdtext@t+1,c
  1870  007A92  EC04  F036         	call	_lcdtext	;wreg free
  1871                           
  1872                           ;receptor.c: 289: lcdtext(cutx);
  1873  007A96  0E64               	movlw	low trabajo@cutx
  1874  007A98  6E03               	movwf	lcdtext@t,c
  1875  007A9A  0E01               	movlw	high trabajo@cutx
  1876  007A9C  6E04               	movwf	lcdtext@t+1,c
  1877  007A9E  EC04  F036         	call	_lcdtext	;wreg free
  1878                           
  1879                           ;receptor.c: 290: lcdsetCursor(0x40);
  1880  007AA2  0E40               	movlw	64
  1881  007AA4  ECAF  F034         	call	_lcdsetCursor
  1882                           
  1883                           ;receptor.c: 291: lcdtext("Distancia: ");
  1884  007AA8  0EA0               	movlw	low STR_16
  1885  007AAA  6E03               	movwf	lcdtext@t,c
  1886  007AAC  0E7F               	movlw	high STR_16
  1887  007AAE  6E04               	movwf	lcdtext@t+1,c
  1888  007AB0  EC04  F036         	call	_lcdtext	;wreg free
  1889  007AB4                     l221:
  1890                           
  1891                           ;receptor.c: 292: }
  1892                           ;receptor.c: 293: }
  1893                           ;receptor.c: 294: }
  1894                           ;receptor.c: 295: if ((num == 'C') && (distancias[m] > 0)) {
  1895  007AB4  0E43               	movlw	67
  1896  007AB6  0101               	movlb	1	; () banked
  1897  007AB8  19A7               	xorwf	trabajo@num& (0+255),w,b
  1898  007ABA  A4D8               	btfss	status,2,c
  1899  007ABC  D054               	goto	l222
  1900                           
  1901                           ; BSR set to: 1
  1902  007ABE  90D8               	bcf	status,0,c
  1903  007AC0  35A5               	rlcf	trabajo@m& (0+255),w,b
  1904  007AC2  6ED9               	movwf	fsr2l,c
  1905  007AC4  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1906  007AC6  6EDA               	movwf	fsr2h,c
  1907  007AC8  0E00               	movlw	low trabajo@distancias
  1908  007ACA  26D9               	addwf	fsr2l,f,c
  1909  007ACC  0E01               	movlw	high trabajo@distancias
  1910  007ACE  22DA               	addwfc	fsr2h,f,c
  1911  007AD0  0E01               	movlw	1
  1912  007AD2  BEDB               	btfsc	plusw2,7,c
  1913  007AD4  D048               	goto	l222
  1914  007AD6  0E01               	movlw	1
  1915  007AD8  50DB               	movf	plusw2,w,c
  1916  007ADA  E103               	bnz	u2510
  1917  007ADC  04DE               	decf	postinc2,w,c
  1918  007ADE  A0D8               	btfss	status,0,c
  1919  007AE0  D042               	goto	l222
  1920  007AE2                     u2510:
  1921                           
  1922                           ; BSR set to: 1
  1923                           ;receptor.c: 296: lcdshiftCursor('L');
  1924  007AE2  0E4C               	movlw	76
  1925  007AE4  EC14  F035         	call	_lcdshiftCursor
  1926                           
  1927                           ;receptor.c: 297: lcdwrite(' ');
  1928  007AE8  0E20               	movlw	32
  1929  007AEA  ECCC  F034         	call	_lcdwrite
  1930                           
  1931                           ;receptor.c: 298: lcdshiftCursor('L');
  1932  007AEE  0E4C               	movlw	76
  1933  007AF0  EC14  F035         	call	_lcdshiftCursor
  1934                           
  1935                           ;receptor.c: 299: distancias[m] /= 10;
  1936  007AF4  90D8               	bcf	status,0,c
  1937  007AF6  0101               	movlb	1	; () banked
  1938  007AF8  35A5               	rlcf	trabajo@m& (0+255),w,b
  1939  007AFA  6ED9               	movwf	fsr2l,c
  1940  007AFC  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1941  007AFE  6EDA               	movwf	fsr2h,c
  1942  007B00  0E00               	movlw	low trabajo@distancias
  1943  007B02  26D9               	addwf	fsr2l,f,c
  1944  007B04  0E01               	movlw	high trabajo@distancias
  1945  007B06  22DA               	addwfc	fsr2h,f,c
  1946  007B08  CFDE F001          	movff	postinc2,___awdiv@dividend
  1947  007B0C  CFDD F002          	movff	postdec2,___awdiv@dividend+1
  1948  007B10  0E00               	movlw	0
  1949  007B12  6E04               	movwf	___awdiv@divisor+1,c
  1950  007B14  0E0A               	movlw	10
  1951  007B16  6E03               	movwf	___awdiv@divisor,c
  1952  007B18  ECB5  F036         	call	___awdiv	;wreg free
  1953  007B1C  90D8               	bcf	status,0,c
  1954  007B1E  0101               	movlb	1	; () banked
  1955  007B20  35A5               	rlcf	trabajo@m& (0+255),w,b
  1956  007B22  6ED9               	movwf	fsr2l,c
  1957  007B24  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1958  007B26  6EDA               	movwf	fsr2h,c
  1959  007B28  0E00               	movlw	low trabajo@distancias
  1960  007B2A  26D9               	addwf	fsr2l,f,c
  1961  007B2C  0E01               	movlw	high trabajo@distancias
  1962  007B2E  22DA               	addwfc	fsr2h,f,c
  1963  007B30  C001  FFDE         	movff	?___awdiv,postinc2
  1964  007B34  C002  FFDD         	movff	?___awdiv+1,postdec2
  1965                           
  1966                           ; BSR set to: 1
  1967                           ;receptor.c: 300: trunc(distancias[m]);
  1968  007B38  90D8               	bcf	status,0,c
  1969  007B3A  35A5               	rlcf	trabajo@m& (0+255),w,b
  1970  007B3C  6ED9               	movwf	fsr2l,c
  1971  007B3E  35A6               	rlcf	(trabajo@m+1)& (0+255),w,b
  1972  007B40  6EDA               	movwf	fsr2h,c
  1973  007B42  0E00               	movlw	low trabajo@distancias
  1974  007B44  26D9               	addwf	fsr2l,f,c
  1975  007B46  0E01               	movlw	high trabajo@distancias
  1976  007B48  22DA               	addwfc	fsr2h,f,c
  1977  007B4A  CFDE F009          	movff	postinc2,___awtoft@c
  1978  007B4E  CFDD F00A          	movff	postdec2,___awtoft@c+1
  1979  007B52  EC2C  F035         	call	___awtoft	;wreg free
  1980  007B56  C009  F01A         	movff	?___awtoft,trunc@x
  1981  007B5A  C00A  F01B         	movff	?___awtoft+1,trunc@x+1
  1982  007B5E  C00B  F01C         	movff	?___awtoft+2,trunc@x+2
  1983  007B62  ECD6  F035         	call	_trunc	;wreg free
  1984  007B66                     l222:
  1985                           
  1986                           ;receptor.c: 301: }
  1987                           ;receptor.c: 302: if (num == 'B')break;
  1988  007B66  0E42               	movlw	66
  1989  007B68  0101               	movlb	1	; () banked
  1990  007B6A  19A7               	xorwf	trabajo@num& (0+255),w,b
  1991  007B6C  B4D8               	btfsc	status,2,c
  1992  007B6E  D005               	goto	u2530
  1993  007B70                     l223:
  1994                           
  1995                           ; BSR set to: 1
  1996                           
  1997                           ; BSR set to: 1
  1998  007B70  0E41               	movlw	65
  1999  007B72  0101               	movlb	1	; () banked
  2000  007B74  19A7               	xorwf	trabajo@num& (0+255),w,b
  2001  007B76  A4D8               	btfss	status,2,c
  2002  007B78  D6E2               	goto	l216
  2003  007B7A                     u2530:
  2004                           
  2005                           ; BSR set to: 1
  2006                           ;receptor.c: 303: }
  2007                           ;receptor.c: 304: if (num == 'B')break;
  2008                           
  2009                           ; BSR set to: 1
  2010  007B7A  0E42               	movlw	66
  2011  007B7C  19A7               	xorwf	trabajo@num& (0+255),w,b
  2012  007B7E  B4D8               	btfsc	status,2,c
  2013  007B80  D00F               	goto	u2550
  2014                           
  2015                           ; BSR set to: 1
  2016                           
  2017                           ; BSR set to: 1
  2018                           
  2019                           ; BSR set to: 1
  2020  007B82  4BA5               	infsnz	trabajo@m& (0+255),f,b
  2021  007B84  2BA6               	incf	(trabajo@m+1)& (0+255),f,b
  2022  007B86                     l213:
  2023                           
  2024                           ; BSR set to: 1
  2025                           
  2026                           ; BSR set to: 1
  2027  007B86  51A4               	movf	trabajo@cuts& (0+255),w,b
  2028  007B88  6E22               	movwf	??_trabajo& (0+255),c
  2029  007B8A  6A23               	clrf	(??_trabajo+1)& (0+255),c
  2030  007B8C  5022               	movf	??_trabajo,w,c
  2031  007B8E  5DA5               	subwf	trabajo@m& (0+255),w,b
  2032  007B90  51A6               	movf	(trabajo@m+1)& (0+255),w,b
  2033  007B92  0A80               	xorlw	128
  2034  007B94  6E24               	movwf	(??_trabajo+2)& (0+255),c
  2035  007B96  5023               	movf	??_trabajo+1,w,c
  2036  007B98  0A80               	xorlw	128
  2037  007B9A  5824               	subwfb	(??_trabajo+2)& (0+255),w,c
  2038  007B9C  A0D8               	btfss	status,0,c
  2039  007B9E  D688               	goto	l214
  2040  007BA0                     u2550:
  2041                           
  2042                           ; BSR set to: 1
  2043                           ;receptor.c: 305: }
  2044                           ;receptor.c: 306: if (num == 'B') {
  2045                           
  2046                           ; BSR set to: 1
  2047  007BA0  0E42               	movlw	66
  2048  007BA2  19A7               	xorwf	trabajo@num& (0+255),w,b
  2049  007BA4  A4D8               	btfss	status,2,c
  2050  007BA6  D01E               	goto	l227
  2051                           
  2052                           ; BSR set to: 1
  2053                           ;receptor.c: 307: lcdclear();
  2054  007BA8  ECA3  F034         	call	_lcdclear	;wreg free
  2055                           
  2056                           ;receptor.c: 308: lcdtext("Operacion");
  2057  007BAC  0ECC               	movlw	low STR_10
  2058  007BAE  6E03               	movwf	lcdtext@t,c
  2059  007BB0  0E7F               	movlw	high STR_10
  2060  007BB2  6E04               	movwf	lcdtext@t+1,c
  2061  007BB4  EC04  F036         	call	_lcdtext	;wreg free
  2062                           
  2063                           ;receptor.c: 309: lcdsetCursor(0x40);
  2064  007BB8  0E40               	movlw	64
  2065  007BBA  ECAF  F034         	call	_lcdsetCursor
  2066                           
  2067                           ;receptor.c: 310: lcdtext("Cancelada");
  2068  007BBE  0EC2               	movlw	low STR_11
  2069  007BC0  6E03               	movwf	lcdtext@t,c
  2070  007BC2  0E7F               	movlw	high STR_11
  2071  007BC4  6E04               	movwf	lcdtext@t+1,c
  2072  007BC6  EC04  F036         	call	_lcdtext	;wreg free
  2073                           
  2074                           ;receptor.c: 311: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2075  007BCA  0E15               	movlw	21
  2076  007BCC  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2077  007BCE  0E4B               	movlw	75
  2078  007BD0  6E22               	movwf	??_trabajo& (0+255),c
  2079  007BD2  0EBE               	movlw	190
  2080  007BD4                     u2957:
  2081  007BD4  2EE8               	decfsz	wreg,f,c
  2082  007BD6  D7FE               	bra	u2957
  2083  007BD8  2E22               	decfsz	??_trabajo& (0+255),f,c
  2084  007BDA  D7FC               	bra	u2957
  2085  007BDC  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2086  007BDE  D7FA               	bra	u2957
  2087  007BE0  D000               	nop2	
  2088                           
  2089                           ;receptor.c: 312: } else {
  2090  007BE2  0012               	return	
  2091  007BE4                     l227:
  2092                           
  2093                           ;receptor.c: 313: lcdclear();
  2094  007BE4  ECA3  F034         	call	_lcdclear	;wreg free
  2095                           
  2096                           ;receptor.c: 314: lcdtext("Corte ");
  2097  007BE8  0EE7               	movlw	low STR_13
  2098  007BEA  6E03               	movwf	lcdtext@t,c
  2099  007BEC  0E7F               	movlw	high STR_13
  2100  007BEE  6E04               	movwf	lcdtext@t+1,c
  2101  007BF0  EC04  F036         	call	_lcdtext	;wreg free
  2102                           
  2103                           ;receptor.c: 315: for (int m = 0; m < cuts; m++) {
  2104  007BF4  0E00               	movlw	0
  2105  007BF6  0101               	movlb	1	; () banked
  2106  007BF8  6FA3               	movwf	(trabajo@m_281+1)& (0+255),b
  2107  007BFA  0E00               	movlw	0
  2108  007BFC  6FA2               	movwf	trabajo@m_281& (0+255),b
  2109  007BFE  D11B               	goto	l229
  2110  007C00                     
  2111                           ; BSR set to: 1
  2112                           ;receptor.c: 316: lcdsetCursor(0x06);
  2113                           
  2114                           ; BSR set to: 1
  2115  007C00  0E06               	movlw	6
  2116  007C02  ECAF  F034         	call	_lcdsetCursor
  2117                           
  2118                           ;receptor.c: 317: sprintf(mx, "%d", m + 1);
  2119  007C06  0E8C               	movlw	low trabajo@mx
  2120  007C08  6E0D               	movwf	sprintf@sp,c
  2121  007C0A  0E01               	movlw	high trabajo@mx
  2122  007C0C  6E0E               	movwf	sprintf@sp+1,c
  2123  007C0E  0EF9               	movlw	low STR_12
  2124  007C10  6E0F               	movwf	sprintf@f,c
  2125  007C12  0E7F               	movlw	high STR_12
  2126  007C14  6E10               	movwf	sprintf@f+1,c
  2127  007C16  0E01               	movlw	1
  2128  007C18  0101               	movlb	1	; () banked
  2129  007C1A  25A2               	addwf	trabajo@m_281& (0+255),w,b
  2130  007C1C  6E11               	movwf	?_sprintf+4,c
  2131  007C1E  0E00               	movlw	0
  2132  007C20  21A3               	addwfc	(trabajo@m_281+1)& (0+255),w,b
  2133  007C22  6E12               	movwf	?_sprintf+5,c
  2134  007C24  ECC4  F038         	call	_sprintf	;wreg free
  2135                           
  2136                           ;receptor.c: 318: lcdtext(mx);
  2137  007C28  0E8C               	movlw	low trabajo@mx
  2138  007C2A  6E03               	movwf	lcdtext@t,c
  2139  007C2C  0E01               	movlw	high trabajo@mx
  2140  007C2E  6E04               	movwf	lcdtext@t+1,c
  2141  007C30  EC04  F036         	call	_lcdtext	;wreg free
  2142                           
  2143                           ;receptor.c: 319: lcdtext("/");
  2144  007C34  0EFC               	movlw	low STR_15
  2145  007C36  6E03               	movwf	lcdtext@t,c
  2146  007C38  0E7F               	movlw	high STR_15
  2147  007C3A  6E04               	movwf	lcdtext@t+1,c
  2148  007C3C  EC04  F036         	call	_lcdtext	;wreg free
  2149                           
  2150                           ;receptor.c: 320: lcdtext(cutx);
  2151  007C40  0E64               	movlw	low trabajo@cutx
  2152  007C42  6E03               	movwf	lcdtext@t,c
  2153  007C44  0E01               	movlw	high trabajo@cutx
  2154  007C46  6E04               	movwf	lcdtext@t+1,c
  2155  007C48  EC04  F036         	call	_lcdtext	;wreg free
  2156                           
  2157                           ;receptor.c: 321: UART_Write('a');
  2158  007C4C  0E61               	movlw	97
  2159  007C4E  EC93  F034         	call	_UART_Write
  2160                           
  2161                           ;receptor.c: 323: sprintf(outx, "%d", (distancias[m] - 353 + 142));
  2162  007C52  0E78               	movlw	low trabajo@outx
  2163  007C54  6E0D               	movwf	sprintf@sp,c
  2164  007C56  0E01               	movlw	high trabajo@outx
  2165  007C58  6E0E               	movwf	sprintf@sp+1,c
  2166  007C5A  0EF9               	movlw	low STR_12
  2167  007C5C  6E0F               	movwf	sprintf@f,c
  2168  007C5E  0E7F               	movlw	high STR_12
  2169  007C60  6E10               	movwf	sprintf@f+1,c
  2170  007C62  90D8               	bcf	status,0,c
  2171  007C64  0101               	movlb	1	; () banked
  2172  007C66  35A2               	rlcf	trabajo@m_281& (0+255),w,b
  2173  007C68  6ED9               	movwf	fsr2l,c
  2174  007C6A  35A3               	rlcf	(trabajo@m_281+1)& (0+255),w,b
  2175  007C6C  6EDA               	movwf	fsr2h,c
  2176  007C6E  0E00               	movlw	low trabajo@distancias
  2177  007C70  26D9               	addwf	fsr2l,f,c
  2178  007C72  0E01               	movlw	high trabajo@distancias
  2179  007C74  22DA               	addwfc	fsr2h,f,c
  2180  007C76  CFDE F022          	movff	postinc2,??_trabajo
  2181  007C7A  CFDD F023          	movff	postdec2,??_trabajo+1
  2182  007C7E  0E2D               	movlw	45
  2183  007C80  2422               	addwf	??_trabajo,w,c
  2184  007C82  6E11               	movwf	?_sprintf+4,c
  2185  007C84  0EFF               	movlw	255
  2186  007C86  2023               	addwfc	??_trabajo+1,w,c
  2187  007C88  6E12               	movwf	?_sprintf+5,c
  2188  007C8A  ECC4  F038         	call	_sprintf	;wreg free
  2189                           
  2190                           ;receptor.c: 324: for (int i = 0; outx[i] != '\0'; i++) {
  2191  007C8E  0E00               	movlw	0
  2192  007C90  0101               	movlb	1	; () banked
  2193  007C92  6FA1               	movwf	(trabajo@i+1)& (0+255),b
  2194  007C94  0E00               	movlw	0
  2195  007C96  6FA0               	movwf	trabajo@i& (0+255),b
  2196  007C98  D021               	goto	l231
  2197  007C9A                     
  2198                           ; BSR set to: 1
  2199                           ;receptor.c: 325: _delay((unsigned long)((100)*(8000000/4000.0)));
  2200                           
  2201                           ; BSR set to: 1
  2202  007C9A  0E02               	movlw	2
  2203  007C9C  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2204  007C9E  0E04               	movlw	4
  2205  007CA0  6E22               	movwf	??_trabajo& (0+255),c
  2206  007CA2  0EBA               	movlw	186
  2207  007CA4                     u2967:
  2208  007CA4  2EE8               	decfsz	wreg,f,c
  2209  007CA6  D7FE               	bra	u2967
  2210  007CA8  2E22               	decfsz	??_trabajo& (0+255),f,c
  2211  007CAA  D7FC               	bra	u2967
  2212  007CAC  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2213  007CAE  D7FA               	bra	u2967
  2214  007CB0  D000               	nop2	
  2215                           
  2216                           ;receptor.c: 326: UART_Write(outx[i]);
  2217  007CB2  0E78               	movlw	low trabajo@outx
  2218  007CB4  0101               	movlb	1	; () banked
  2219  007CB6  25A0               	addwf	trabajo@i& (0+255),w,b
  2220  007CB8  6ED9               	movwf	fsr2l,c
  2221  007CBA  0E01               	movlw	high trabajo@outx
  2222  007CBC  21A1               	addwfc	(trabajo@i+1)& (0+255),w,b
  2223  007CBE  6EDA               	movwf	fsr2h,c
  2224  007CC0  50DF               	movf	indf2,w,c
  2225  007CC2  EC93  F034         	call	_UART_Write
  2226                           
  2227                           ;receptor.c: 327: outx[i] = '\0';
  2228  007CC6  0E78               	movlw	low trabajo@outx
  2229  007CC8  0101               	movlb	1	; () banked
  2230  007CCA  25A0               	addwf	trabajo@i& (0+255),w,b
  2231  007CCC  6ED9               	movwf	fsr2l,c
  2232  007CCE  0E01               	movlw	high trabajo@outx
  2233  007CD0  21A1               	addwfc	(trabajo@i+1)& (0+255),w,b
  2234  007CD2  6EDA               	movwf	fsr2h,c
  2235  007CD4  0E00               	movlw	0
  2236  007CD6  6EDF               	movwf	indf2,c
  2237                           
  2238                           ; BSR set to: 1
  2239  007CD8  4BA0               	infsnz	trabajo@i& (0+255),f,b
  2240  007CDA  2BA1               	incf	(trabajo@i+1)& (0+255),f,b
  2241  007CDC                     l231:
  2242                           
  2243                           ; BSR set to: 1
  2244                           
  2245                           ; BSR set to: 1
  2246  007CDC  0E78               	movlw	low trabajo@outx
  2247  007CDE  25A0               	addwf	trabajo@i& (0+255),w,b
  2248  007CE0  6ED9               	movwf	fsr2l,c
  2249  007CE2  0E01               	movlw	high trabajo@outx
  2250  007CE4  21A1               	addwfc	(trabajo@i+1)& (0+255),w,b
  2251  007CE6  6EDA               	movwf	fsr2h,c
  2252  007CE8  50DF               	movf	indf2,w,c
  2253  007CEA  A4D8               	btfss	status,2,c
  2254  007CEC  D7D6               	goto	l232
  2255                           
  2256                           ; BSR set to: 1
  2257                           ;receptor.c: 328: }
  2258                           ;receptor.c: 329: _delay((unsigned long)((100)*(8000000/4000.0)));
  2259                           
  2260                           ; BSR set to: 1
  2261  007CEE  0E02               	movlw	2
  2262  007CF0  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2263  007CF2  0E04               	movlw	4
  2264  007CF4  6E22               	movwf	??_trabajo& (0+255),c
  2265  007CF6  0EBA               	movlw	186
  2266  007CF8                     u2977:
  2267  007CF8  2EE8               	decfsz	wreg,f,c
  2268  007CFA  D7FE               	bra	u2977
  2269  007CFC  2E22               	decfsz	??_trabajo& (0+255),f,c
  2270  007CFE  D7FC               	bra	u2977
  2271  007D00  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2272  007D02  D7FA               	bra	u2977
  2273  007D04  D000               	nop2	
  2274                           
  2275                           ;receptor.c: 330: UART_Write('a');
  2276  007D06  0E61               	movlw	97
  2277  007D08  EC93  F034         	call	_UART_Write
  2278                           
  2279                           ;receptor.c: 331: lcdsetCursor(0x40);
  2280  007D0C  0E40               	movlw	64
  2281  007D0E  ECAF  F034         	call	_lcdsetCursor
  2282                           
  2283                           ;receptor.c: 332: lcdtext("Moviendo...         ");
  2284  007D12  0EDC               	movlw	low STR_28
  2285  007D14  6E03               	movwf	lcdtext@t,c
  2286  007D16  0E7E               	movlw	high STR_28
  2287  007D18  6E04               	movwf	lcdtext@t+1,c
  2288  007D1A  EC04  F036         	call	_lcdtext	;wreg free
  2289                           
  2290                           ;receptor.c: 333: while (!UART_Data_Ready()) {
  2291  007D1E  D00C               	goto	l236
  2292  007D20                     
  2293                           ;receptor.c: 334: num = leer_teclado();
  2294  007D20  EC68  F039         	call	_leer_teclado	;wreg free
  2295  007D24  0101               	movlb	1	; () banked
  2296  007D26  6FA7               	movwf	trabajo@num& (0+255),b
  2297                           
  2298                           ; BSR set to: 1
  2299                           ;receptor.c: 335: if (num == 'B') {
  2300  007D28  0E42               	movlw	66
  2301  007D2A  19A7               	xorwf	trabajo@num& (0+255),w,b
  2302  007D2C  A4D8               	btfss	status,2,c
  2303  007D2E  D004               	goto	l236
  2304                           
  2305                           ; BSR set to: 1
  2306                           ;receptor.c: 336: UART_Write('s');
  2307  007D30  0E73               	movlw	115
  2308  007D32  EC93  F034         	call	_UART_Write
  2309                           
  2310                           ;receptor.c: 337: break;
  2311  007D36  D005               	goto	u2590
  2312  007D38                     l236:
  2313  007D38  EC8B  F034         	call	_UART_Data_Ready	;wreg free
  2314  007D3C  0900               	iorlw	0
  2315  007D3E  B4D8               	btfsc	status,2,c
  2316  007D40  D7EF               	goto	l235
  2317  007D42                     u2590:
  2318                           
  2319                           ;receptor.c: 338: }
  2320                           ;receptor.c: 339: }
  2321                           ;receptor.c: 340: if (num != 'B') {
  2322  007D42  0E42               	movlw	66
  2323  007D44  0101               	movlb	1	; () banked
  2324  007D46  19A7               	xorwf	trabajo@num& (0+255),w,b
  2325  007D48  B4D8               	btfsc	status,2,c
  2326  007D4A  D06F               	goto	u2650
  2327                           
  2328                           ; BSR set to: 1
  2329                           ;receptor.c: 341: if (UART_Read() == 'd') {
  2330  007D4C  EC8F  F034         	call	_UART_Read	;wreg free
  2331  007D50  0A64               	xorlw	100
  2332  007D52  A4D8               	btfss	status,2,c
  2333  007D54  D015               	goto	l239
  2334                           
  2335                           ;receptor.c: 342: lcdsetCursor(0x40);
  2336  007D56  0E40               	movlw	64
  2337  007D58  ECAF  F034         	call	_lcdsetCursor
  2338                           
  2339                           ;receptor.c: 343: lcdtext("Listo          ");
  2340  007D5C  0E03               	movlw	low STR_29
  2341  007D5E  6E03               	movwf	lcdtext@t,c
  2342  007D60  0E7F               	movlw	high STR_29
  2343  007D62  6E04               	movwf	lcdtext@t+1,c
  2344  007D64  EC04  F036         	call	_lcdtext	;wreg free
  2345                           
  2346                           ;receptor.c: 344: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2347  007D68  0E15               	movlw	21
  2348  007D6A  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2349  007D6C  0E4B               	movlw	75
  2350  007D6E  6E22               	movwf	??_trabajo& (0+255),c
  2351  007D70  0EBE               	movlw	190
  2352  007D72                     u2987:
  2353  007D72  2EE8               	decfsz	wreg,f,c
  2354  007D74  D7FE               	bra	u2987
  2355  007D76  2E22               	decfsz	??_trabajo& (0+255),f,c
  2356  007D78  D7FC               	bra	u2987
  2357  007D7A  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2358  007D7C  D7FA               	bra	u2987
  2359  007D7E  D013               	goto	L1
  2360  007D80                     l239:
  2361                           
  2362                           ;receptor.c: 346: lcdclear();
  2363  007D80  ECA3  F034         	call	_lcdclear	;wreg free
  2364                           
  2365                           ;receptor.c: 347: lcdtext("Error!         ");
  2366  007D84  0E13               	movlw	low STR_30
  2367  007D86  6E03               	movwf	lcdtext@t,c
  2368  007D88  0E7F               	movlw	high STR_30
  2369  007D8A  6E04               	movwf	lcdtext@t+1,c
  2370  007D8C  EC04  F036         	call	_lcdtext	;wreg free
  2371                           
  2372                           ;receptor.c: 348: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2373  007D90  0E15               	movlw	21
  2374  007D92  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2375  007D94  0E4B               	movlw	75
  2376  007D96  6E22               	movwf	??_trabajo& (0+255),c
  2377  007D98  0EBE               	movlw	190
  2378  007D9A                     u2997:
  2379  007D9A  2EE8               	decfsz	wreg,f,c
  2380  007D9C  D7FE               	bra	u2997
  2381  007D9E  2E22               	decfsz	??_trabajo& (0+255),f,c
  2382  007DA0  D7FC               	bra	u2997
  2383  007DA2  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2384  007DA4  D7FA               	bra	u2997
  2385  007DA6                     L1:
  2386  007DA6  D000               	nop2	
  2387                           
  2388                           ;receptor.c: 349: }
  2389                           ;receptor.c: 350: num = 0;
  2390  007DA8  0E00               	movlw	0
  2391  007DAA  0101               	movlb	1	; () banked
  2392  007DAC  6FA7               	movwf	trabajo@num& (0+255),b
  2393                           
  2394                           ; BSR set to: 1
  2395                           ;receptor.c: 351: if (m < cuts) {
  2396  007DAE  51A4               	movf	trabajo@cuts& (0+255),w,b
  2397  007DB0  6E22               	movwf	??_trabajo& (0+255),c
  2398  007DB2  6A23               	clrf	(??_trabajo+1)& (0+255),c
  2399  007DB4  5022               	movf	??_trabajo,w,c
  2400  007DB6  5DA2               	subwf	trabajo@m_281& (0+255),w,b
  2401  007DB8  51A3               	movf	(trabajo@m_281+1)& (0+255),w,b
  2402  007DBA  0A80               	xorlw	128
  2403  007DBC  6E24               	movwf	(??_trabajo+2)& (0+255),c
  2404  007DBE  5023               	movf	??_trabajo+1,w,c
  2405  007DC0  0A80               	xorlw	128
  2406  007DC2  5824               	subwfb	(??_trabajo+2)& (0+255),w,c
  2407  007DC4  B0D8               	btfsc	status,0,c
  2408  007DC6  D02C               	goto	l246
  2409                           
  2410                           ; BSR set to: 1
  2411                           ;receptor.c: 352: if ((m + 1) == cuts) {
  2412  007DC8  51A4               	movf	trabajo@cuts& (0+255),w,b
  2413  007DCA  6E22               	movwf	??_trabajo& (0+255),c
  2414  007DCC  6A23               	clrf	(??_trabajo+1)& (0+255),c
  2415  007DCE  0E01               	movlw	1
  2416  007DD0  25A2               	addwf	trabajo@m_281& (0+255),w,b
  2417  007DD2  6E24               	movwf	(??_trabajo+2)& (0+255),c
  2418  007DD4  0E00               	movlw	0
  2419  007DD6  21A3               	addwfc	(trabajo@m_281+1)& (0+255),w,b
  2420  007DD8  6E25               	movwf	(??_trabajo+3)& (0+255),c
  2421  007DDA  5022               	movf	??_trabajo,w,c
  2422  007DDC  1824               	xorwf	??_trabajo+2,w,c
  2423  007DDE  E10E               	bnz	l2668
  2424  007DE0  5023               	movf	??_trabajo+1,w,c
  2425  007DE2  1825               	xorwf	??_trabajo+3,w,c
  2426  007DE4  A4D8               	btfss	status,2,c
  2427  007DE6  D00A               	goto	l242
  2428                           
  2429                           ; BSR set to: 1
  2430                           ;receptor.c: 353: lcdsetCursor(0x40);
  2431  007DE8  0E40               	movlw	64
  2432  007DEA  ECAF  F034         	call	_lcdsetCursor
  2433                           
  2434                           ;receptor.c: 354: lcdtext("Terminar (A)");
  2435  007DEE  0E79               	movlw	low STR_31
  2436  007DF0  6E03               	movwf	lcdtext@t,c
  2437  007DF2  0E7F               	movlw	high STR_31
  2438  007DF4  6E04               	movwf	lcdtext@t+1,c
  2439  007DF6  EC04  F036         	call	_lcdtext	;wreg free
  2440                           
  2441                           ;receptor.c: 355: } else {
  2442  007DFA  D012               	goto	l246
  2443  007DFC                     l242:
  2444  007DFC                     l2668:
  2445                           
  2446                           ;receptor.c: 356: lcdsetCursor(0x40);
  2447  007DFC  0E40               	movlw	64
  2448  007DFE  ECAF  F034         	call	_lcdsetCursor
  2449                           
  2450                           ;receptor.c: 357: lcdtext("Siguiente (A)");
  2451  007E02  0E42               	movlw	low STR_32
  2452  007E04  6E03               	movwf	lcdtext@t,c
  2453  007E06  0E7F               	movlw	high STR_32
  2454  007E08  6E04               	movwf	lcdtext@t+1,c
  2455  007E0A  EC04  F036         	call	_lcdtext	;wreg free
  2456                           
  2457                           ;receptor.c: 358: }
  2458                           ;receptor.c: 359: }
  2459                           ;receptor.c: 360: while (num != 'A') {
  2460  007E0E  D008               	goto	l246
  2461  007E10                     
  2462                           ;receptor.c: 361: num = leer_teclado();
  2463  007E10  EC68  F039         	call	_leer_teclado	;wreg free
  2464  007E14  0101               	movlb	1	; () banked
  2465  007E16  6FA7               	movwf	trabajo@num& (0+255),b
  2466                           
  2467                           ; BSR set to: 1
  2468                           ;receptor.c: 362: if (num == 'B')break;
  2469  007E18  0E42               	movlw	66
  2470  007E1A  19A7               	xorwf	trabajo@num& (0+255),w,b
  2471  007E1C  B4D8               	btfsc	status,2,c
  2472  007E1E  D005               	goto	u2650
  2473  007E20                     l246:
  2474                           
  2475                           ; BSR set to: 1
  2476                           
  2477                           ; BSR set to: 1
  2478  007E20  0E41               	movlw	65
  2479  007E22  0101               	movlb	1	; () banked
  2480  007E24  19A7               	xorwf	trabajo@num& (0+255),w,b
  2481  007E26  A4D8               	btfss	status,2,c
  2482  007E28  D7F3               	goto	l245
  2483  007E2A                     u2650:
  2484                           
  2485                           ; BSR set to: 1
  2486                           ;receptor.c: 363: }
  2487                           ;receptor.c: 364: }
  2488                           ;receptor.c: 365: if (num == 'B')break;
  2489                           
  2490                           ; BSR set to: 1
  2491                           
  2492                           ; BSR set to: 1
  2493  007E2A  0E42               	movlw	66
  2494  007E2C  19A7               	xorwf	trabajo@num& (0+255),w,b
  2495  007E2E  B4D8               	btfsc	status,2,c
  2496  007E30  D00F               	goto	u2670
  2497                           
  2498                           ; BSR set to: 1
  2499                           
  2500                           ; BSR set to: 1
  2501                           
  2502                           ; BSR set to: 1
  2503  007E32  4BA2               	infsnz	trabajo@m_281& (0+255),f,b
  2504  007E34  2BA3               	incf	(trabajo@m_281+1)& (0+255),f,b
  2505  007E36                     l229:
  2506                           
  2507                           ; BSR set to: 1
  2508                           
  2509                           ; BSR set to: 1
  2510  007E36  51A4               	movf	trabajo@cuts& (0+255),w,b
  2511  007E38  6E22               	movwf	??_trabajo& (0+255),c
  2512  007E3A  6A23               	clrf	(??_trabajo+1)& (0+255),c
  2513  007E3C  5022               	movf	??_trabajo,w,c
  2514  007E3E  5DA2               	subwf	trabajo@m_281& (0+255),w,b
  2515  007E40  51A3               	movf	(trabajo@m_281+1)& (0+255),w,b
  2516  007E42  0A80               	xorlw	128
  2517  007E44  6E24               	movwf	(??_trabajo+2)& (0+255),c
  2518  007E46  5023               	movf	??_trabajo+1,w,c
  2519  007E48  0A80               	xorlw	128
  2520  007E4A  5824               	subwfb	(??_trabajo+2)& (0+255),w,c
  2521  007E4C  A0D8               	btfss	status,0,c
  2522  007E4E  D6D8               	goto	l230
  2523  007E50                     u2670:
  2524                           
  2525                           ; BSR set to: 1
  2526                           ;receptor.c: 366: }
  2527                           ;receptor.c: 367: if (num == 'B') {
  2528                           
  2529                           ; BSR set to: 1
  2530  007E50  0E42               	movlw	66
  2531  007E52  19A7               	xorwf	trabajo@num& (0+255),w,b
  2532  007E54  A4D8               	btfss	status,2,c
  2533  007E56  D01A               	goto	l250
  2534  007E58                     u2680:
  2535                           
  2536                           ; BSR set to: 1
  2537                           
  2538                           ; BSR set to: 1
  2539                           
  2540                           ; BSR set to: 1
  2541                           ;receptor.c: 368: while (UART_Read() != 'e');
  2542  007E58  EC8F  F034         	call	_UART_Read	;wreg free
  2543  007E5C  0A65               	xorlw	101
  2544  007E5E  A4D8               	btfss	status,2,c
  2545  007E60  D7FB               	goto	u2680
  2546                           
  2547                           ;receptor.c: 369: lcdclear();
  2548  007E62  ECA3  F034         	call	_lcdclear	;wreg free
  2549                           
  2550                           ;receptor.c: 370: lcdtext("Cancelado...");
  2551  007E66  0E86               	movlw	low STR_6
  2552  007E68  6E03               	movwf	lcdtext@t,c
  2553  007E6A  0E7F               	movlw	high STR_6
  2554  007E6C  6E04               	movwf	lcdtext@t+1,c
  2555  007E6E  EC04  F036         	call	_lcdtext	;wreg free
  2556                           
  2557                           ;receptor.c: 371: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2558  007E72  0E15               	movlw	21
  2559  007E74  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2560  007E76  0E4B               	movlw	75
  2561  007E78  6E22               	movwf	??_trabajo& (0+255),c
  2562  007E7A  0EBE               	movlw	190
  2563  007E7C                     u3007:
  2564  007E7C  2EE8               	decfsz	wreg,f,c
  2565  007E7E  D7FE               	bra	u3007
  2566  007E80  2E22               	decfsz	??_trabajo& (0+255),f,c
  2567  007E82  D7FC               	bra	u3007
  2568  007E84  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2569  007E86  D7FA               	bra	u3007
  2570  007E88  D000               	nop2	
  2571                           
  2572                           ;receptor.c: 372: } else {
  2573  007E8A  0012               	return	
  2574  007E8C                     l250:
  2575                           
  2576                           ;receptor.c: 373: lcdclear();
  2577  007E8C  ECA3  F034         	call	_lcdclear	;wreg free
  2578                           
  2579                           ;receptor.c: 374: lcdtext("Terminado...");
  2580  007E90  0E93               	movlw	low STR_34
  2581  007E92  6E03               	movwf	lcdtext@t,c
  2582  007E94  0E7F               	movlw	high STR_34
  2583  007E96  6E04               	movwf	lcdtext@t+1,c
  2584  007E98  EC04  F036         	call	_lcdtext	;wreg free
  2585                           
  2586                           ;receptor.c: 375: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2587  007E9C  0E15               	movlw	21
  2588  007E9E  6E23               	movwf	(??_trabajo+1)& (0+255),c
  2589  007EA0  0E4B               	movlw	75
  2590  007EA2  6E22               	movwf	??_trabajo& (0+255),c
  2591  007EA4  0EBE               	movlw	190
  2592  007EA6                     u3017:
  2593  007EA6  2EE8               	decfsz	wreg,f,c
  2594  007EA8  D7FE               	bra	u3017
  2595  007EAA  2E22               	decfsz	??_trabajo& (0+255),f,c
  2596  007EAC  D7FC               	bra	u3017
  2597  007EAE  2E23               	decfsz	(??_trabajo+1)& (0+255),f,c
  2598  007EB0  D7FA               	bra	u3017
  2599  007EB2  D000               	nop2	
  2600  007EB4  0012               	return	
  2601  007EB6                     __end_of_trabajo:
  2602                           	opt stack 0
  2603                           tblptru	equ	0xFF8
  2604                           tblptrh	equ	0xFF7
  2605                           tblptrl	equ	0xFF6
  2606                           tablat	equ	0xFF5
  2607                           prodl	equ	0xFF3
  2608                           wreg	equ	0xFE8
  2609                           indf2	equ	0xFDF
  2610                           postinc2	equ	0xFDE
  2611                           postdec2	equ	0xFDD
  2612                           plusw2	equ	0xFDB
  2613                           fsr2h	equ	0xFDA
  2614                           fsr2l	equ	0xFD9
  2615                           status	equ	0xFD8
  2616                           
  2617 ;; *************** function _trunc *****************
  2618 ;; Defined at:
  2619 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\trunc.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  x               3   25[COMRAM] void 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  i               3   28[COMRAM] void 
  2624 ;;  expon           2   31[COMRAM] int 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  3   25[COMRAM] int 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2634 ;;      Params:         3       0       0       0       0       0       0       0       0
  2635 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2637 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2638 ;;Total ram usage:        8 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    2
  2641 ;; This function calls:
  2642 ;;		___altoft
  2643 ;;		___fttol
  2644 ;;		_frexp
  2645 ;; This function is called by:
  2646 ;;		_trabajo
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text3
  2651  006BAC                     __ptext3:
  2652                           	opt stack 0
  2653  006BAC                     _trunc:
  2654                           	opt stack 26
  2655                           
  2656                           ;incstack = 0
  2657  006BAC  C01A  F001         	movff	trunc@x,frexp@value
  2658  006BB0  C01B  F002         	movff	trunc@x+1,frexp@value+1
  2659  006BB4  C01C  F003         	movff	trunc@x+2,frexp@value+2
  2660  006BB8  0E20               	movlw	low trunc@expon
  2661  006BBA  6E04               	movwf	frexp@eptr,c
  2662  006BBC  0E00               	movlw	high trunc@expon
  2663  006BBE  6E05               	movwf	frexp@eptr+1,c
  2664  006BC0  EC79  F036         	call	_frexp	;wreg free
  2665  006BC4  BE21               	btfsc	trunc@expon+1,7,c
  2666  006BC6  0012               	return	
  2667                           
  2668                           ;	Return value of _trunc is never used
  2669  006BC8  5021               	movf	trunc@expon+1,w,c
  2670  006BCA  E11D               	bnz	l866
  2671  006BCC  0E15               	movlw	21
  2672  006BCE  5C20               	subwf	trunc@expon,w,c
  2673  006BD0  B0D8               	btfsc	status,0,c
  2674  006BD2  0012               	return	
  2675                           
  2676                           ;	Return value of _trunc is never used
  2677  006BD4  C01A  F001         	movff	trunc@x,___fttol@f1
  2678  006BD8  C01B  F002         	movff	trunc@x+1,___fttol@f1+1
  2679  006BDC  C01C  F003         	movff	trunc@x+2,___fttol@f1+2
  2680  006BE0  ECB4  F037         	call	___fttol	;wreg free
  2681  006BE4  C001  F010         	movff	?___fttol,___altoft@c
  2682  006BE8  C002  F011         	movff	?___fttol+1,___altoft@c+1
  2683  006BEC  C003  F012         	movff	?___fttol+2,___altoft@c+2
  2684  006BF0  C004  F013         	movff	?___fttol+3,___altoft@c+3
  2685  006BF4  EC3D  F036         	call	___altoft	;wreg free
  2686  006BF8  C010  F01D         	movff	?___altoft,trunc@i
  2687  006BFC  C011  F01E         	movff	?___altoft+1,trunc@i+1
  2688  006C00  C012  F01F         	movff	?___altoft+2,trunc@i+2
  2689  006C04  0012               	return	
  2690  006C06                     l866:
  2691  006C06  0012               	return		;funcret
  2692  006C08                     __end_of_trunc:
  2693                           	opt stack 0
  2694                           tblptru	equ	0xFF8
  2695                           tblptrh	equ	0xFF7
  2696                           tblptrl	equ	0xFF6
  2697                           tablat	equ	0xFF5
  2698                           prodl	equ	0xFF3
  2699                           wreg	equ	0xFE8
  2700                           indf2	equ	0xFDF
  2701                           postinc2	equ	0xFDE
  2702                           postdec2	equ	0xFDD
  2703                           plusw2	equ	0xFDB
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _frexp *****************
  2709 ;; Defined at:
  2710 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  value           3    0[COMRAM] int 
  2713 ;;  eptr            2    3[COMRAM] PTR int 
  2714 ;;		 -> trunc@expon(2), 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  3    0[COMRAM] PTR int 
  2719 ;; Registers used:
  2720 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2726 ;;      Params:         5       0       0       0       0       0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2728 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2729 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2730 ;;Total ram usage:        7 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; This function calls:
  2733 ;;		Nothing
  2734 ;; This function is called by:
  2735 ;;		_trunc
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text4
  2740  006CF2                     __ptext4:
  2741                           	opt stack 0
  2742  006CF2                     _frexp:
  2743                           	opt stack 27
  2744                           
  2745                           ;incstack = 0
  2746  006CF2  5001               	movf	frexp@value,w,c
  2747  006CF4  1002               	iorwf	frexp@value+1,w,c
  2748  006CF6  1003               	iorwf	frexp@value+2,w,c
  2749  006CF8  A4D8               	btfss	status,2,c
  2750  006CFA  D009               	goto	l891
  2751  006CFC  C004  FFD9         	movff	frexp@eptr,fsr2l
  2752  006D00  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2753  006D04  0E00               	movlw	0
  2754  006D06  6EDE               	movwf	postinc2,c
  2755  006D08  0E00               	movlw	0
  2756  006D0A  6EDD               	movwf	postdec2,c
  2757                           
  2758                           ;	Return value of _frexp is never used
  2759  006D0C  0012               	return	
  2760  006D0E                     l891:
  2761  006D0E  5003               	movf	frexp@value+2,w,c
  2762  006D10  0B7F               	andlw	127
  2763  006D12  6E06               	movwf	??_frexp& (0+255),c
  2764  006D14  6A07               	clrf	(??_frexp+1)& (0+255),c
  2765  006D16  90D8               	bcf	status,0,c
  2766  006D18  3606               	rlcf	??_frexp,f,c
  2767  006D1A  3607               	rlcf	??_frexp+1,f,c
  2768  006D1C  C004  FFD9         	movff	frexp@eptr,fsr2l
  2769  006D20  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2770  006D24  C006  FFDE         	movff	??_frexp,postinc2
  2771  006D28  C007  FFDD         	movff	??_frexp+1,postdec2
  2772  006D2C  AE02               	btfss	frexp@value+1,7,c
  2773  006D2E  D003               	goto	u1710
  2774  006D30  6A06               	clrf	??_frexp& (0+255),c
  2775  006D32  2A06               	incf	??_frexp& (0+255),f,c
  2776  006D34  D001               	goto	u1718
  2777  006D36                     u1710:
  2778  006D36  6A06               	clrf	??_frexp& (0+255),c
  2779  006D38                     u1718:
  2780  006D38  5006               	movf	??_frexp,w,c
  2781  006D3A  C004  FFD9         	movff	frexp@eptr,fsr2l
  2782  006D3E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2783  006D42  12DE               	iorwf	postinc2,f,c
  2784  006D44  0E00               	movlw	0
  2785  006D46  12DD               	iorwf	postdec2,f,c
  2786  006D48  C004  FFD9         	movff	frexp@eptr,fsr2l
  2787  006D4C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2788  006D50  0E82               	movlw	130
  2789  006D52  26DE               	addwf	postinc2,f,c
  2790  006D54  0EFF               	movlw	255
  2791  006D56  22DD               	addwfc	postdec2,f,c
  2792  006D58  8003               	bsf	frexp@value+2,0,c
  2793  006D5A  8203               	bsf	frexp@value+2,1,c
  2794  006D5C  8403               	bsf	frexp@value+2,2,c
  2795  006D5E  8603               	bsf	frexp@value+2,3,c
  2796  006D60  8803               	bsf	frexp@value+2,4,c
  2797  006D62  8A03               	bsf	frexp@value+2,5,c
  2798  006D64  9C03               	bcf	frexp@value+2,6,c
  2799  006D66  9E02               	bcf	frexp@value+1,7,c
  2800  006D68  0012               	return	
  2801  006D6A                     __end_of_frexp:
  2802                           	opt stack 0
  2803                           tblptru	equ	0xFF8
  2804                           tblptrh	equ	0xFF7
  2805                           tblptrl	equ	0xFF6
  2806                           tablat	equ	0xFF5
  2807                           prodl	equ	0xFF3
  2808                           wreg	equ	0xFE8
  2809                           indf2	equ	0xFDF
  2810                           postinc2	equ	0xFDE
  2811                           postdec2	equ	0xFDD
  2812                           plusw2	equ	0xFDB
  2813                           fsr2h	equ	0xFDA
  2814                           fsr2l	equ	0xFD9
  2815                           status	equ	0xFD8
  2816                           
  2817 ;; *************** function ___fttol *****************
  2818 ;; Defined at:
  2819 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  f1              3    0[COMRAM] float 
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;  lval            4   10[COMRAM] unsigned long 
  2824 ;;  exp1            1   14[COMRAM] unsigned char 
  2825 ;;  sign1           1    9[COMRAM] unsigned char 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  4    0[COMRAM] long 
  2828 ;; Registers used:
  2829 ;;		wreg, status,2, status,0
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2835 ;;      Params:         4       0       0       0       0       0       0       0       0
  2836 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2837 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2838 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2839 ;;Total ram usage:       15 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; This function calls:
  2842 ;;		Nothing
  2843 ;; This function is called by:
  2844 ;;		_trunc
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text5
  2849  006F68                     __ptext5:
  2850                           	opt stack 0
  2851  006F68                     ___fttol:
  2852                           	opt stack 27
  2853                           
  2854                           ;incstack = 0
  2855  006F68  C003  F005         	movff	___fttol@f1+2,??___fttol
  2856  006F6C  6A06               	clrf	(??___fttol+1)& (0+255),c
  2857  006F6E  6A07               	clrf	(??___fttol+2)& (0+255),c
  2858  006F70  3402               	rlcf	___fttol@f1+1,w,c
  2859  006F72  3605               	rlcf	??___fttol& (0+255),f,c
  2860  006F74  E301               	bnc	u1561
  2861  006F76  8006               	bsf	(??___fttol+1)& (0+255),0,c
  2862  006F78                     u1561:
  2863  006F78  5005               	movf	??___fttol,w,c
  2864  006F7A  6E0F               	movwf	___fttol@exp1,c
  2865  006F7C  500F               	movf	___fttol@exp1,w,c
  2866  006F7E  A4D8               	btfss	status,2,c
  2867  006F80  D009               	goto	l630
  2868  006F82  0E00               	movlw	0
  2869  006F84  6E01               	movwf	?___fttol,c
  2870  006F86  0E00               	movlw	0
  2871  006F88  6E02               	movwf	?___fttol+1,c
  2872  006F8A  0E00               	movlw	0
  2873  006F8C  6E03               	movwf	?___fttol+2,c
  2874  006F8E  0E00               	movlw	0
  2875  006F90  6E04               	movwf	?___fttol+3,c
  2876  006F92  0012               	return	
  2877  006F94                     l630:
  2878  006F94  0E17               	movlw	23
  2879  006F96  6E05               	movwf	??___fttol& (0+255),c
  2880  006F98  C001  F006         	movff	___fttol@f1,??___fttol+1
  2881  006F9C  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  2882  006FA0  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  2883  006FA4  2805               	incf	??___fttol,w,c
  2884  006FA6  6E09               	movwf	(??___fttol+4)& (0+255),c
  2885  006FA8  D004               	goto	u1580
  2886  006FAA                     u1585:
  2887  006FAA  90D8               	bcf	status,0,c
  2888  006FAC  3208               	rrcf	??___fttol+3,f,c
  2889  006FAE  3207               	rrcf	??___fttol+2,f,c
  2890  006FB0  3206               	rrcf	??___fttol+1,f,c
  2891  006FB2                     u1580:
  2892  006FB2  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  2893  006FB4  D7FA               	goto	u1585
  2894  006FB6  5006               	movf	??___fttol+1,w,c
  2895  006FB8  6E0A               	movwf	___fttol@sign1,c
  2896  006FBA  8E02               	bsf	___fttol@f1+1,7,c
  2897  006FBC  0EFF               	movlw	255
  2898  006FBE  1601               	andwf	___fttol@f1,f,c
  2899  006FC0  0EFF               	movlw	255
  2900  006FC2  1602               	andwf	___fttol@f1+1,f,c
  2901  006FC4  0E00               	movlw	0
  2902  006FC6  1603               	andwf	___fttol@f1+2,f,c
  2903  006FC8  5001               	movf	___fttol@f1,w,c
  2904  006FCA  6E0B               	movwf	___fttol@lval,c
  2905  006FCC  5002               	movf	___fttol@f1+1,w,c
  2906  006FCE  6E0C               	movwf	___fttol@lval+1,c
  2907  006FD0  5003               	movf	___fttol@f1+2,w,c
  2908  006FD2  6E0D               	movwf	___fttol@lval+2,c
  2909  006FD4  6A0E               	clrf	___fttol@lval+3,c
  2910  006FD6  0E8E               	movlw	142
  2911  006FD8  5E0F               	subwf	___fttol@exp1,f,c
  2912  006FDA  AE0F               	btfss	___fttol@exp1,7,c
  2913  006FDC  D016               	goto	l632
  2914  006FDE  500F               	movf	___fttol@exp1,w,c
  2915  006FE0  0A80               	xorlw	128
  2916  006FE2  0F8F               	addlw	143
  2917  006FE4  B0D8               	btfsc	status,0,c
  2918  006FE6  D009               	goto	l633
  2919  006FE8  0E00               	movlw	0
  2920  006FEA  6E01               	movwf	?___fttol,c
  2921  006FEC  0E00               	movlw	0
  2922  006FEE  6E02               	movwf	?___fttol+1,c
  2923  006FF0  0E00               	movlw	0
  2924  006FF2  6E03               	movwf	?___fttol+2,c
  2925  006FF4  0E00               	movlw	0
  2926  006FF6  6E04               	movwf	?___fttol+3,c
  2927  006FF8  0012               	return	
  2928  006FFA                     l633:
  2929  006FFA  90D8               	bcf	status,0,c
  2930  006FFC  320E               	rrcf	___fttol@lval+3,f,c
  2931  006FFE  320D               	rrcf	___fttol@lval+2,f,c
  2932  007000  320C               	rrcf	___fttol@lval+1,f,c
  2933  007002  320B               	rrcf	___fttol@lval,f,c
  2934  007004  3E0F               	incfsz	___fttol@exp1,f,c
  2935  007006  D7F9               	goto	l633
  2936  007008  D015               	goto	u1620
  2937  00700A                     l632:
  2938  00700A  0E17               	movlw	23
  2939  00700C  640F               	cpfsgt	___fttol@exp1,c
  2940  00700E  D00F               	goto	l638
  2941  007010  0E00               	movlw	0
  2942  007012  6E01               	movwf	?___fttol,c
  2943  007014  0E00               	movlw	0
  2944  007016  6E02               	movwf	?___fttol+1,c
  2945  007018  0E00               	movlw	0
  2946  00701A  6E03               	movwf	?___fttol+2,c
  2947  00701C  0E00               	movlw	0
  2948  00701E  6E04               	movwf	?___fttol+3,c
  2949  007020  0012               	return	
  2950  007022  90D8               	bcf	status,0,c
  2951  007024  360B               	rlcf	___fttol@lval,f,c
  2952  007026  360C               	rlcf	___fttol@lval+1,f,c
  2953  007028  360D               	rlcf	___fttol@lval+2,f,c
  2954  00702A  360E               	rlcf	___fttol@lval+3,f,c
  2955  00702C  060F               	decf	___fttol@exp1,f,c
  2956  00702E                     l638:
  2957  00702E  500F               	movf	___fttol@exp1,w,c
  2958  007030  A4D8               	btfss	status,2,c
  2959  007032  D7F7               	goto	l639
  2960  007034                     u1620:
  2961  007034  500A               	movf	___fttol@sign1,w,c
  2962  007036  B4D8               	btfsc	status,2,c
  2963  007038  D008               	goto	l641
  2964  00703A  1E0E               	comf	___fttol@lval+3,f,c
  2965  00703C  1E0D               	comf	___fttol@lval+2,f,c
  2966  00703E  1E0C               	comf	___fttol@lval+1,f,c
  2967  007040  6C0B               	negf	___fttol@lval,c
  2968  007042  0E00               	movlw	0
  2969  007044  220C               	addwfc	___fttol@lval+1,f,c
  2970  007046  220D               	addwfc	___fttol@lval+2,f,c
  2971  007048  220E               	addwfc	___fttol@lval+3,f,c
  2972  00704A                     l641:
  2973  00704A  C00B  F001         	movff	___fttol@lval,?___fttol
  2974  00704E  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  2975  007052  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  2976  007056  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  2977  00705A  0012               	return	
  2978  00705C                     __end_of___fttol:
  2979                           	opt stack 0
  2980                           tblptru	equ	0xFF8
  2981                           tblptrh	equ	0xFF7
  2982                           tblptrl	equ	0xFF6
  2983                           tablat	equ	0xFF5
  2984                           prodl	equ	0xFF3
  2985                           wreg	equ	0xFE8
  2986                           indf2	equ	0xFDF
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           plusw2	equ	0xFDB
  2990                           fsr2h	equ	0xFDA
  2991                           fsr2l	equ	0xFD9
  2992                           status	equ	0xFD8
  2993                           
  2994 ;; *************** function ___altoft *****************
  2995 ;; Defined at:
  2996 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  c               4   15[COMRAM] long 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  sign            1   24[COMRAM] unsigned char 
  3001 ;;  exp             1   23[COMRAM] unsigned char 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  3   15[COMRAM] float 
  3004 ;; Registers used:
  3005 ;;		wreg, status,2, status,0, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3011 ;;      Params:         4       0       0       0       0       0       0       0       0
  3012 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3013 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3014 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3015 ;;Total ram usage:       10 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    1
  3018 ;; This function calls:
  3019 ;;		___ftpack
  3020 ;; This function is called by:
  3021 ;;		_trunc
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text6
  3026  006C7A                     __ptext6:
  3027                           	opt stack 0
  3028  006C7A                     ___altoft:
  3029                           	opt stack 26
  3030                           
  3031                           ;incstack = 0
  3032  006C7A  0E00               	movlw	0
  3033  006C7C  6E19               	movwf	___altoft@sign,c
  3034  006C7E  0E8E               	movlw	142
  3035  006C80  6E18               	movwf	___altoft@exp,c
  3036  006C82  AE13               	btfss	___altoft@c+3,7,c
  3037  006C84  D011               	goto	l400
  3038  006C86  1E13               	comf	___altoft@c+3,f,c
  3039  006C88  1E12               	comf	___altoft@c+2,f,c
  3040  006C8A  1E11               	comf	___altoft@c+1,f,c
  3041  006C8C  6C10               	negf	___altoft@c,c
  3042  006C8E  0E00               	movlw	0
  3043  006C90  2211               	addwfc	___altoft@c+1,f,c
  3044  006C92  2212               	addwfc	___altoft@c+2,f,c
  3045  006C94  2213               	addwfc	___altoft@c+3,f,c
  3046  006C96  0E01               	movlw	1
  3047  006C98  6E19               	movwf	___altoft@sign,c
  3048  006C9A  D006               	goto	l400
  3049  006C9C  90D8               	bcf	status,0,c
  3050  006C9E  3213               	rrcf	___altoft@c+3,f,c
  3051  006CA0  3212               	rrcf	___altoft@c+2,f,c
  3052  006CA2  3211               	rrcf	___altoft@c+1,f,c
  3053  006CA4  3210               	rrcf	___altoft@c,f,c
  3054  006CA6  2A18               	incf	___altoft@exp,f,c
  3055  006CA8                     l400:
  3056  006CA8  0E00               	movlw	0
  3057  006CAA  1410               	andwf	___altoft@c,w,c
  3058  006CAC  6E14               	movwf	??___altoft& (0+255),c
  3059  006CAE  0E00               	movlw	0
  3060  006CB0  1411               	andwf	___altoft@c+1,w,c
  3061  006CB2  6E15               	movwf	(??___altoft+1)& (0+255),c
  3062  006CB4  0E00               	movlw	0
  3063  006CB6  1412               	andwf	___altoft@c+2,w,c
  3064  006CB8  6E16               	movwf	(??___altoft+2)& (0+255),c
  3065  006CBA  0EFF               	movlw	255
  3066  006CBC  1413               	andwf	___altoft@c+3,w,c
  3067  006CBE  6E17               	movwf	(??___altoft+3)& (0+255),c
  3068  006CC0  5014               	movf	??___altoft,w,c
  3069  006CC2  1015               	iorwf	??___altoft+1,w,c
  3070  006CC4  1016               	iorwf	??___altoft+2,w,c
  3071  006CC6  1017               	iorwf	??___altoft+3,w,c
  3072  006CC8  A4D8               	btfss	status,2,c
  3073  006CCA  D7E8               	goto	l401
  3074  006CCC  C010  F001         	movff	___altoft@c,___ftpack@arg
  3075  006CD0  C011  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3076  006CD4  C012  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3077  006CD8  C018  F004         	movff	___altoft@exp,___ftpack@exp
  3078  006CDC  C019  F005         	movff	___altoft@sign,___ftpack@sign
  3079  006CE0  ECF7  F036         	call	___ftpack	;wreg free
  3080  006CE4  C001  F010         	movff	?___ftpack,?___altoft
  3081  006CE8  C002  F011         	movff	?___ftpack+1,?___altoft+1
  3082  006CEC  C003  F012         	movff	?___ftpack+2,?___altoft+2
  3083  006CF0  0012               	return	
  3084  006CF2                     __end_of___altoft:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           prodl	equ	0xFF3
  3091                           wreg	equ	0xFE8
  3092                           indf2	equ	0xFDF
  3093                           postinc2	equ	0xFDE
  3094                           postdec2	equ	0xFDD
  3095                           plusw2	equ	0xFDB
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _sprintf *****************
  3101 ;; Defined at:
  3102 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3105 ;;		 -> trabajo@outx(20), trabajo@mx(20), trabajo@cutx(20), 
  3106 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3107 ;;		 -> STR_27(3), STR_25(3), STR_19(3), STR_14(3), 
  3108 ;;		 -> STR_12(3), 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;  tmpval          4    0        struct .
  3111 ;;  cp              3    0        PTR const unsigned char 
  3112 ;;  val             2   23[COMRAM] unsigned int 
  3113 ;;  ap              2   19[COMRAM] PTR void [1]
  3114 ;;		 -> ?_sprintf(2), 
  3115 ;;  len             2    0        unsigned int 
  3116 ;;  c               1   25[COMRAM] char 
  3117 ;;  prec            1   22[COMRAM] char 
  3118 ;;  flag            1   21[COMRAM] unsigned char 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  2   12[COMRAM] int 
  3121 ;; Registers used:
  3122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3128 ;;      Params:         6       0       0       0       0       0       0       0       0
  3129 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3130 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3131 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3132 ;;Total ram usage:       14 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    1
  3135 ;; This function calls:
  3136 ;;		___lwdiv
  3137 ;;		___lwmod
  3138 ;; This function is called by:
  3139 ;;		_trabajo
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text7
  3144  007188                     __ptext7:
  3145                           	opt stack 0
  3146  007188                     _sprintf:
  3147                           	opt stack 27
  3148                           
  3149                           ;doprnt.c: 494: va_list ap;
  3150                           ;doprnt.c: 499: signed char c;
  3151                           ;doprnt.c: 506: signed char prec;
  3152                           ;doprnt.c: 508: unsigned char flag;
  3153                           ;doprnt.c: 523: union {
  3154                           ;doprnt.c: 524: unsigned long vd;
  3155                           ;doprnt.c: 525: double integ;
  3156                           ;doprnt.c: 526: } tmpval;
  3157                           ;doprnt.c: 528: unsigned int val;
  3158                           ;doprnt.c: 529: unsigned len;
  3159                           ;doprnt.c: 530: const char * cp;
  3160                           ;doprnt.c: 533: *ap = __va_start();
  3161                           
  3162                           ;incstack = 0
  3163  007188  0E11               	movlw	low (?_sprintf+4)
  3164  00718A  6E14               	movwf	sprintf@ap,c
  3165  00718C  0E00               	movlw	high (?_sprintf+4)
  3166  00718E  6E15               	movwf	sprintf@ap+1,c
  3167                           
  3168                           ;doprnt.c: 536: while(c = *f++) {
  3169  007190  D08C               	goto	u2210
  3170  007192                     
  3171                           ;doprnt.c: 538: if(c != '%')
  3172  007192  0E25               	movlw	37
  3173  007194  181A               	xorwf	sprintf@c,w,c
  3174  007196  B4D8               	btfsc	status,2,c
  3175  007198  D009               	goto	l298
  3176                           
  3177                           ;doprnt.c: 540: {
  3178                           ;doprnt.c: 541: ((*sp++ = (c)));
  3179  00719A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3180  00719E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3181  0071A2  C01A  FFDF         	movff	sprintf@c,indf2
  3182  0071A6  4A0D               	infsnz	sprintf@sp,f,c
  3183  0071A8  2A0E               	incf	sprintf@sp+1,f,c
  3184                           
  3185                           ;doprnt.c: 542: continue;
  3186  0071AA  D07F               	goto	u2210
  3187  0071AC                     l298:
  3188                           
  3189                           ;doprnt.c: 543: }
  3190                           ;doprnt.c: 548: flag = 0;
  3191  0071AC  0E00               	movlw	0
  3192  0071AE  6E16               	movwf	sprintf@flag,c
  3193                           
  3194                           ;doprnt.c: 822: }
  3195                           
  3196                           ;doprnt.c: 813: continue;
  3197                           
  3198                           ;doprnt.c: 802: default:
  3199                           
  3200                           ;doprnt.c: 698: case 'i':
  3201                           ;doprnt.c: 699: break;
  3202                           
  3203                           ;doprnt.c: 697: case 'd':
  3204                           
  3205                           ;doprnt.c: 638: goto alldone;
  3206                           
  3207                           ;doprnt.c: 637: case 0:
  3208                           
  3209                           ;doprnt.c: 635: switch(c = *f++) {
  3210  0071B0  C00F  FFF6         	movff	sprintf@f,tblptrl
  3211  0071B4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3212  0071B8  4A0F               	infsnz	sprintf@f,f,c
  3213  0071BA  2A10               	incf	sprintf@f+1,f,c
  3214  0071BC                     	if	0	;tblptru may be non-zero
  3215  0071BC                     	endif
  3216  0071BC                     	if	0	;tblptru may be non-zero
  3217  0071BC                     	endif
  3218  0071BC  0008               	tblrd		*
  3219  0071BE  CFF5 F01A          	movff	tablat,sprintf@c
  3220  0071C2  501A               	movf	sprintf@c,w,c
  3221                           
  3222                           ; Switch size 1, requested type "space"
  3223                           ; Number of cases is 3, Range of values is 0 to 105
  3224                           ; switch strategies available:
  3225                           ; Name         Instructions Cycles
  3226                           ; simple_byte           10     6 (average)
  3227                           ;	Chosen strategy is simple_byte
  3228  0071C4  0A00               	xorlw	0	; case 0
  3229  0071C6  B4D8               	btfsc	status,2,c
  3230  0071C8  D07C               	goto	u2220
  3231  0071CA  0A64               	xorlw	100	; case 100
  3232  0071CC  B4D8               	btfsc	status,2,c
  3233  0071CE  D003               	goto	l304
  3234  0071D0  0A0D               	xorlw	13	; case 105
  3235  0071D2  A4D8               	btfss	status,2,c
  3236  0071D4  D06A               	goto	u2210
  3237  0071D6                     l304:
  3238                           
  3239                           ;doprnt.c: 1253: {
  3240                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3241  0071D6  C014  FFD9         	movff	sprintf@ap,fsr2l
  3242  0071DA  C015  FFDA         	movff	sprintf@ap+1,fsr2h
  3243  0071DE  CFDE F018          	movff	postinc2,sprintf@val
  3244  0071E2  CFDD F019          	movff	postdec2,sprintf@val+1
  3245  0071E6  0E02               	movlw	2
  3246  0071E8  2614               	addwf	sprintf@ap,f,c
  3247  0071EA  0E00               	movlw	0
  3248  0071EC  2215               	addwfc	sprintf@ap+1,f,c
  3249                           
  3250                           ;doprnt.c: 1261: if((int)val < 0) {
  3251  0071EE  AE19               	btfss	sprintf@val+1,7,c
  3252  0071F0  D006               	goto	l306
  3253                           
  3254                           ;doprnt.c: 1262: flag |= 0x03;
  3255  0071F2  0E03               	movlw	3
  3256  0071F4  1216               	iorwf	sprintf@flag,f,c
  3257                           
  3258                           ;doprnt.c: 1263: val = -val;
  3259  0071F6  6C18               	negf	sprintf@val,c
  3260  0071F8  1E19               	comf	sprintf@val+1,f,c
  3261  0071FA  B0D8               	btfsc	status,0,c
  3262  0071FC  2A19               	incf	sprintf@val+1,f,c
  3263  0071FE                     l306:
  3264                           
  3265                           ;doprnt.c: 1264: }
  3266                           ;doprnt.c: 1266: }
  3267                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3268  0071FE  0E01               	movlw	1
  3269  007200  6E1A               	movwf	sprintf@c,c
  3270  007202                     l2236:
  3271  007202  0E05               	movlw	5
  3272  007204  181A               	xorwf	sprintf@c,w,c
  3273  007206  B4D8               	btfsc	status,2,c
  3274  007208  D012               	goto	u2190
  3275                           
  3276                           ;doprnt.c: 1306: if(val < dpowers[c])
  3277  00720A  501A               	movf	sprintf@c,w,c
  3278  00720C  0D02               	mullw	2
  3279  00720E  0EB7               	movlw	low _dpowers
  3280  007210  24F3               	addwf	prodl,w,c
  3281  007212  6EF6               	movwf	tblptrl,c
  3282  007214  0E7E               	movlw	high _dpowers
  3283  007216  20F4               	addwfc	prodh,w,c
  3284  007218  6EF7               	movwf	tblptrh,c
  3285  00721A                     	if	0	;There are less than 3 active tblptr bytes
  3286  00721A                     	endif
  3287  00721A  0009               	tblrd		*+
  3288  00721C  50F5               	movf	tablat,w,c
  3289  00721E  5C18               	subwf	sprintf@val,w,c
  3290  007220  0009               	tblrd		*+
  3291  007222  50F5               	movf	tablat,w,c
  3292  007224  5819               	subwfb	sprintf@val+1,w,c
  3293  007226  A0D8               	btfss	status,0,c
  3294  007228  D002               	goto	u2190
  3295                           
  3296                           ;doprnt.c: 1307: break;
  3297  00722A  2A1A               	incf	sprintf@c,f,c
  3298  00722C  D7EA               	goto	l2236
  3299  00722E                     u2190:
  3300                           
  3301                           ;doprnt.c: 1422: {
  3302                           ;doprnt.c: 1438: if(flag & 0x03)
  3303  00722E  C016  F013         	movff	sprintf@flag,??_sprintf
  3304  007232  0E03               	movlw	3
  3305  007234  1613               	andwf	??_sprintf,f,c
  3306  007236  B4D8               	btfsc	status,2,c
  3307  007238  D008               	goto	l310
  3308                           
  3309                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3310  00723A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3311  00723E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3312  007242  0E2D               	movlw	45
  3313  007244  6EDF               	movwf	indf2,c
  3314  007246  4A0D               	infsnz	sprintf@sp,f,c
  3315  007248  2A0E               	incf	sprintf@sp+1,f,c
  3316  00724A                     l310:
  3317                           
  3318                           ;doprnt.c: 1469: }
  3319                           ;doprnt.c: 1472: prec = c;
  3320  00724A  C01A  F017         	movff	sprintf@c,sprintf@prec
  3321                           
  3322                           ;doprnt.c: 1474: while(prec--) {
  3323  00724E  D029               	goto	l311
  3324  007250                     
  3325                           ;doprnt.c: 1478: {
  3326                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3327  007250  5017               	movf	sprintf@prec,w,c
  3328  007252  0D02               	mullw	2
  3329  007254  0EB7               	movlw	low _dpowers
  3330  007256  24F3               	addwf	prodl,w,c
  3331  007258  6EF6               	movwf	tblptrl,c
  3332  00725A  0E7E               	movlw	high _dpowers
  3333  00725C  20F4               	addwfc	prodh,w,c
  3334  00725E  6EF7               	movwf	tblptrh,c
  3335  007260                     	if	0	;There are less than 3 active tblptr bytes
  3336  007260                     	endif
  3337  007260  0009               	tblrd		*+
  3338  007262  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3339  007266  000A               	tblrd		*-
  3340  007268  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3341  00726C  C018  F001         	movff	sprintf@val,___lwdiv@dividend
  3342  007270  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  3343  007274  ECAD  F035         	call	___lwdiv	;wreg free
  3344  007278  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3345  00727C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3346  007280  0E00               	movlw	0
  3347  007282  6E0B               	movwf	___lwmod@divisor+1,c
  3348  007284  0E0A               	movlw	10
  3349  007286  6E0A               	movwf	___lwmod@divisor,c
  3350  007288  EC65  F035         	call	___lwmod	;wreg free
  3351  00728C  5008               	movf	?___lwmod,w,c
  3352  00728E  0F30               	addlw	48
  3353  007290  6E1A               	movwf	sprintf@c,c
  3354                           
  3355                           ;doprnt.c: 1523: }
  3356                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3357  007292  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3358  007296  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3359  00729A  C01A  FFDF         	movff	sprintf@c,indf2
  3360  00729E  4A0D               	infsnz	sprintf@sp,f,c
  3361  0072A0  2A0E               	incf	sprintf@sp+1,f,c
  3362  0072A2                     l311:
  3363  0072A2  0617               	decf	sprintf@prec,f,c
  3364  0072A4  2817               	incf	sprintf@prec,w,c
  3365  0072A6  A4D8               	btfss	status,2,c
  3366  0072A8  D7D3               	goto	l312
  3367  0072AA                     u2210:
  3368  0072AA  C00F  FFF6         	movff	sprintf@f,tblptrl
  3369  0072AE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3370  0072B2  4A0F               	infsnz	sprintf@f,f,c
  3371  0072B4  2A10               	incf	sprintf@f+1,f,c
  3372  0072B6                     	if	0	;tblptru may be non-zero
  3373  0072B6                     	endif
  3374  0072B6                     	if	0	;tblptru may be non-zero
  3375  0072B6                     	endif
  3376  0072B6  0008               	tblrd		*
  3377  0072B8  CFF5 F01A          	movff	tablat,sprintf@c
  3378  0072BC  501A               	movf	sprintf@c,w,c
  3379  0072BE  A4D8               	btfss	status,2,c
  3380  0072C0  D768               	goto	l297
  3381  0072C2                     u2220:
  3382                           
  3383                           ;doprnt.c: 1538: *sp = 0;
  3384                           
  3385                           ;doprnt.c: 1525: }
  3386                           ;doprnt.c: 1533: }
  3387                           ;doprnt.c: 1535: alldone:
  3388  0072C2  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3389  0072C6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3390  0072CA  0E00               	movlw	0
  3391  0072CC  6EDF               	movwf	indf2,c
  3392  0072CE  0012               	return	
  3393  0072D0                     __end_of_sprintf:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           prodh	equ	0xFF4
  3400                           prodl	equ	0xFF3
  3401                           wreg	equ	0xFE8
  3402                           indf2	equ	0xFDF
  3403                           postinc2	equ	0xFDE
  3404                           postdec2	equ	0xFDD
  3405                           plusw2	equ	0xFDB
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function ___lwmod *****************
  3411 ;; Defined at:
  3412 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  dividend        2    7[COMRAM] unsigned int 
  3415 ;;  divisor         2    9[COMRAM] unsigned int 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  counter         1   11[COMRAM] unsigned char 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  2    7[COMRAM] unsigned int 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3427 ;;      Params:         4       0       0       0       0       0       0       0       0
  3428 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3430 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3431 ;;Total ram usage:        5 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; This function calls:
  3434 ;;		Nothing
  3435 ;; This function is called by:
  3436 ;;		_sprintf
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text8
  3441  006ACA                     __ptext8:
  3442                           	opt stack 0
  3443  006ACA                     ___lwmod:
  3444                           	opt stack 27
  3445                           
  3446                           ;incstack = 0
  3447  006ACA  500A               	movf	___lwmod@divisor,w,c
  3448  006ACC  100B               	iorwf	___lwmod@divisor+1,w,c
  3449  006ACE  B4D8               	btfsc	status,2,c
  3450  006AD0  D018               	goto	l734
  3451  006AD2  0E01               	movlw	1
  3452  006AD4  6E0C               	movwf	___lwmod@counter,c
  3453  006AD6  D004               	goto	l729
  3454  006AD8  90D8               	bcf	status,0,c
  3455  006ADA  360A               	rlcf	___lwmod@divisor,f,c
  3456  006ADC  360B               	rlcf	___lwmod@divisor+1,f,c
  3457  006ADE  2A0C               	incf	___lwmod@counter,f,c
  3458  006AE0                     l729:
  3459  006AE0  AE0B               	btfss	___lwmod@divisor+1,7,c
  3460  006AE2  D7FA               	goto	l730
  3461  006AE4                     u1680:
  3462  006AE4  500A               	movf	___lwmod@divisor,w,c
  3463  006AE6  5C08               	subwf	___lwmod@dividend,w,c
  3464  006AE8  500B               	movf	___lwmod@divisor+1,w,c
  3465  006AEA  5809               	subwfb	___lwmod@dividend+1,w,c
  3466  006AEC  A0D8               	btfss	status,0,c
  3467  006AEE  D004               	goto	l733
  3468  006AF0  500A               	movf	___lwmod@divisor,w,c
  3469  006AF2  5E08               	subwf	___lwmod@dividend,f,c
  3470  006AF4  500B               	movf	___lwmod@divisor+1,w,c
  3471  006AF6  5A09               	subwfb	___lwmod@dividend+1,f,c
  3472  006AF8                     l733:
  3473  006AF8  90D8               	bcf	status,0,c
  3474  006AFA  320B               	rrcf	___lwmod@divisor+1,f,c
  3475  006AFC  320A               	rrcf	___lwmod@divisor,f,c
  3476  006AFE  2E0C               	decfsz	___lwmod@counter,f,c
  3477  006B00  D7F1               	goto	u1680
  3478  006B02                     l734:
  3479  006B02  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3480  006B06  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3481  006B0A  0012               	return		;funcret
  3482  006B0C                     __end_of___lwmod:
  3483                           	opt stack 0
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           wreg	equ	0xFE8
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           postdec2	equ	0xFDD
  3494                           plusw2	equ	0xFDB
  3495                           fsr2h	equ	0xFDA
  3496                           fsr2l	equ	0xFD9
  3497                           status	equ	0xFD8
  3498                           
  3499 ;; *************** function ___lwdiv *****************
  3500 ;; Defined at:
  3501 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  dividend        2    0[COMRAM] unsigned int 
  3504 ;;  divisor         2    2[COMRAM] unsigned int 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  quotient        2    4[COMRAM] unsigned int 
  3507 ;;  counter         1    6[COMRAM] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  2    0[COMRAM] unsigned int 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3517 ;;      Params:         4       0       0       0       0       0       0       0       0
  3518 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3520 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3521 ;;Total ram usage:        7 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; This function calls:
  3524 ;;		Nothing
  3525 ;; This function is called by:
  3526 ;;		_sprintf
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text9
  3531  006B5A                     __ptext9:
  3532                           	opt stack 0
  3533  006B5A                     ___lwdiv:
  3534                           	opt stack 27
  3535                           
  3536                           ;incstack = 0
  3537  006B5A  0E00               	movlw	0
  3538  006B5C  6E06               	movwf	___lwdiv@quotient+1,c
  3539  006B5E  0E00               	movlw	0
  3540  006B60  6E05               	movwf	___lwdiv@quotient,c
  3541  006B62  5003               	movf	___lwdiv@divisor,w,c
  3542  006B64  1004               	iorwf	___lwdiv@divisor+1,w,c
  3543  006B66  B4D8               	btfsc	status,2,c
  3544  006B68  D01C               	goto	l724
  3545  006B6A  0E01               	movlw	1
  3546  006B6C  6E07               	movwf	___lwdiv@counter,c
  3547  006B6E  D004               	goto	l719
  3548  006B70  90D8               	bcf	status,0,c
  3549  006B72  3603               	rlcf	___lwdiv@divisor,f,c
  3550  006B74  3604               	rlcf	___lwdiv@divisor+1,f,c
  3551  006B76  2A07               	incf	___lwdiv@counter,f,c
  3552  006B78                     l719:
  3553  006B78  AE04               	btfss	___lwdiv@divisor+1,7,c
  3554  006B7A  D7FA               	goto	l720
  3555  006B7C                     u1650:
  3556  006B7C  90D8               	bcf	status,0,c
  3557  006B7E  3605               	rlcf	___lwdiv@quotient,f,c
  3558  006B80  3606               	rlcf	___lwdiv@quotient+1,f,c
  3559  006B82  5003               	movf	___lwdiv@divisor,w,c
  3560  006B84  5C01               	subwf	___lwdiv@dividend,w,c
  3561  006B86  5004               	movf	___lwdiv@divisor+1,w,c
  3562  006B88  5802               	subwfb	___lwdiv@dividend+1,w,c
  3563  006B8A  A0D8               	btfss	status,0,c
  3564  006B8C  D005               	goto	l723
  3565  006B8E  5003               	movf	___lwdiv@divisor,w,c
  3566  006B90  5E01               	subwf	___lwdiv@dividend,f,c
  3567  006B92  5004               	movf	___lwdiv@divisor+1,w,c
  3568  006B94  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3569  006B96  8005               	bsf	___lwdiv@quotient,0,c
  3570  006B98                     l723:
  3571  006B98  90D8               	bcf	status,0,c
  3572  006B9A  3204               	rrcf	___lwdiv@divisor+1,f,c
  3573  006B9C  3203               	rrcf	___lwdiv@divisor,f,c
  3574  006B9E  2E07               	decfsz	___lwdiv@counter,f,c
  3575  006BA0  D7ED               	goto	u1650
  3576  006BA2                     l724:
  3577  006BA2  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3578  006BA6  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3579  006BAA  0012               	return		;funcret
  3580  006BAC                     __end_of___lwdiv:
  3581                           	opt stack 0
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           wreg	equ	0xFE8
  3589                           indf2	equ	0xFDF
  3590                           postinc2	equ	0xFDE
  3591                           postdec2	equ	0xFDD
  3592                           plusw2	equ	0xFDB
  3593                           fsr2h	equ	0xFDA
  3594                           fsr2l	equ	0xFD9
  3595                           status	equ	0xFD8
  3596                           
  3597 ;; *************** function _lcdshiftCursor *****************
  3598 ;; Defined at:
  3599 ;;		line 167 in file "receptor.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  value           1    wreg     unsigned char 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  value           1    3[COMRAM] unsigned char 
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  1    wreg      void 
  3606 ;; Registers used:
  3607 ;;		wreg, status,2, status,0, cstack
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3613 ;;      Params:         0       0       0       0       0       0       0       0       0
  3614 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3615 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3616 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3617 ;;Total ram usage:        2 bytes
  3618 ;; Hardware stack levels used:    1
  3619 ;; Hardware stack levels required when called:    1
  3620 ;; This function calls:
  3621 ;;		_lcdcmd
  3622 ;; This function is called by:
  3623 ;;		_trabajo
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text10
  3628  006A28                     __ptext10:
  3629                           	opt stack 0
  3630  006A28                     _lcdshiftCursor:
  3631                           	opt stack 27
  3632                           
  3633                           ;incstack = 0
  3634                           ;lcdshiftCursor@value stored from wreg
  3635  006A28  6E04               	movwf	lcdshiftCursor@value,c
  3636                           
  3637                           ;receptor.c: 168: if (value == 'L')lcdcmd(0b00010000);
  3638  006A2A  0E4C               	movlw	76
  3639  006A2C  1804               	xorwf	lcdshiftCursor@value,w,c
  3640  006A2E  A4D8               	btfss	status,2,c
  3641  006A30  D003               	goto	l180
  3642  006A32  0E10               	movlw	16
  3643  006A34  ECBD  F034         	call	_lcdcmd
  3644  006A38                     l180:
  3645                           
  3646                           ;receptor.c: 169: if (value == 'R')lcdcmd(0b10010100);
  3647  006A38  0E52               	movlw	82
  3648  006A3A  1804               	xorwf	lcdshiftCursor@value,w,c
  3649  006A3C  A4D8               	btfss	status,2,c
  3650  006A3E  D003               	goto	l181
  3651  006A40  0E94               	movlw	148
  3652  006A42  ECBD  F034         	call	_lcdcmd
  3653  006A46                     l181:
  3654                           
  3655                           ;receptor.c: 170: _delay((unsigned long)((2)*(8000000/4000.0)));
  3656  006A46  0E06               	movlw	6
  3657  006A48  6E03               	movwf	??_lcdshiftCursor& (0+255),c
  3658  006A4A  0E30               	movlw	48
  3659  006A4C                     u3027:
  3660  006A4C  2EE8               	decfsz	wreg,f,c
  3661  006A4E  D7FE               	bra	u3027
  3662  006A50  2E03               	decfsz	??_lcdshiftCursor& (0+255),f,c
  3663  006A52  D7FC               	bra	u3027
  3664  006A54  D000               	nop2	
  3665  006A56  0012               	return		;funcret
  3666  006A58                     __end_of_lcdshiftCursor:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           wreg	equ	0xFE8
  3675                           indf2	equ	0xFDF
  3676                           postinc2	equ	0xFDE
  3677                           postdec2	equ	0xFDD
  3678                           plusw2	equ	0xFDB
  3679                           fsr2h	equ	0xFDA
  3680                           fsr2l	equ	0xFD9
  3681                           status	equ	0xFD8
  3682                           
  3683 ;; *************** function ___wmul *****************
  3684 ;; Defined at:
  3685 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  multiplier      2    0[COMRAM] unsigned int 
  3688 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  product         2    4[COMRAM] unsigned int 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  2    0[COMRAM] unsigned int 
  3693 ;; Registers used:
  3694 ;;		wreg, status,2, status,0, prodl, prodh
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3700 ;;      Params:         4       0       0       0       0       0       0       0       0
  3701 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3703 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3704 ;;Total ram usage:        6 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; This function calls:
  3707 ;;		Nothing
  3708 ;; This function is called by:
  3709 ;;		_trabajo
  3710 ;;		_menu
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text11
  3715  0069DA                     __ptext11:
  3716                           	opt stack 0
  3717  0069DA                     ___wmul:
  3718                           	opt stack 28
  3719                           
  3720                           ;incstack = 0
  3721  0069DA  5001               	movf	___wmul@multiplier,w,c
  3722  0069DC  0203               	mulwf	___wmul@multiplicand,c
  3723  0069DE  CFF3 F005          	movff	prodl,___wmul@product
  3724  0069E2  CFF4 F006          	movff	prodh,___wmul@product+1
  3725  0069E6  5001               	movf	___wmul@multiplier,w,c
  3726  0069E8  0204               	mulwf	___wmul@multiplicand+1,c
  3727  0069EA  50F3               	movf	prodl,w,c
  3728  0069EC  2606               	addwf	___wmul@product+1,f,c
  3729  0069EE  5002               	movf	___wmul@multiplier+1,w,c
  3730  0069F0  0203               	mulwf	___wmul@multiplicand,c
  3731  0069F2  50F3               	movf	prodl,w,c
  3732  0069F4  2606               	addwf	___wmul@product+1,f,c
  3733  0069F6  C005  F001         	movff	___wmul@product,?___wmul
  3734  0069FA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3735  0069FE  0012               	return	
  3736  006A00                     __end_of___wmul:
  3737                           	opt stack 0
  3738                           tblptru	equ	0xFF8
  3739                           tblptrh	equ	0xFF7
  3740                           tblptrl	equ	0xFF6
  3741                           tablat	equ	0xFF5
  3742                           prodh	equ	0xFF4
  3743                           prodl	equ	0xFF3
  3744                           wreg	equ	0xFE8
  3745                           indf2	equ	0xFDF
  3746                           postinc2	equ	0xFDE
  3747                           postdec2	equ	0xFDD
  3748                           plusw2	equ	0xFDB
  3749                           fsr2h	equ	0xFDA
  3750                           fsr2l	equ	0xFD9
  3751                           status	equ	0xFD8
  3752                           
  3753 ;; *************** function ___lbtoft *****************
  3754 ;; Defined at:
  3755 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;  c               1    wreg     unsigned char 
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;  c               1   11[COMRAM] unsigned char 
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  3    8[COMRAM] float 
  3762 ;; Registers used:
  3763 ;;		wreg, status,2, status,0, cstack
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3769 ;;      Params:         3       0       0       0       0       0       0       0       0
  3770 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3771 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3772 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3773 ;;Total ram usage:        4 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; Hardware stack levels required when called:    1
  3776 ;; This function calls:
  3777 ;;		___ftpack
  3778 ;; This function is called by:
  3779 ;;		_trabajo
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           	psect	text12
  3784  0069B6                     __ptext12:
  3785                           	opt stack 0
  3786  0069B6                     ___lbtoft:
  3787                           	opt stack 27
  3788                           
  3789                           ;incstack = 0
  3790                           ;___lbtoft@c stored from wreg
  3791  0069B6  6E0C               	movwf	___lbtoft@c,c
  3792  0069B8  500C               	movf	___lbtoft@c,w,c
  3793  0069BA  6E01               	movwf	___ftpack@arg,c
  3794  0069BC  6A02               	clrf	___ftpack@arg+1,c
  3795  0069BE  6A03               	clrf	___ftpack@arg+2,c
  3796  0069C0  0E8E               	movlw	142
  3797  0069C2  6E04               	movwf	___ftpack@exp,c
  3798  0069C4  0E00               	movlw	0
  3799  0069C6  6E05               	movwf	___ftpack@sign,c
  3800  0069C8  ECF7  F036         	call	___ftpack	;wreg free
  3801  0069CC  C001  F009         	movff	?___ftpack,?___lbtoft
  3802  0069D0  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  3803  0069D4  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  3804  0069D8  0012               	return	
  3805  0069DA                     __end_of___lbtoft:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           prodh	equ	0xFF4
  3812                           prodl	equ	0xFF3
  3813                           wreg	equ	0xFE8
  3814                           indf2	equ	0xFDF
  3815                           postinc2	equ	0xFDE
  3816                           postdec2	equ	0xFDD
  3817                           plusw2	equ	0xFDB
  3818                           fsr2h	equ	0xFDA
  3819                           fsr2l	equ	0xFD9
  3820                           status	equ	0xFD8
  3821                           
  3822 ;; *************** function ___lbdiv *****************
  3823 ;; Defined at:
  3824 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbdiv.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  dividend        1    wreg     unsigned char 
  3827 ;;  divisor         1    0[COMRAM] unsigned char 
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  dividend        1    1[COMRAM] unsigned char 
  3830 ;;  quotient        1    3[COMRAM] unsigned char 
  3831 ;;  counter         1    2[COMRAM] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      unsigned char 
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3841 ;;      Params:         1       0       0       0       0       0       0       0       0
  3842 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3844 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3845 ;;Total ram usage:        4 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; This function calls:
  3848 ;;		Nothing
  3849 ;; This function is called by:
  3850 ;;		_trabajo
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text13
  3855  006A90                     __ptext13:
  3856                           	opt stack 0
  3857  006A90                     ___lbdiv:
  3858                           	opt stack 28
  3859                           
  3860                           ;incstack = 0
  3861                           ;___lbdiv@dividend stored from wreg
  3862  006A90  6E02               	movwf	___lbdiv@dividend,c
  3863  006A92  0E00               	movlw	0
  3864  006A94  6E04               	movwf	___lbdiv@quotient,c
  3865  006A96  5001               	movf	___lbdiv@divisor,w,c
  3866  006A98  B4D8               	btfsc	status,2,c
  3867  006A9A  D015               	goto	l650
  3868  006A9C  0E01               	movlw	1
  3869  006A9E  6E03               	movwf	___lbdiv@counter,c
  3870  006AA0  D003               	goto	l645
  3871  006AA2  90D8               	bcf	status,0,c
  3872  006AA4  3601               	rlcf	___lbdiv@divisor,f,c
  3873  006AA6  2A03               	incf	___lbdiv@counter,f,c
  3874  006AA8                     l645:
  3875  006AA8  AE01               	btfss	___lbdiv@divisor,7,c
  3876  006AAA  D7FB               	goto	l646
  3877  006AAC                     u2310:
  3878  006AAC  90D8               	bcf	status,0,c
  3879  006AAE  3604               	rlcf	___lbdiv@quotient,f,c
  3880  006AB0  5001               	movf	___lbdiv@divisor,w,c
  3881  006AB2  5C02               	subwf	___lbdiv@dividend,w,c
  3882  006AB4  A0D8               	btfss	status,0,c
  3883  006AB6  D003               	goto	l649
  3884  006AB8  5001               	movf	___lbdiv@divisor,w,c
  3885  006ABA  5E02               	subwf	___lbdiv@dividend,f,c
  3886  006ABC  8004               	bsf	___lbdiv@quotient,0,c
  3887  006ABE                     l649:
  3888  006ABE  90D8               	bcf	status,0,c
  3889  006AC0  3201               	rrcf	___lbdiv@divisor,f,c
  3890  006AC2  2E03               	decfsz	___lbdiv@counter,f,c
  3891  006AC4  D7F3               	goto	u2310
  3892  006AC6                     l650:
  3893  006AC6  5004               	movf	___lbdiv@quotient,w,c
  3894  006AC8  0012               	return	
  3895  006ACA                     __end_of___lbdiv:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           prodh	equ	0xFF4
  3902                           prodl	equ	0xFF3
  3903                           wreg	equ	0xFE8
  3904                           indf2	equ	0xFDF
  3905                           postinc2	equ	0xFDE
  3906                           postdec2	equ	0xFDD
  3907                           plusw2	equ	0xFDB
  3908                           fsr2h	equ	0xFDA
  3909                           fsr2l	equ	0xFD9
  3910                           status	equ	0xFD8
  3911                           
  3912 ;; *************** function ___awtoft *****************
  3913 ;; Defined at:
  3914 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;  c               2    8[COMRAM] int 
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;  sign            1   11[COMRAM] unsigned char 
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  3    8[COMRAM] float 
  3921 ;; Registers used:
  3922 ;;		wreg, status,2, status,0, cstack
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3928 ;;      Params:         3       0       0       0       0       0       0       0       0
  3929 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3930 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3931 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3932 ;;Total ram usage:        4 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:    1
  3935 ;; This function calls:
  3936 ;;		___ftpack
  3937 ;; This function is called by:
  3938 ;;		_trabajo
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text14
  3943  006A58                     __ptext14:
  3944                           	opt stack 0
  3945  006A58                     ___awtoft:
  3946                           	opt stack 27
  3947                           
  3948                           ;incstack = 0
  3949  006A58  0E00               	movlw	0
  3950  006A5A  6E0C               	movwf	___awtoft@sign,c
  3951  006A5C  AE0A               	btfss	___awtoft@c+1,7,c
  3952  006A5E  D006               	goto	l511
  3953  006A60  6C09               	negf	___awtoft@c,c
  3954  006A62  1E0A               	comf	___awtoft@c+1,f,c
  3955  006A64  B0D8               	btfsc	status,0,c
  3956  006A66  2A0A               	incf	___awtoft@c+1,f,c
  3957  006A68  0E01               	movlw	1
  3958  006A6A  6E0C               	movwf	___awtoft@sign,c
  3959  006A6C                     l511:
  3960  006A6C  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3961  006A70  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3962  006A74  6A03               	clrf	___ftpack@arg+2,c
  3963  006A76  0E8E               	movlw	142
  3964  006A78  6E04               	movwf	___ftpack@exp,c
  3965  006A7A  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3966  006A7E  ECF7  F036         	call	___ftpack	;wreg free
  3967  006A82  C001  F009         	movff	?___ftpack,?___awtoft
  3968  006A86  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3969  006A8A  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3970  006A8E  0012               	return	
  3971  006A90                     __end_of___awtoft:
  3972                           	opt stack 0
  3973                           tblptru	equ	0xFF8
  3974                           tblptrh	equ	0xFF7
  3975                           tblptrl	equ	0xFF6
  3976                           tablat	equ	0xFF5
  3977                           prodh	equ	0xFF4
  3978                           prodl	equ	0xFF3
  3979                           wreg	equ	0xFE8
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           plusw2	equ	0xFDB
  3984                           fsr2h	equ	0xFDA
  3985                           fsr2l	equ	0xFD9
  3986                           status	equ	0xFD8
  3987                           
  3988 ;; *************** function ___ftpack *****************
  3989 ;; Defined at:
  3990 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  arg             3    0[COMRAM] unsigned um
  3993 ;;  exp             1    3[COMRAM] unsigned char 
  3994 ;;  sign            1    4[COMRAM] unsigned char 
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  3    0[COMRAM] float 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4006 ;;      Params:         5       0       0       0       0       0       0       0       0
  4007 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4008 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4009 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4010 ;;Total ram usage:        8 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; This function calls:
  4013 ;;		Nothing
  4014 ;; This function is called by:
  4015 ;;		___altoft
  4016 ;;		___awtoft
  4017 ;;		___lbtoft
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           	psect	text15
  4022  006DEE                     __ptext15:
  4023                           	opt stack 0
  4024  006DEE                     ___ftpack:
  4025                           	opt stack 26
  4026                           
  4027                           ;incstack = 0
  4028  006DEE  5004               	movf	___ftpack@exp,w,c
  4029  006DF0  B4D8               	btfsc	status,2,c
  4030  006DF2  D005               	goto	u1470
  4031  006DF4  5001               	movf	___ftpack@arg,w,c
  4032  006DF6  1002               	iorwf	___ftpack@arg+1,w,c
  4033  006DF8  1003               	iorwf	___ftpack@arg+2,w,c
  4034  006DFA  A4D8               	btfss	status,2,c
  4035  006DFC  D00C               	goto	l530
  4036  006DFE                     u1470:
  4037  006DFE  0E00               	movlw	0
  4038  006E00  6E01               	movwf	?___ftpack,c
  4039  006E02  0E00               	movlw	0
  4040  006E04  6E02               	movwf	?___ftpack+1,c
  4041  006E06  0E00               	movlw	0
  4042  006E08  6E03               	movwf	?___ftpack+2,c
  4043  006E0A  0012               	return	
  4044  006E0C  2A04               	incf	___ftpack@exp,f,c
  4045  006E0E  90D8               	bcf	status,0,c
  4046  006E10  3203               	rrcf	___ftpack@arg+2,f,c
  4047  006E12  3202               	rrcf	___ftpack@arg+1,f,c
  4048  006E14  3201               	rrcf	___ftpack@arg,f,c
  4049  006E16                     l530:
  4050  006E16  0E00               	movlw	0
  4051  006E18  1401               	andwf	___ftpack@arg,w,c
  4052  006E1A  6E06               	movwf	??___ftpack& (0+255),c
  4053  006E1C  0E00               	movlw	0
  4054  006E1E  1402               	andwf	___ftpack@arg+1,w,c
  4055  006E20  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4056  006E22  0EFE               	movlw	254
  4057  006E24  1403               	andwf	___ftpack@arg+2,w,c
  4058  006E26  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4059  006E28  5006               	movf	??___ftpack,w,c
  4060  006E2A  1007               	iorwf	??___ftpack+1,w,c
  4061  006E2C  1008               	iorwf	??___ftpack+2,w,c
  4062  006E2E  B4D8               	btfsc	status,2,c
  4063  006E30  D00C               	goto	l533
  4064  006E32  D7EC               	goto	l531
  4065  006E34  2A04               	incf	___ftpack@exp,f,c
  4066  006E36  0E01               	movlw	1
  4067  006E38  2601               	addwf	___ftpack@arg,f,c
  4068  006E3A  0E00               	movlw	0
  4069  006E3C  2202               	addwfc	___ftpack@arg+1,f,c
  4070  006E3E  0E00               	movlw	0
  4071  006E40  2203               	addwfc	___ftpack@arg+2,f,c
  4072  006E42  90D8               	bcf	status,0,c
  4073  006E44  3203               	rrcf	___ftpack@arg+2,f,c
  4074  006E46  3202               	rrcf	___ftpack@arg+1,f,c
  4075  006E48  3201               	rrcf	___ftpack@arg,f,c
  4076  006E4A                     l533:
  4077  006E4A  0E00               	movlw	0
  4078  006E4C  1401               	andwf	___ftpack@arg,w,c
  4079  006E4E  6E06               	movwf	??___ftpack& (0+255),c
  4080  006E50  0E00               	movlw	0
  4081  006E52  1402               	andwf	___ftpack@arg+1,w,c
  4082  006E54  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4083  006E56  0EFF               	movlw	255
  4084  006E58  1403               	andwf	___ftpack@arg+2,w,c
  4085  006E5A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4086  006E5C  5006               	movf	??___ftpack,w,c
  4087  006E5E  1007               	iorwf	??___ftpack+1,w,c
  4088  006E60  1008               	iorwf	??___ftpack+2,w,c
  4089  006E62  B4D8               	btfsc	status,2,c
  4090  006E64  D006               	goto	l536
  4091  006E66  D7E6               	goto	l534
  4092  006E68  0604               	decf	___ftpack@exp,f,c
  4093  006E6A  90D8               	bcf	status,0,c
  4094  006E6C  3601               	rlcf	___ftpack@arg,f,c
  4095  006E6E  3602               	rlcf	___ftpack@arg+1,f,c
  4096  006E70  3603               	rlcf	___ftpack@arg+2,f,c
  4097  006E72                     l536:
  4098  006E72  BE02               	btfsc	___ftpack@arg+1,7,c
  4099  006E74  D003               	goto	u1510
  4100  006E76  0E02               	movlw	2
  4101  006E78  6004               	cpfslt	___ftpack@exp,c
  4102  006E7A  D7F6               	goto	l537
  4103  006E7C                     u1510:
  4104  006E7C  A004               	btfss	___ftpack@exp,0,c
  4105  006E7E  9E02               	bcf	___ftpack@arg+1,7,c
  4106  006E80  90D8               	bcf	status,0,c
  4107  006E82  3204               	rrcf	___ftpack@exp,f,c
  4108  006E84  5004               	movf	___ftpack@exp,w,c
  4109  006E86  1203               	iorwf	___ftpack@arg+2,f,c
  4110  006E88  5005               	movf	___ftpack@sign,w,c
  4111  006E8A  A4D8               	btfss	status,2,c
  4112  006E8C  8E03               	bsf	___ftpack@arg+2,7,c
  4113  006E8E  C001  F001         	movff	___ftpack@arg,?___ftpack
  4114  006E92  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4115  006E96  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4116  006E9A  0012               	return	
  4117  006E9C                     __end_of___ftpack:
  4118                           	opt stack 0
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           prodh	equ	0xFF4
  4124                           prodl	equ	0xFF3
  4125                           wreg	equ	0xFE8
  4126                           indf2	equ	0xFDF
  4127                           postinc2	equ	0xFDE
  4128                           postdec2	equ	0xFDD
  4129                           plusw2	equ	0xFDB
  4130                           fsr2h	equ	0xFDA
  4131                           fsr2l	equ	0xFD9
  4132                           status	equ	0xFD8
  4133                           
  4134 ;; *************** function ___awdiv *****************
  4135 ;; Defined at:
  4136 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;  dividend        2    0[COMRAM] int 
  4139 ;;  divisor         2    2[COMRAM] int 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  quotient        2    6[COMRAM] int 
  4142 ;;  sign            1    5[COMRAM] unsigned char 
  4143 ;;  counter         1    4[COMRAM] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  2    0[COMRAM] int 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4153 ;;      Params:         4       0       0       0       0       0       0       0       0
  4154 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4156 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4157 ;;Total ram usage:        8 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_trabajo
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text16
  4167  006D6A                     __ptext16:
  4168                           	opt stack 0
  4169  006D6A                     ___awdiv:
  4170                           	opt stack 28
  4171                           
  4172                           ;incstack = 0
  4173  006D6A  0E00               	movlw	0
  4174  006D6C  6E06               	movwf	___awdiv@sign,c
  4175  006D6E  AE04               	btfss	___awdiv@divisor+1,7,c
  4176  006D70  D006               	goto	l483
  4177  006D72  6C03               	negf	___awdiv@divisor,c
  4178  006D74  1E04               	comf	___awdiv@divisor+1,f,c
  4179  006D76  B0D8               	btfsc	status,0,c
  4180  006D78  2A04               	incf	___awdiv@divisor+1,f,c
  4181  006D7A  0E01               	movlw	1
  4182  006D7C  6E06               	movwf	___awdiv@sign,c
  4183  006D7E                     l483:
  4184  006D7E  AE02               	btfss	___awdiv@dividend+1,7,c
  4185  006D80  D006               	goto	l484
  4186  006D82  6C01               	negf	___awdiv@dividend,c
  4187  006D84  1E02               	comf	___awdiv@dividend+1,f,c
  4188  006D86  B0D8               	btfsc	status,0,c
  4189  006D88  2A02               	incf	___awdiv@dividend+1,f,c
  4190  006D8A  0E01               	movlw	1
  4191  006D8C  1A06               	xorwf	___awdiv@sign,f,c
  4192  006D8E                     l484:
  4193  006D8E  0E00               	movlw	0
  4194  006D90  6E08               	movwf	___awdiv@quotient+1,c
  4195  006D92  0E00               	movlw	0
  4196  006D94  6E07               	movwf	___awdiv@quotient,c
  4197  006D96  5003               	movf	___awdiv@divisor,w,c
  4198  006D98  1004               	iorwf	___awdiv@divisor+1,w,c
  4199  006D9A  B4D8               	btfsc	status,2,c
  4200  006D9C  D01C               	goto	l491
  4201  006D9E  0E01               	movlw	1
  4202  006DA0  6E05               	movwf	___awdiv@counter,c
  4203  006DA2  D004               	goto	l486
  4204  006DA4  90D8               	bcf	status,0,c
  4205  006DA6  3603               	rlcf	___awdiv@divisor,f,c
  4206  006DA8  3604               	rlcf	___awdiv@divisor+1,f,c
  4207  006DAA  2A05               	incf	___awdiv@counter,f,c
  4208  006DAC                     l486:
  4209  006DAC  AE04               	btfss	___awdiv@divisor+1,7,c
  4210  006DAE  D7FA               	goto	l487
  4211  006DB0                     u2260:
  4212  006DB0  90D8               	bcf	status,0,c
  4213  006DB2  3607               	rlcf	___awdiv@quotient,f,c
  4214  006DB4  3608               	rlcf	___awdiv@quotient+1,f,c
  4215  006DB6  5003               	movf	___awdiv@divisor,w,c
  4216  006DB8  5C01               	subwf	___awdiv@dividend,w,c
  4217  006DBA  5004               	movf	___awdiv@divisor+1,w,c
  4218  006DBC  5802               	subwfb	___awdiv@dividend+1,w,c
  4219  006DBE  A0D8               	btfss	status,0,c
  4220  006DC0  D005               	goto	l490
  4221  006DC2  5003               	movf	___awdiv@divisor,w,c
  4222  006DC4  5E01               	subwf	___awdiv@dividend,f,c
  4223  006DC6  5004               	movf	___awdiv@divisor+1,w,c
  4224  006DC8  5A02               	subwfb	___awdiv@dividend+1,f,c
  4225  006DCA  8007               	bsf	___awdiv@quotient,0,c
  4226  006DCC                     l490:
  4227  006DCC  90D8               	bcf	status,0,c
  4228  006DCE  3204               	rrcf	___awdiv@divisor+1,f,c
  4229  006DD0  3203               	rrcf	___awdiv@divisor,f,c
  4230  006DD2  2E05               	decfsz	___awdiv@counter,f,c
  4231  006DD4  D7ED               	goto	u2260
  4232  006DD6                     l491:
  4233  006DD6  5006               	movf	___awdiv@sign,w,c
  4234  006DD8  B4D8               	btfsc	status,2,c
  4235  006DDA  D004               	goto	l492
  4236  006DDC  6C07               	negf	___awdiv@quotient,c
  4237  006DDE  1E08               	comf	___awdiv@quotient+1,f,c
  4238  006DE0  B0D8               	btfsc	status,0,c
  4239  006DE2  2A08               	incf	___awdiv@quotient+1,f,c
  4240  006DE4                     l492:
  4241  006DE4  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4242  006DE8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4243  006DEC  0012               	return	
  4244  006DEE                     __end_of___awdiv:
  4245                           	opt stack 0
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           prodh	equ	0xFF4
  4251                           prodl	equ	0xFF3
  4252                           wreg	equ	0xFE8
  4253                           indf2	equ	0xFDF
  4254                           postinc2	equ	0xFDE
  4255                           postdec2	equ	0xFDD
  4256                           plusw2	equ	0xFDB
  4257                           fsr2h	equ	0xFDA
  4258                           fsr2l	equ	0xFD9
  4259                           status	equ	0xFD8
  4260                           
  4261 ;; *************** function _calibracion *****************
  4262 ;; Defined at:
  4263 ;;		line 178 in file "receptor.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  Input           2    8[COMRAM] PTR unsigned char 
  4266 ;;		 -> menu@stepx(10), 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  stepx           2   17[COMRAM] PTR unsigned char 
  4269 ;;		 -> menu@stepx(10), 
  4270 ;;  i               2   15[COMRAM] int 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  2    8[COMRAM] PTR void 
  4273 ;; Registers used:
  4274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4280 ;;      Params:         2       0       0       0       0       0       0       0       0
  4281 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4282 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4283 ;;      Totals:        11       0       0       0       0       0       0       0       0
  4284 ;;Total ram usage:       11 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    2
  4287 ;; This function calls:
  4288 ;;		_UART_Data_Ready
  4289 ;;		_UART_Read
  4290 ;;		_UART_Write
  4291 ;;		_lcdclear
  4292 ;;		_lcdsetCursor
  4293 ;;		_lcdtext
  4294 ;;		_leer_teclado
  4295 ;; This function is called by:
  4296 ;;		_menu
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text17
  4301  007448                     __ptext17:
  4302                           	opt stack 0
  4303  007448                     _calibracion:
  4304                           	opt stack 27
  4305                           
  4306                           ;receptor.c: 179: char *stepx = Input;
  4307                           
  4308                           ;incstack = 0
  4309  007448  C009  F012         	movff	calibracion@Input,calibracion@stepx
  4310  00744C  C00A  F013         	movff	calibracion@Input+1,calibracion@stepx+1
  4311                           
  4312                           ;receptor.c: 180: int i = 0;
  4313  007450  0E00               	movlw	0
  4314  007452  6E11               	movwf	calibracion@i+1,c
  4315  007454  0E00               	movlw	0
  4316  007456  6E10               	movwf	calibracion@i,c
  4317                           
  4318                           ;receptor.c: 181: lcdclear();
  4319  007458  ECA3  F034         	call	_lcdclear	;wreg free
  4320                           
  4321                           ;receptor.c: 182: lcdtext("Calibrando...");
  4322  00745C  0E50               	movlw	low STR_1
  4323  00745E  6E03               	movwf	lcdtext@t,c
  4324  007460  0E7F               	movlw	high STR_1
  4325  007462  6E04               	movwf	lcdtext@t+1,c
  4326  007464  EC04  F036         	call	_lcdtext	;wreg free
  4327                           
  4328                           ;receptor.c: 183: UART_Write('c');
  4329  007468  0E63               	movlw	99
  4330  00746A  EC93  F034         	call	_UART_Write
  4331                           
  4332                           ;receptor.c: 184: while (!UART_Data_Ready()) {
  4333  00746E  D009               	goto	l190
  4334  007470                     
  4335                           ;receptor.c: 185: if (leer_teclado() == 'B') {
  4336  007470  EC68  F039         	call	_leer_teclado	;wreg free
  4337  007474  0A42               	xorlw	66
  4338  007476  A4D8               	btfss	status,2,c
  4339  007478  D004               	goto	l190
  4340                           
  4341                           ;receptor.c: 186: UART_Write('s');
  4342  00747A  0E73               	movlw	115
  4343  00747C  EC93  F034         	call	_UART_Write
  4344                           
  4345                           ;receptor.c: 187: break;
  4346  007480  D08E               	goto	l192
  4347  007482                     l190:
  4348  007482  EC8B  F034         	call	_UART_Data_Ready	;wreg free
  4349  007486  0900               	iorlw	0
  4350  007488  A4D8               	btfss	status,2,c
  4351  00748A  D089               	goto	l192
  4352  00748C  D7F1               	goto	l189
  4353  00748E                     
  4354                           ;receptor.c: 193: stepx[i] = UART_Read();
  4355                           
  4356                           ;receptor.c: 192: do {
  4357  00748E  5010               	movf	calibracion@i,w,c
  4358  007490  2412               	addwf	calibracion@stepx,w,c
  4359  007492  6ED9               	movwf	fsr2l,c
  4360  007494  5011               	movf	calibracion@i+1,w,c
  4361  007496  2013               	addwfc	calibracion@stepx+1,w,c
  4362  007498  6EDA               	movwf	fsr2h,c
  4363  00749A  EC8F  F034         	call	_UART_Read	;wreg free
  4364  00749E  6EDF               	movwf	indf2,c
  4365                           
  4366                           ;receptor.c: 194: i += 1;
  4367  0074A0  4A10               	infsnz	calibracion@i,f,c
  4368  0074A2  2A11               	incf	calibracion@i+1,f,c
  4369                           
  4370                           ;receptor.c: 195: } while (stepx[i - 1] != 'd');
  4371  0074A4  0EFF               	movlw	255
  4372  0074A6  6E0B               	movwf	??_calibracion& (0+255),c
  4373  0074A8  0EFF               	movlw	255
  4374  0074AA  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4375  0074AC  C010  F00D         	movff	calibracion@i,??_calibracion+2
  4376  0074B0  C011  F00E         	movff	calibracion@i+1,??_calibracion+3
  4377  0074B4  500B               	movf	??_calibracion,w,c
  4378  0074B6  260D               	addwf	??_calibracion+2,f,c
  4379  0074B8  500C               	movf	??_calibracion+1,w,c
  4380  0074BA  220E               	addwfc	??_calibracion+3,f,c
  4381  0074BC  500D               	movf	??_calibracion+2,w,c
  4382  0074BE  2412               	addwf	calibracion@stepx,w,c
  4383  0074C0  6ED9               	movwf	fsr2l,c
  4384  0074C2  500E               	movf	??_calibracion+3,w,c
  4385  0074C4  2013               	addwfc	calibracion@stepx+1,w,c
  4386  0074C6  6EDA               	movwf	fsr2h,c
  4387  0074C8  0E64               	movlw	100
  4388  0074CA  18DE               	xorwf	postinc2,w,c
  4389  0074CC  A4D8               	btfss	status,2,c
  4390  0074CE  D7DF               	goto	l193
  4391                           
  4392                           ;receptor.c: 196: stepx[i - 1] = '\0';
  4393  0074D0  0EFF               	movlw	255
  4394  0074D2  6E0B               	movwf	??_calibracion& (0+255),c
  4395  0074D4  0EFF               	movlw	255
  4396  0074D6  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4397  0074D8  C010  F00D         	movff	calibracion@i,??_calibracion+2
  4398  0074DC  C011  F00E         	movff	calibracion@i+1,??_calibracion+3
  4399  0074E0  500B               	movf	??_calibracion,w,c
  4400  0074E2  260D               	addwf	??_calibracion+2,f,c
  4401  0074E4  500C               	movf	??_calibracion+1,w,c
  4402  0074E6  220E               	addwfc	??_calibracion+3,f,c
  4403  0074E8  500D               	movf	??_calibracion+2,w,c
  4404  0074EA  2412               	addwf	calibracion@stepx,w,c
  4405  0074EC  6ED9               	movwf	fsr2l,c
  4406  0074EE  500E               	movf	??_calibracion+3,w,c
  4407  0074F0  2013               	addwfc	calibracion@stepx+1,w,c
  4408  0074F2  6EDA               	movwf	fsr2h,c
  4409  0074F4  0E00               	movlw	0
  4410  0074F6  6EDF               	movwf	indf2,c
  4411                           
  4412                           ;receptor.c: 197: lcdclear();
  4413  0074F8  ECA3  F034         	call	_lcdclear	;wreg free
  4414                           
  4415                           ;receptor.c: 198: lcdtext("Calibracion");
  4416  0074FC  0ED0               	movlw	low (STR_35+15)
  4417  0074FE  6E03               	movwf	lcdtext@t,c
  4418  007500  0E7E               	movlw	high (STR_35+15)
  4419  007502  6E04               	movwf	lcdtext@t+1,c
  4420  007504  EC04  F036         	call	_lcdtext	;wreg free
  4421                           
  4422                           ;receptor.c: 199: lcdsetCursor(0x40);
  4423  007508  0E40               	movlw	64
  4424  00750A  ECAF  F034         	call	_lcdsetCursor
  4425                           
  4426                           ;receptor.c: 200: lcdtext("Exitosa");
  4427  00750E  0EDF               	movlw	low STR_3
  4428  007510  6E03               	movwf	lcdtext@t,c
  4429  007512  0E7F               	movlw	high STR_3
  4430  007514  6E04               	movwf	lcdtext@t+1,c
  4431  007516  EC04  F036         	call	_lcdtext	;wreg free
  4432                           
  4433                           ;receptor.c: 201: _delay((unsigned long)((2000)*(8000000/4000.0)));
  4434  00751A  0E15               	movlw	21
  4435  00751C  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4436  00751E  0E4B               	movlw	75
  4437  007520  6E0B               	movwf	??_calibracion& (0+255),c
  4438  007522  0EBE               	movlw	190
  4439  007524                     u3037:
  4440  007524  2EE8               	decfsz	wreg,f,c
  4441  007526  D7FE               	bra	u3037
  4442  007528  2E0B               	decfsz	??_calibracion& (0+255),f,c
  4443  00752A  D7FC               	bra	u3037
  4444  00752C  2E0C               	decfsz	(??_calibracion+1)& (0+255),f,c
  4445  00752E  D7FA               	bra	u3037
  4446  007530  D000               	nop2	
  4447                           
  4448                           ;receptor.c: 202: lcdclear();
  4449  007532  ECA3  F034         	call	_lcdclear	;wreg free
  4450                           
  4451                           ;receptor.c: 203: lcdtext("Distancia:");
  4452  007536  0EAC               	movlw	low STR_4
  4453  007538  6E03               	movwf	lcdtext@t,c
  4454  00753A  0E7F               	movlw	high STR_4
  4455  00753C  6E04               	movwf	lcdtext@t+1,c
  4456  00753E  EC04  F036         	call	_lcdtext	;wreg free
  4457                           
  4458                           ;receptor.c: 204: lcdsetCursor(0x40);
  4459  007542  0E40               	movlw	64
  4460  007544  ECAF  F034         	call	_lcdsetCursor
  4461                           
  4462                           ;receptor.c: 205: lcdtext(stepx);
  4463  007548  C012  F003         	movff	calibracion@stepx,lcdtext@t
  4464  00754C  C013  F004         	movff	calibracion@stepx+1,lcdtext@t+1
  4465  007550  EC04  F036         	call	_lcdtext	;wreg free
  4466                           
  4467                           ;receptor.c: 206: lcdtext(" mm");
  4468  007554  0EF5               	movlw	low STR_5
  4469  007556  6E03               	movwf	lcdtext@t,c
  4470  007558  0E7F               	movlw	high STR_5
  4471  00755A  6E04               	movwf	lcdtext@t+1,c
  4472  00755C  EC04  F036         	call	_lcdtext	;wreg free
  4473                           
  4474                           ;receptor.c: 207: _delay((unsigned long)((2000)*(8000000/4000.0)));
  4475  007560  0E15               	movlw	21
  4476  007562  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4477  007564  0E4B               	movlw	75
  4478  007566  6E0B               	movwf	??_calibracion& (0+255),c
  4479  007568  0EBE               	movlw	190
  4480  00756A                     u3047:
  4481  00756A  2EE8               	decfsz	wreg,f,c
  4482  00756C  D7FE               	bra	u3047
  4483  00756E  2E0B               	decfsz	??_calibracion& (0+255),f,c
  4484  007570  D7FC               	bra	u3047
  4485  007572  2E0C               	decfsz	(??_calibracion+1)& (0+255),f,c
  4486  007574  D7FA               	bra	u3047
  4487  007576  D000               	nop2	
  4488                           
  4489                           ;receptor.c: 208: break;
  4490  007578  D01D               	goto	l196
  4491  00757A                     
  4492                           ;receptor.c: 210: lcdclear();
  4493  00757A  ECA3  F034         	call	_lcdclear	;wreg free
  4494                           
  4495                           ;receptor.c: 211: lcdtext("Cancelado...");
  4496  00757E  0E86               	movlw	low STR_6
  4497  007580  6E03               	movwf	lcdtext@t,c
  4498  007582  0E7F               	movlw	high STR_6
  4499  007584  6E04               	movwf	lcdtext@t+1,c
  4500  007586  EC04  F036         	call	_lcdtext	;wreg free
  4501                           
  4502                           ;receptor.c: 212: break;
  4503  00758A  D014               	goto	l196
  4504  00758C                     
  4505                           ;receptor.c: 214: lcdclear();
  4506  00758C  ECA3  F034         	call	_lcdclear	;wreg free
  4507                           
  4508                           ;receptor.c: 215: lcdtext("Error!");
  4509  007590  0EEE               	movlw	low STR_7
  4510  007592  6E03               	movwf	lcdtext@t,c
  4511  007594  0E7F               	movlw	high STR_7
  4512  007596  6E04               	movwf	lcdtext@t+1,c
  4513  007598  EC04  F036         	call	_lcdtext	;wreg free
  4514                           
  4515                           ;receptor.c: 217: }
  4516                           
  4517                           ;receptor.c: 216: break;
  4518  00759C  D00B               	goto	l196
  4519  00759E                     l192:
  4520  00759E  EC8F  F034         	call	_UART_Read	;wreg free
  4521                           
  4522                           ; Switch size 1, requested type "space"
  4523                           ; Number of cases is 3, Range of values is 0 to 101
  4524                           ; switch strategies available:
  4525                           ; Name         Instructions Cycles
  4526                           ; simple_byte           10     6 (average)
  4527                           ;	Chosen strategy is simple_byte
  4528  0075A2  0A00               	xorlw	0	; case 0
  4529  0075A4  B4D8               	btfsc	status,2,c
  4530  0075A6  D7F2               	goto	l198
  4531  0075A8  0A64               	xorlw	100	; case 100
  4532  0075AA  B4D8               	btfsc	status,2,c
  4533  0075AC  D770               	goto	l193
  4534  0075AE  0A01               	xorlw	1	; case 101
  4535  0075B0  B4D8               	btfsc	status,2,c
  4536  0075B2  D7E3               	goto	l197
  4537  0075B4                     l196:
  4538                           
  4539                           ;receptor.c: 218: _delay((unsigned long)((2000)*(8000000/4000.0)));
  4540  0075B4  0E15               	movlw	21
  4541  0075B6  6E0C               	movwf	(??_calibracion+1)& (0+255),c
  4542  0075B8  0E4B               	movlw	75
  4543  0075BA  6E0B               	movwf	??_calibracion& (0+255),c
  4544  0075BC  0EBE               	movlw	190
  4545  0075BE                     u3057:
  4546  0075BE  2EE8               	decfsz	wreg,f,c
  4547  0075C0  D7FE               	bra	u3057
  4548  0075C2  2E0B               	decfsz	??_calibracion& (0+255),f,c
  4549  0075C4  D7FC               	bra	u3057
  4550  0075C6  2E0C               	decfsz	(??_calibracion+1)& (0+255),f,c
  4551  0075C8  D7FA               	bra	u3057
  4552  0075CA  D000               	nop2	
  4553                           
  4554                           ;receptor.c: 219: return *stepx;
  4555  0075CC  C012  FFD9         	movff	calibracion@stepx,fsr2l
  4556  0075D0  C013  FFDA         	movff	calibracion@stepx+1,fsr2h
  4557  0075D4  50DF               	movf	indf2,w,c
  4558  0075D6  6E0B               	movwf	??_calibracion& (0+255),c
  4559  0075D8  6A0C               	clrf	(??_calibracion+1)& (0+255),c
  4560  0075DA  C00B  F009         	movff	??_calibracion,?_calibracion
  4561  0075DE  C00C  F00A         	movff	??_calibracion+1,?_calibracion+1
  4562  0075E2  0012               	return	
  4563  0075E4                     __end_of_calibracion:
  4564                           	opt stack 0
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           wreg	equ	0xFE8
  4572                           indf2	equ	0xFDF
  4573                           postinc2	equ	0xFDE
  4574                           postdec2	equ	0xFDD
  4575                           plusw2	equ	0xFDB
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function _leer_teclado *****************
  4581 ;; Defined at:
  4582 ;;		line 23 in file "receptor.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;		None
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  j               2    1[COMRAM] int 
  4587 ;;  tecla           1    3[COMRAM] unsigned char 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      unsigned char 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0
  4598 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4599 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4600 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4601 ;;Total ram usage:        4 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; This function calls:
  4604 ;;		Nothing
  4605 ;; This function is called by:
  4606 ;;		_calibracion
  4607 ;;		_trabajo
  4608 ;;		_menu
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text18
  4613  0072D0                     __ptext18:
  4614                           	opt stack 0
  4615  0072D0                     _leer_teclado:
  4616                           	opt stack 28
  4617                           
  4618                           ;receptor.c: 24: unsigned char tecla = 0;
  4619                           
  4620                           ;incstack = 0
  4621  0072D0  0E00               	movlw	0
  4622  0072D2  6E04               	movwf	leer_teclado@tecla,c
  4623                           
  4624                           ;receptor.c: 25: LATB = 0;
  4625  0072D4  0E00               	movlw	0
  4626  0072D6  6E8A               	movwf	3978,c	;volatile
  4627                           
  4628                           ;receptor.c: 26: TRISB = 0b00001111;
  4629  0072D8  0E0F               	movlw	15
  4630  0072DA  6E93               	movwf	3987,c	;volatile
  4631                           
  4632                           ;receptor.c: 27: for (int j = 0; j < 4; j++) {
  4633  0072DC  0E00               	movlw	0
  4634  0072DE  6E03               	movwf	leer_teclado@j+1,c
  4635  0072E0  0E00               	movlw	0
  4636  0072E2  6E02               	movwf	leer_teclado@j,c
  4637  0072E4  BE03               	btfsc	leer_teclado@j+1,7,c
  4638  0072E6  D008               	goto	l90
  4639  0072E8  5003               	movf	leer_teclado@j+1,w,c
  4640  0072EA  E105               	bnz	u1740
  4641  0072EC  0E04               	movlw	4
  4642  0072EE  5C02               	subwf	leer_teclado@j,w,c
  4643  0072F0  B0D8               	btfsc	status,0,c
  4644  0072F2  D0A4               	goto	u2070
  4645  0072F4  D001               	goto	l90
  4646  0072F6                     u1740:
  4647  0072F6  D0A2               	goto	u2070
  4648  0072F8                     l90:
  4649                           
  4650                           ;receptor.c: 28: LATB7 = 1;
  4651  0072F8  8E8A               	bsf	3978,7,c	;volatile
  4652                           
  4653                           ;receptor.c: 29: _delay((unsigned long)((5)*(8000000/4000.0)));
  4654  0072FA  0E0D               	movlw	13
  4655  0072FC  6E01               	movwf	??_leer_teclado& (0+255),c
  4656  0072FE  0EFC               	movlw	252
  4657  007300                     u3067:
  4658  007300  2EE8               	decfsz	wreg,f,c
  4659  007302  D7FE               	bra	u3067
  4660  007304  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4661  007306  D7FC               	bra	u3067
  4662                           
  4663                           ;receptor.c: 30: if (PORTBbits.RB0) {
  4664  007308  A081               	btfss	3969,0,c	;volatile
  4665  00730A  D005               	goto	l92
  4666                           
  4667                           ;receptor.c: 31: tecla = 'A';
  4668  00730C  0E41               	movlw	65
  4669  00730E  6E04               	movwf	leer_teclado@tecla,c
  4670  007310  A081               	btfss	3969,0,c	;volatile
  4671  007312  D094               	goto	u2070
  4672  007314  D7FD               	goto	l94
  4673  007316                     l92:
  4674                           
  4675                           ;receptor.c: 34: }
  4676                           ;receptor.c: 35: if (PORTBbits.RB1) {
  4677  007316  A281               	btfss	3969,1,c	;volatile
  4678  007318  D005               	goto	l96
  4679                           
  4680                           ;receptor.c: 36: tecla = '3';
  4681  00731A  0E33               	movlw	51
  4682  00731C  6E04               	movwf	leer_teclado@tecla,c
  4683  00731E  A281               	btfss	3969,1,c	;volatile
  4684  007320  D08D               	goto	u2070
  4685  007322  D7FD               	goto	l98
  4686  007324                     l96:
  4687                           
  4688                           ;receptor.c: 39: }
  4689                           ;receptor.c: 40: if (PORTBbits.RB2) {
  4690  007324  A481               	btfss	3969,2,c	;volatile
  4691  007326  D005               	goto	l100
  4692                           
  4693                           ;receptor.c: 41: tecla = '2';
  4694  007328  0E32               	movlw	50
  4695  00732A  6E04               	movwf	leer_teclado@tecla,c
  4696  00732C  A481               	btfss	3969,2,c	;volatile
  4697  00732E  D086               	goto	u2070
  4698  007330  D7FD               	goto	l102
  4699  007332                     l100:
  4700                           
  4701                           ;receptor.c: 44: }
  4702                           ;receptor.c: 45: if (PORTBbits.RB3) {
  4703  007332  A681               	btfss	3969,3,c	;volatile
  4704  007334  D005               	goto	l104
  4705                           
  4706                           ;receptor.c: 46: tecla = '1';
  4707  007336  0E31               	movlw	49
  4708  007338  6E04               	movwf	leer_teclado@tecla,c
  4709  00733A  A681               	btfss	3969,3,c	;volatile
  4710  00733C  D07F               	goto	u2070
  4711  00733E  D7FD               	goto	l106
  4712  007340                     l104:
  4713                           
  4714                           ;receptor.c: 49: }
  4715                           ;receptor.c: 50: LATB7 = 0;
  4716  007340  9E8A               	bcf	3978,7,c	;volatile
  4717                           
  4718                           ;receptor.c: 51: LATB6 = 1;
  4719  007342  8C8A               	bsf	3978,6,c	;volatile
  4720                           
  4721                           ;receptor.c: 52: _delay((unsigned long)((5)*(8000000/4000.0)));
  4722  007344  0E0D               	movlw	13
  4723  007346  6E01               	movwf	??_leer_teclado& (0+255),c
  4724  007348  0EFC               	movlw	252
  4725  00734A                     u3077:
  4726  00734A  2EE8               	decfsz	wreg,f,c
  4727  00734C  D7FE               	bra	u3077
  4728  00734E  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4729  007350  D7FC               	bra	u3077
  4730                           
  4731                           ;receptor.c: 53: if (PORTBbits.RB0) {
  4732  007352  A081               	btfss	3969,0,c	;volatile
  4733  007354  D005               	goto	l108
  4734                           
  4735                           ;receptor.c: 54: tecla = 'B';
  4736  007356  0E42               	movlw	66
  4737  007358  6E04               	movwf	leer_teclado@tecla,c
  4738  00735A  A081               	btfss	3969,0,c	;volatile
  4739  00735C  D06F               	goto	u2070
  4740  00735E  D7FD               	goto	l110
  4741  007360                     l108:
  4742                           
  4743                           ;receptor.c: 57: }
  4744                           ;receptor.c: 58: if (PORTBbits.RB1) {
  4745  007360  A281               	btfss	3969,1,c	;volatile
  4746  007362  D005               	goto	l112
  4747                           
  4748                           ;receptor.c: 59: tecla = '6';
  4749  007364  0E36               	movlw	54
  4750  007366  6E04               	movwf	leer_teclado@tecla,c
  4751  007368  A281               	btfss	3969,1,c	;volatile
  4752  00736A  D068               	goto	u2070
  4753  00736C  D7FD               	goto	l114
  4754  00736E                     l112:
  4755                           
  4756                           ;receptor.c: 62: }
  4757                           ;receptor.c: 63: if (PORTBbits.RB2) {
  4758  00736E  A481               	btfss	3969,2,c	;volatile
  4759  007370  D005               	goto	l116
  4760                           
  4761                           ;receptor.c: 64: tecla = '5';
  4762  007372  0E35               	movlw	53
  4763  007374  6E04               	movwf	leer_teclado@tecla,c
  4764  007376  A481               	btfss	3969,2,c	;volatile
  4765  007378  D061               	goto	u2070
  4766  00737A  D7FD               	goto	l118
  4767  00737C                     l116:
  4768                           
  4769                           ;receptor.c: 67: }
  4770                           ;receptor.c: 68: if (PORTBbits.RB3) {
  4771  00737C  A681               	btfss	3969,3,c	;volatile
  4772  00737E  D005               	goto	l120
  4773                           
  4774                           ;receptor.c: 69: tecla = '4';
  4775  007380  0E34               	movlw	52
  4776  007382  6E04               	movwf	leer_teclado@tecla,c
  4777  007384  A681               	btfss	3969,3,c	;volatile
  4778  007386  D05A               	goto	u2070
  4779  007388  D7FD               	goto	l122
  4780  00738A                     l120:
  4781                           
  4782                           ;receptor.c: 72: }
  4783                           ;receptor.c: 73: LATB6 = 0;
  4784  00738A  9C8A               	bcf	3978,6,c	;volatile
  4785                           
  4786                           ;receptor.c: 74: LATB5 = 1;
  4787  00738C  8A8A               	bsf	3978,5,c	;volatile
  4788                           
  4789                           ;receptor.c: 75: _delay((unsigned long)((5)*(8000000/4000.0)));
  4790  00738E  0E0D               	movlw	13
  4791  007390  6E01               	movwf	??_leer_teclado& (0+255),c
  4792  007392  0EFC               	movlw	252
  4793  007394                     u3087:
  4794  007394  2EE8               	decfsz	wreg,f,c
  4795  007396  D7FE               	bra	u3087
  4796  007398  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4797  00739A  D7FC               	bra	u3087
  4798                           
  4799                           ;receptor.c: 76: if (PORTBbits.RB0) {
  4800  00739C  A081               	btfss	3969,0,c	;volatile
  4801  00739E  D005               	goto	l124
  4802                           
  4803                           ;receptor.c: 77: tecla = 'C';
  4804  0073A0  0E43               	movlw	67
  4805  0073A2  6E04               	movwf	leer_teclado@tecla,c
  4806  0073A4  A081               	btfss	3969,0,c	;volatile
  4807  0073A6  D04A               	goto	u2070
  4808  0073A8  D7FD               	goto	l126
  4809  0073AA                     l124:
  4810                           
  4811                           ;receptor.c: 80: }
  4812                           ;receptor.c: 81: if (PORTBbits.RB1) {
  4813  0073AA  A281               	btfss	3969,1,c	;volatile
  4814  0073AC  D005               	goto	l128
  4815                           
  4816                           ;receptor.c: 82: tecla = '9';
  4817  0073AE  0E39               	movlw	57
  4818  0073B0  6E04               	movwf	leer_teclado@tecla,c
  4819  0073B2  A281               	btfss	3969,1,c	;volatile
  4820  0073B4  D043               	goto	u2070
  4821  0073B6  D7FD               	goto	l130
  4822  0073B8                     l128:
  4823                           
  4824                           ;receptor.c: 85: }
  4825                           ;receptor.c: 86: if (PORTBbits.RB2) {
  4826  0073B8  A481               	btfss	3969,2,c	;volatile
  4827  0073BA  D005               	goto	l132
  4828                           
  4829                           ;receptor.c: 87: tecla = '8';
  4830  0073BC  0E38               	movlw	56
  4831  0073BE  6E04               	movwf	leer_teclado@tecla,c
  4832  0073C0  A481               	btfss	3969,2,c	;volatile
  4833  0073C2  D03C               	goto	u2070
  4834  0073C4  D7FD               	goto	l134
  4835  0073C6                     l132:
  4836                           
  4837                           ;receptor.c: 90: }
  4838                           ;receptor.c: 91: if (PORTBbits.RB3) {
  4839  0073C6  A681               	btfss	3969,3,c	;volatile
  4840  0073C8  D005               	goto	l136
  4841                           
  4842                           ;receptor.c: 92: tecla = '7';
  4843  0073CA  0E37               	movlw	55
  4844  0073CC  6E04               	movwf	leer_teclado@tecla,c
  4845  0073CE  A681               	btfss	3969,3,c	;volatile
  4846  0073D0  D035               	goto	u2070
  4847  0073D2  D7FD               	goto	l138
  4848  0073D4                     l136:
  4849                           
  4850                           ;receptor.c: 95: }
  4851                           ;receptor.c: 96: LATB5 = 0;
  4852  0073D4  9A8A               	bcf	3978,5,c	;volatile
  4853                           
  4854                           ;receptor.c: 97: LATB4 = 1;
  4855  0073D6  888A               	bsf	3978,4,c	;volatile
  4856                           
  4857                           ;receptor.c: 98: _delay((unsigned long)((5)*(8000000/4000.0)));
  4858  0073D8  0E0D               	movlw	13
  4859  0073DA  6E01               	movwf	??_leer_teclado& (0+255),c
  4860  0073DC  0EFC               	movlw	252
  4861  0073DE                     u3097:
  4862  0073DE  2EE8               	decfsz	wreg,f,c
  4863  0073E0  D7FE               	bra	u3097
  4864  0073E2  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4865  0073E4  D7FC               	bra	u3097
  4866                           
  4867                           ;receptor.c: 99: if (PORTBbits.RB0) {
  4868  0073E6  A081               	btfss	3969,0,c	;volatile
  4869  0073E8  D005               	goto	l140
  4870                           
  4871                           ;receptor.c: 100: tecla = 'D';
  4872  0073EA  0E44               	movlw	68
  4873  0073EC  6E04               	movwf	leer_teclado@tecla,c
  4874  0073EE  A081               	btfss	3969,0,c	;volatile
  4875  0073F0  D025               	goto	u2070
  4876  0073F2  D7FD               	goto	l142
  4877  0073F4                     l140:
  4878                           
  4879                           ;receptor.c: 103: }
  4880                           ;receptor.c: 104: if (PORTBbits.RB1) {
  4881  0073F4  A281               	btfss	3969,1,c	;volatile
  4882  0073F6  D005               	goto	l144
  4883                           
  4884                           ;receptor.c: 105: tecla = '#';
  4885  0073F8  0E23               	movlw	35
  4886  0073FA  6E04               	movwf	leer_teclado@tecla,c
  4887  0073FC  A281               	btfss	3969,1,c	;volatile
  4888  0073FE  D01E               	goto	u2070
  4889  007400  D7FD               	goto	l146
  4890  007402                     l144:
  4891                           
  4892                           ;receptor.c: 108: }
  4893                           ;receptor.c: 109: if (PORTBbits.RB2) {
  4894  007402  A481               	btfss	3969,2,c	;volatile
  4895  007404  D005               	goto	l148
  4896                           
  4897                           ;receptor.c: 110: tecla = '0';
  4898  007406  0E30               	movlw	48
  4899  007408  6E04               	movwf	leer_teclado@tecla,c
  4900  00740A  A481               	btfss	3969,2,c	;volatile
  4901  00740C  D017               	goto	u2070
  4902  00740E  D7FD               	goto	l150
  4903  007410                     l148:
  4904                           
  4905                           ;receptor.c: 113: }
  4906                           ;receptor.c: 114: if (PORTBbits.RB3) {
  4907  007410  A681               	btfss	3969,3,c	;volatile
  4908  007412  D005               	goto	l152
  4909                           
  4910                           ;receptor.c: 115: tecla = '*';
  4911  007414  0E2A               	movlw	42
  4912  007416  6E04               	movwf	leer_teclado@tecla,c
  4913  007418  A681               	btfss	3969,3,c	;volatile
  4914  00741A  D010               	goto	u2070
  4915  00741C  D7FD               	goto	l154
  4916  00741E                     l152:
  4917                           
  4918                           ;receptor.c: 118: }
  4919                           ;receptor.c: 119: LATB4 = 0;
  4920  00741E  988A               	bcf	3978,4,c	;volatile
  4921                           
  4922                           ;receptor.c: 120: _delay((unsigned long)((5)*(8000000/4000.0)));
  4923  007420  0E0D               	movlw	13
  4924  007422  6E01               	movwf	??_leer_teclado& (0+255),c
  4925  007424  0EFC               	movlw	252
  4926  007426                     u3107:
  4927  007426  2EE8               	decfsz	wreg,f,c
  4928  007428  D7FE               	bra	u3107
  4929  00742A  2E01               	decfsz	??_leer_teclado& (0+255),f,c
  4930  00742C  D7FC               	bra	u3107
  4931  00742E  4A02               	infsnz	leer_teclado@j,f,c
  4932  007430  2A03               	incf	leer_teclado@j+1,f,c
  4933  007432  BE03               	btfsc	leer_teclado@j+1,7,c
  4934  007434  D761               	goto	l90
  4935  007436  5003               	movf	leer_teclado@j+1,w,c
  4936  007438  E101               	bnz	l2166
  4937  00743A  D758               	goto	L2
  4938  00743C                     u2070:
  4939  00743C                     l2166:
  4940                           
  4941                           ;receptor.c: 121: }
  4942                           ;receptor.c: 122: LATB = 0;
  4943  00743C  0E00               	movlw	0
  4944  00743E  6E8A               	movwf	3978,c	;volatile
  4945                           
  4946                           ;receptor.c: 123: TRISB = 0;
  4947  007440  0E00               	movlw	0
  4948  007442  6E93               	movwf	3987,c	;volatile
  4949                           
  4950                           ;receptor.c: 124: return tecla;
  4951  007444  5004               	movf	leer_teclado@tecla,w,c
  4952  007446  0012               	return	
  4953  007448                     __end_of_leer_teclado:
  4954                           	opt stack 0
  4955                           tblptru	equ	0xFF8
  4956                           tblptrh	equ	0xFF7
  4957                           tblptrl	equ	0xFF6
  4958                           tablat	equ	0xFF5
  4959                           prodh	equ	0xFF4
  4960                           prodl	equ	0xFF3
  4961                           wreg	equ	0xFE8
  4962                           indf2	equ	0xFDF
  4963                           postinc2	equ	0xFDE
  4964                           postdec2	equ	0xFDD
  4965                           plusw2	equ	0xFDB
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _lcdtext *****************
  4971 ;; Defined at:
  4972 ;;		line 156 in file "receptor.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  t               2    2[COMRAM] PTR unsigned char 
  4975 ;;		 -> STR_39(14), menu@stepx(10), STR_38(13), STR_37(9), 
  4976 ;;		 -> STR_36(18), STR_35(27), STR_34(13), STR_33(13), 
  4977 ;;		 -> STR_32(14), STR_31(13), STR_30(16), STR_29(16), 
  4978 ;;		 -> STR_28(21), STR_26(2), STR_24(7), STR_23(10), 
  4979 ;;		 -> STR_22(10), STR_21(12), STR_20(2), STR_18(7), 
  4980 ;;		 -> STR_17(16), STR_16(12), STR_15(2), trabajo@mx(20), 
  4981 ;;		 -> STR_13(7), trabajo@cutx(20), STR_11(10), STR_10(10), 
  4982 ;;		 -> STR_9(11), STR_8(15), STR_7(7), STR_6(13), 
  4983 ;;		 -> STR_5(4), STR_4(11), STR_3(8), STR_2(12), 
  4984 ;;		 -> STR_1(14), 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;  i               2    6[COMRAM] int 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      void 
  4989 ;; Registers used:
  4990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4996 ;;      Params:         2       0       0       0       0       0       0       0       0
  4997 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4998 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4999 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5000 ;;Total ram usage:        6 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    1
  5003 ;; This function calls:
  5004 ;;		_lcdwrite
  5005 ;; This function is called by:
  5006 ;;		_calibracion
  5007 ;;		_trabajo
  5008 ;;		_menu
  5009 ;;		_main
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           	psect	text19
  5014  006C08                     __ptext19:
  5015                           	opt stack 0
  5016  006C08                     _lcdtext:
  5017                           	opt stack 27
  5018                           
  5019                           ;receptor.c: 157: for (int i = 0; t[i] != '\0'; i++) {
  5020                           
  5021                           ;incstack = 0
  5022  006C08  0E00               	movlw	0
  5023  006C0A  6E08               	movwf	lcdtext@i+1,c
  5024  006C0C  0E00               	movlw	0
  5025  006C0E  6E07               	movwf	lcdtext@i,c
  5026  006C10  D01A               	goto	l171
  5027  006C12                     
  5028                           ;receptor.c: 158: lcdwrite(t[i]);
  5029  006C12  5007               	movf	lcdtext@i,w,c
  5030  006C14  2403               	addwf	lcdtext@t,w,c
  5031  006C16  6E05               	movwf	??_lcdtext& (0+255),c
  5032  006C18  5008               	movf	lcdtext@i+1,w,c
  5033  006C1A  2004               	addwfc	lcdtext@t+1,w,c
  5034  006C1C  6E06               	movwf	(??_lcdtext+1)& (0+255),c
  5035  006C1E  C005  FFF6         	movff	??_lcdtext,tblptrl
  5036  006C22  C006  FFF7         	movff	??_lcdtext+1,tblptrh
  5037  006C26  6AF8               	clrf	tblptru,c
  5038  006C28  0E07               	movlw	(high __ramtop+-1)
  5039  006C2A  64F7               	cpfsgt	tblptrh,c
  5040  006C2C  D003               	bra	u2087
  5041  006C2E  0008               	tblrd		*
  5042  006C30  50F5               	movf	tablat,w,c
  5043  006C32  D005               	bra	u2080
  5044  006C34                     u2087:
  5045  006C34  CFF6 FFD9          	movff	tblptrl,fsr2l
  5046  006C38  CFF7 FFDA          	movff	tblptrh,fsr2h
  5047  006C3C  50DF               	movf	indf2,w,c
  5048  006C3E                     u2080:
  5049  006C3E  ECCC  F034         	call	_lcdwrite
  5050  006C42  4A07               	infsnz	lcdtext@i,f,c
  5051  006C44  2A08               	incf	lcdtext@i+1,f,c
  5052  006C46                     l171:
  5053  006C46  5007               	movf	lcdtext@i,w,c
  5054  006C48  2403               	addwf	lcdtext@t,w,c
  5055  006C4A  6E05               	movwf	??_lcdtext& (0+255),c
  5056  006C4C  5008               	movf	lcdtext@i+1,w,c
  5057  006C4E  2004               	addwfc	lcdtext@t+1,w,c
  5058  006C50  6E06               	movwf	(??_lcdtext+1)& (0+255),c
  5059  006C52  C005  FFF6         	movff	??_lcdtext,tblptrl
  5060  006C56  C006  FFF7         	movff	??_lcdtext+1,tblptrh
  5061  006C5A  6AF8               	clrf	tblptru,c
  5062  006C5C  0E07               	movlw	(high __ramtop+-1)
  5063  006C5E  64F7               	cpfsgt	tblptrh,c
  5064  006C60  D003               	bra	u2097
  5065  006C62  0008               	tblrd		*
  5066  006C64  50F5               	movf	tablat,w,c
  5067  006C66  D005               	bra	u2090
  5068  006C68                     u2097:
  5069  006C68  CFF6 FFD9          	movff	tblptrl,fsr2l
  5070  006C6C  CFF7 FFDA          	movff	tblptrh,fsr2h
  5071  006C70  50DF               	movf	indf2,w,c
  5072  006C72                     u2090:
  5073  006C72  0900               	iorlw	0
  5074  006C74  B4D8               	btfsc	status,2,c
  5075  006C76  0012               	return	
  5076  006C78  D7CC               	goto	l172
  5077  006C7A                     __end_of_lcdtext:
  5078                           	opt stack 0
  5079                           tblptru	equ	0xFF8
  5080                           tblptrh	equ	0xFF7
  5081                           tblptrl	equ	0xFF6
  5082                           tablat	equ	0xFF5
  5083                           prodh	equ	0xFF4
  5084                           prodl	equ	0xFF3
  5085                           wreg	equ	0xFE8
  5086                           indf2	equ	0xFDF
  5087                           postinc2	equ	0xFDE
  5088                           postdec2	equ	0xFDD
  5089                           plusw2	equ	0xFDB
  5090                           fsr2h	equ	0xFDA
  5091                           fsr2l	equ	0xFD9
  5092                           status	equ	0xFD8
  5093                           
  5094 ;; *************** function _lcdwrite *****************
  5095 ;; Defined at:
  5096 ;;		line 148 in file "receptor.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  dataout         1    wreg     unsigned char 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  dataout         1    1[COMRAM] unsigned char 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  1    wreg      void 
  5103 ;; Registers used:
  5104 ;;		wreg, status,2, cstack
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5110 ;;      Params:         0       0       0       0       0       0       0       0       0
  5111 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5112 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5113 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5114 ;;Total ram usage:        2 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; This function calls:
  5117 ;;		Nothing
  5118 ;; This function is called by:
  5119 ;;		_lcdtext
  5120 ;;		_trabajo
  5121 ;;		_menu
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text20
  5126  006998                     __ptext20:
  5127                           	opt stack 0
  5128  006998                     _lcdwrite:
  5129                           	opt stack 28
  5130                           
  5131                           ;incstack = 0
  5132                           ;lcdwrite@dataout stored from wreg
  5133  006998  6E02               	movwf	lcdwrite@dataout,c
  5134                           
  5135                           ;receptor.c: 149: LATB = dataout;
  5136  00699A  C002  FF8A         	movff	lcdwrite@dataout,3978	;volatile
  5137                           
  5138                           ;receptor.c: 150: LATDbits.LATD1 = 1;
  5139  00699E  828C               	bsf	3980,1,c	;volatile
  5140                           
  5141                           ;receptor.c: 151: LATDbits.LATD0 = 1;
  5142  0069A0  808C               	bsf	3980,0,c	;volatile
  5143                           
  5144                           ;receptor.c: 152: _delay((unsigned long)((10)*(8000000/4000.0)));
  5145  0069A2  0E1A               	movlw	26
  5146  0069A4  6E01               	movwf	??_lcdwrite& (0+255),c
  5147  0069A6  0EF8               	movlw	248
  5148  0069A8                     u3117:
  5149  0069A8  2EE8               	decfsz	wreg,f,c
  5150  0069AA  D7FE               	bra	u3117
  5151  0069AC  2E01               	decfsz	??_lcdwrite& (0+255),f,c
  5152  0069AE  D7FC               	bra	u3117
  5153  0069B0  D000               	nop2	
  5154                           
  5155                           ;receptor.c: 153: LATDbits.LATD0 = 0;
  5156  0069B2  908C               	bcf	3980,0,c	;volatile
  5157  0069B4  0012               	return		;funcret
  5158  0069B6                     __end_of_lcdwrite:
  5159                           	opt stack 0
  5160                           tblptru	equ	0xFF8
  5161                           tblptrh	equ	0xFF7
  5162                           tblptrl	equ	0xFF6
  5163                           tablat	equ	0xFF5
  5164                           prodh	equ	0xFF4
  5165                           prodl	equ	0xFF3
  5166                           wreg	equ	0xFE8
  5167                           indf2	equ	0xFDF
  5168                           postinc2	equ	0xFDE
  5169                           postdec2	equ	0xFDD
  5170                           plusw2	equ	0xFDB
  5171                           fsr2h	equ	0xFDA
  5172                           fsr2l	equ	0xFD9
  5173                           status	equ	0xFD8
  5174                           
  5175 ;; *************** function _lcdsetCursor *****************
  5176 ;; Defined at:
  5177 ;;		line 162 in file "receptor.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;  value           1    wreg     unsigned char 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  value           1    3[COMRAM] unsigned char 
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, status,0, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5191 ;;      Params:         0       0       0       0       0       0       0       0       0
  5192 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5193 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5194 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5195 ;;Total ram usage:        2 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    1
  5198 ;; This function calls:
  5199 ;;		_lcdcmd
  5200 ;; This function is called by:
  5201 ;;		_calibracion
  5202 ;;		_trabajo
  5203 ;;		_menu
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text21
  5208  00695E                     __ptext21:
  5209                           	opt stack 0
  5210  00695E                     _lcdsetCursor:
  5211                           	opt stack 27
  5212                           
  5213                           ;incstack = 0
  5214                           ;lcdsetCursor@value stored from wreg
  5215  00695E  6E04               	movwf	lcdsetCursor@value,c
  5216                           
  5217                           ;receptor.c: 163: lcdcmd(0b10000000 | value);
  5218  006960  5004               	movf	lcdsetCursor@value,w,c
  5219  006962  0980               	iorlw	128
  5220  006964  ECBD  F034         	call	_lcdcmd
  5221                           
  5222                           ;receptor.c: 164: _delay((unsigned long)((2)*(8000000/4000.0)));
  5223  006968  0E06               	movlw	6
  5224  00696A  6E03               	movwf	??_lcdsetCursor& (0+255),c
  5225  00696C  0E30               	movlw	48
  5226  00696E                     u3127:
  5227  00696E  2EE8               	decfsz	wreg,f,c
  5228  006970  D7FE               	bra	u3127
  5229  006972  2E03               	decfsz	??_lcdsetCursor& (0+255),f,c
  5230  006974  D7FC               	bra	u3127
  5231  006976  D000               	nop2	
  5232  006978  0012               	return		;funcret
  5233  00697A                     __end_of_lcdsetCursor:
  5234                           	opt stack 0
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           wreg	equ	0xFE8
  5242                           indf2	equ	0xFDF
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           plusw2	equ	0xFDB
  5246                           fsr2h	equ	0xFDA
  5247                           fsr2l	equ	0xFD9
  5248                           status	equ	0xFD8
  5249                           
  5250 ;; *************** function _lcdclear *****************
  5251 ;; Defined at:
  5252 ;;		line 143 in file "receptor.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;		None
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;		None
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  1    wreg      void 
  5259 ;; Registers used:
  5260 ;;		wreg, status,2, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5266 ;;      Params:         0       0       0       0       0       0       0       0       0
  5267 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5268 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5269 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5270 ;;Total ram usage:        1 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    1
  5273 ;; This function calls:
  5274 ;;		_lcdcmd
  5275 ;; This function is called by:
  5276 ;;		_calibracion
  5277 ;;		_trabajo
  5278 ;;		_menu
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text22
  5283  006946                     __ptext22:
  5284                           	opt stack 0
  5285  006946                     _lcdclear:
  5286                           	opt stack 27
  5287                           
  5288                           ;receptor.c: 144: lcdcmd(0b00000001);
  5289                           
  5290                           ;incstack = 0
  5291  006946  0E01               	movlw	1
  5292  006948  ECBD  F034         	call	_lcdcmd
  5293                           
  5294                           ;receptor.c: 145: _delay((unsigned long)((2)*(8000000/4000.0)));
  5295  00694C  0E06               	movlw	6
  5296  00694E  6E03               	movwf	??_lcdclear& (0+255),c
  5297  006950  0E30               	movlw	48
  5298  006952                     u3137:
  5299  006952  2EE8               	decfsz	wreg,f,c
  5300  006954  D7FE               	bra	u3137
  5301  006956  2E03               	decfsz	??_lcdclear& (0+255),f,c
  5302  006958  D7FC               	bra	u3137
  5303  00695A  D000               	nop2	
  5304  00695C  0012               	return		;funcret
  5305  00695E                     __end_of_lcdclear:
  5306                           	opt stack 0
  5307                           tblptru	equ	0xFF8
  5308                           tblptrh	equ	0xFF7
  5309                           tblptrl	equ	0xFF6
  5310                           tablat	equ	0xFF5
  5311                           prodh	equ	0xFF4
  5312                           prodl	equ	0xFF3
  5313                           wreg	equ	0xFE8
  5314                           indf2	equ	0xFDF
  5315                           postinc2	equ	0xFDE
  5316                           postdec2	equ	0xFDD
  5317                           plusw2	equ	0xFDB
  5318                           fsr2h	equ	0xFDA
  5319                           fsr2l	equ	0xFD9
  5320                           status	equ	0xFD8
  5321                           
  5322 ;; *************** function _UART_Write *****************
  5323 ;; Defined at:
  5324 ;;		line 22 in file "UART.h"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;  data            1    wreg     unsigned char 
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;  data            1    0[COMRAM] unsigned char 
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      void 
  5331 ;; Registers used:
  5332 ;;		wreg
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5338 ;;      Params:         0       0       0       0       0       0       0       0       0
  5339 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5341 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5342 ;;Total ram usage:        1 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; This function calls:
  5345 ;;		Nothing
  5346 ;; This function is called by:
  5347 ;;		_calibracion
  5348 ;;		_trabajo
  5349 ;;		_UART_Write_Text
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text23
  5354  006926                     __ptext23:
  5355                           	opt stack 0
  5356  006926                     _UART_Write:
  5357                           	opt stack 28
  5358                           
  5359                           ;incstack = 0
  5360                           ;UART_Write@data stored from wreg
  5361  006926  6E01               	movwf	UART_Write@data,c
  5362  006928                     
  5363                           ;UART.h: 23: while (!TRMT);
  5364  006928  A2AC               	btfss	4012,1,c	;volatile
  5365  00692A  D7FE               	goto	l2094
  5366                           
  5367                           ;UART.h: 24: TXREG = data;
  5368  00692C  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  5369  006930  0012               	return		;funcret
  5370  006932                     __end_of_UART_Write:
  5371                           	opt stack 0
  5372                           tblptru	equ	0xFF8
  5373                           tblptrh	equ	0xFF7
  5374                           tblptrl	equ	0xFF6
  5375                           tablat	equ	0xFF5
  5376                           prodh	equ	0xFF4
  5377                           prodl	equ	0xFF3
  5378                           wreg	equ	0xFE8
  5379                           indf2	equ	0xFDF
  5380                           postinc2	equ	0xFDE
  5381                           postdec2	equ	0xFDD
  5382                           plusw2	equ	0xFDB
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _UART_Read *****************
  5388 ;; Defined at:
  5389 ;;		line 40 in file "UART.h"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;		None
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;		None
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  1    wreg      unsigned char 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5403 ;;      Params:         0       0       0       0       0       0       0       0       0
  5404 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5406 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5407 ;;Total ram usage:        0 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_calibracion
  5413 ;;		_trabajo
  5414 ;;		_UART_Read_Text
  5415 ;; This function uses a non-reentrant model
  5416 ;;
  5417                           
  5418                           	psect	text24
  5419  00691E                     __ptext24:
  5420                           	opt stack 0
  5421  00691E                     _UART_Read:
  5422                           	opt stack 28
  5423                           
  5424                           ;UART.h: 41: while (!RCIF);
  5425                           
  5426                           ;incstack = 0
  5427  00691E  AA9E               	btfss	3998,5,c	;volatile
  5428  006920  D7FE               	goto	_UART_Read
  5429                           
  5430                           ;UART.h: 42: return RCREG;
  5431  006922  50AE               	movf	4014,w,c	;volatile
  5432  006924  0012               	return	
  5433  006926                     __end_of_UART_Read:
  5434                           	opt stack 0
  5435                           tblptru	equ	0xFF8
  5436                           tblptrh	equ	0xFF7
  5437                           tblptrl	equ	0xFF6
  5438                           tablat	equ	0xFF5
  5439                           prodh	equ	0xFF4
  5440                           prodl	equ	0xFF3
  5441                           wreg	equ	0xFE8
  5442                           indf2	equ	0xFDF
  5443                           postinc2	equ	0xFDE
  5444                           postdec2	equ	0xFDD
  5445                           plusw2	equ	0xFDB
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _UART_Data_Ready *****************
  5451 ;; Defined at:
  5452 ;;		line 36 in file "UART.h"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;		None
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;		None
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  1    wreg      unsigned char 
  5459 ;; Registers used:
  5460 ;;		wreg
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5466 ;;      Params:         0       0       0       0       0       0       0       0       0
  5467 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5469 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5470 ;;Total ram usage:        0 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; This function calls:
  5473 ;;		Nothing
  5474 ;; This function is called by:
  5475 ;;		_calibracion
  5476 ;;		_trabajo
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           	psect	text25
  5481  006916                     __ptext25:
  5482                           	opt stack 0
  5483  006916                     _UART_Data_Ready:
  5484                           	opt stack 28
  5485                           
  5486                           ;UART.h: 37: return RCIF;
  5487                           
  5488                           ;incstack = 0
  5489  006916  0E00               	movlw	0
  5490  006918  BA9E               	btfsc	3998,5,c	;volatile
  5491  00691A  0E01               	movlw	1
  5492  00691C  0012               	return	
  5493  00691E                     __end_of_UART_Data_Ready:
  5494                           	opt stack 0
  5495                           tblptru	equ	0xFF8
  5496                           tblptrh	equ	0xFF7
  5497                           tblptrl	equ	0xFF6
  5498                           tablat	equ	0xFF5
  5499                           prodh	equ	0xFF4
  5500                           prodl	equ	0xFF3
  5501                           wreg	equ	0xFE8
  5502                           indf2	equ	0xFDF
  5503                           postinc2	equ	0xFDE
  5504                           postdec2	equ	0xFDD
  5505                           plusw2	equ	0xFDB
  5506                           fsr2h	equ	0xFDA
  5507                           fsr2l	equ	0xFD9
  5508                           status	equ	0xFD8
  5509                           
  5510 ;; *************** function _lcdinitialize *****************
  5511 ;; Defined at:
  5512 ;;		line 135 in file "receptor.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;		None
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;		None
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  1    wreg      void 
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, cstack
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5526 ;;      Params:         0       0       0       0       0       0       0       0       0
  5527 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5528 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5529 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5530 ;;Total ram usage:        1 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    1
  5533 ;; This function calls:
  5534 ;;		_lcdcmd
  5535 ;; This function is called by:
  5536 ;;		_main
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           	psect	text26
  5541  006A00                     __ptext26:
  5542                           	opt stack 0
  5543  006A00                     _lcdinitialize:
  5544                           	opt stack 29
  5545                           
  5546                           ;receptor.c: 136: _delay((unsigned long)((50)*(8000000/4000.0)));
  5547                           
  5548                           ;incstack = 0
  5549  006A00  0E82               	movlw	130
  5550  006A02  6E03               	movwf	??_lcdinitialize& (0+255),c
  5551  006A04  0EDE               	movlw	222
  5552  006A06                     u3147:
  5553  006A06  2EE8               	decfsz	wreg,f,c
  5554  006A08  D7FE               	bra	u3147
  5555  006A0A  2E03               	decfsz	??_lcdinitialize& (0+255),f,c
  5556  006A0C  D7FC               	bra	u3147
  5557                           
  5558                           ;receptor.c: 137: lcdcmd(0b00111000);
  5559  006A0E  0E38               	movlw	56
  5560  006A10  ECBD  F034         	call	_lcdcmd
  5561                           
  5562                           ;receptor.c: 138: lcdcmd(0b00001111);
  5563  006A14  0E0F               	movlw	15
  5564  006A16  ECBD  F034         	call	_lcdcmd
  5565                           
  5566                           ;receptor.c: 139: lcdcmd(0b00000010);
  5567  006A1A  0E02               	movlw	2
  5568  006A1C  ECBD  F034         	call	_lcdcmd
  5569                           
  5570                           ;receptor.c: 140: lcdcmd(0b00000001);
  5571  006A20  0E01               	movlw	1
  5572  006A22  ECBD  F034         	call	_lcdcmd
  5573  006A26  0012               	return		;funcret
  5574  006A28                     __end_of_lcdinitialize:
  5575                           	opt stack 0
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           wreg	equ	0xFE8
  5583                           indf2	equ	0xFDF
  5584                           postinc2	equ	0xFDE
  5585                           postdec2	equ	0xFDD
  5586                           plusw2	equ	0xFDB
  5587                           fsr2h	equ	0xFDA
  5588                           fsr2l	equ	0xFD9
  5589                           status	equ	0xFD8
  5590                           
  5591 ;; *************** function _lcdcmd *****************
  5592 ;; Defined at:
  5593 ;;		line 127 in file "receptor.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;  cmdout          1    wreg     unsigned char 
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;  cmdout          1    1[COMRAM] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      void 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5607 ;;      Params:         0       0       0       0       0       0       0       0       0
  5608 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5609 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5610 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5611 ;;Total ram usage:        2 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; This function calls:
  5614 ;;		Nothing
  5615 ;; This function is called by:
  5616 ;;		_lcdinitialize
  5617 ;;		_lcdclear
  5618 ;;		_lcdsetCursor
  5619 ;;		_lcdshiftCursor
  5620 ;;		_lcdReturn
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text27
  5625  00697A                     __ptext27:
  5626                           	opt stack 0
  5627  00697A                     _lcdcmd:
  5628                           	opt stack 27
  5629                           
  5630                           ;incstack = 0
  5631                           ;lcdcmd@cmdout stored from wreg
  5632  00697A  6E02               	movwf	lcdcmd@cmdout,c
  5633                           
  5634                           ;receptor.c: 128: LATB = cmdout;
  5635  00697C  C002  FF8A         	movff	lcdcmd@cmdout,3978	;volatile
  5636                           
  5637                           ;receptor.c: 129: LATDbits.LATD1 = 0;
  5638  006980  928C               	bcf	3980,1,c	;volatile
  5639                           
  5640                           ;receptor.c: 130: LATDbits.LATD0 = 1;
  5641  006982  808C               	bsf	3980,0,c	;volatile
  5642                           
  5643                           ;receptor.c: 131: _delay((unsigned long)((10)*(8000000/4000.0)));
  5644  006984  0E1A               	movlw	26
  5645  006986  6E01               	movwf	??_lcdcmd& (0+255),c
  5646  006988  0EF8               	movlw	248
  5647  00698A                     u3157:
  5648  00698A  2EE8               	decfsz	wreg,f,c
  5649  00698C  D7FE               	bra	u3157
  5650  00698E  2E01               	decfsz	??_lcdcmd& (0+255),f,c
  5651  006990  D7FC               	bra	u3157
  5652  006992  D000               	nop2	
  5653                           
  5654                           ;receptor.c: 132: LATDbits.LATD0 = 0;
  5655  006994  908C               	bcf	3980,0,c	;volatile
  5656  006996  0012               	return		;funcret
  5657  006998                     __end_of_lcdcmd:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           wreg	equ	0xFE8
  5666                           indf2	equ	0xFDF
  5667                           postinc2	equ	0xFDE
  5668                           postdec2	equ	0xFDD
  5669                           plusw2	equ	0xFDB
  5670                           fsr2h	equ	0xFDA
  5671                           fsr2l	equ	0xFD9
  5672                           status	equ	0xFD8
  5673                           
  5674 ;; *************** function _UART_Init *****************
  5675 ;; Defined at:
  5676 ;;		line 1 in file "UART.h"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  baudrate        4   14[COMRAM] const long 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  x               2   26[COMRAM] unsigned int 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      unsigned char 
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5690 ;;      Params:         4       0       0       0       0       0       0       0       0
  5691 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5692 ;;      Temps:          8       0       0       0       0       0       0       0       0
  5693 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5694 ;;Total ram usage:       14 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    1
  5697 ;; This function calls:
  5698 ;;		___aldiv
  5699 ;; This function is called by:
  5700 ;;		_main
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text28
  5705  00705C                     __ptext28:
  5706                           	opt stack 0
  5707  00705C                     _UART_Init:
  5708                           	opt stack 29
  5709                           
  5710                           ;UART.h: 2: unsigned int x;
  5711                           ;UART.h: 3: x = (8000000 - baudrate * 64) / (baudrate * 64);
  5712                           
  5713                           ;incstack = 0
  5714  00705C  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  5715  007060  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  5716  007064  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  5717  007068  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  5718  00706C  0E06               	movlw	6
  5719  00706E                     u2765:
  5720  00706E  90D8               	bcf	status,0,c
  5721  007070  3613               	rlcf	??_UART_Init,f,c
  5722  007072  3614               	rlcf	??_UART_Init+1,f,c
  5723  007074  3615               	rlcf	??_UART_Init+2,f,c
  5724  007076  3616               	rlcf	??_UART_Init+3,f,c
  5725  007078  2EE8               	decfsz	wreg,f,c
  5726  00707A  D7F9               	goto	u2765
  5727  00707C  1E13               	comf	??_UART_Init,f,c
  5728  00707E  1E14               	comf	??_UART_Init+1,f,c
  5729  007080  1E15               	comf	??_UART_Init+2,f,c
  5730  007082  1E16               	comf	??_UART_Init+3,f,c
  5731  007084  2A13               	incf	??_UART_Init,f,c
  5732  007086  0E00               	movlw	0
  5733  007088  2214               	addwfc	??_UART_Init+1,f,c
  5734  00708A  2215               	addwfc	??_UART_Init+2,f,c
  5735  00708C  2216               	addwfc	??_UART_Init+3,f,c
  5736  00708E  0E00               	movlw	0
  5737  007090  2413               	addwf	??_UART_Init,w,c
  5738  007092  6E01               	movwf	___aldiv@dividend,c
  5739  007094  0E12               	movlw	18
  5740  007096  2014               	addwfc	??_UART_Init+1,w,c
  5741  007098  6E02               	movwf	___aldiv@dividend+1,c
  5742  00709A  0E7A               	movlw	122
  5743  00709C  2015               	addwfc	??_UART_Init+2,w,c
  5744  00709E  6E03               	movwf	___aldiv@dividend+2,c
  5745  0070A0  0E00               	movlw	0
  5746  0070A2  2016               	addwfc	??_UART_Init+3,w,c
  5747  0070A4  6E04               	movwf	___aldiv@dividend+3,c
  5748  0070A6  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  5749  0070AA  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  5750  0070AE  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  5751  0070B2  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  5752  0070B6  0E06               	movlw	6
  5753  0070B8                     u2775:
  5754  0070B8  90D8               	bcf	status,0,c
  5755  0070BA  3617               	rlcf	??_UART_Init+4,f,c
  5756  0070BC  3618               	rlcf	??_UART_Init+5,f,c
  5757  0070BE  3619               	rlcf	??_UART_Init+6,f,c
  5758  0070C0  361A               	rlcf	??_UART_Init+7,f,c
  5759  0070C2  2EE8               	decfsz	wreg,f,c
  5760  0070C4  D7F9               	goto	u2775
  5761  0070C6  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  5762  0070CA  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  5763  0070CE  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  5764  0070D2  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  5765  0070D6  EC4E  F037         	call	___aldiv	;wreg free
  5766  0070DA  C001  F01B         	movff	?___aldiv,UART_Init@x
  5767  0070DE  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  5768                           
  5769                           ;UART.h: 4: if (x > 255)
  5770  0070E2  041C               	decf	UART_Init@x+1,w,c
  5771  0070E4  A0D8               	btfss	status,0,c
  5772  0070E6  D044               	goto	l53
  5773                           
  5774                           ;UART.h: 5: {
  5775                           ;UART.h: 6: x = (8000000 - baudrate * 16) / (baudrate * 16);
  5776  0070E8  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  5777  0070EC  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  5778  0070F0  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  5779  0070F4  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  5780  0070F8  0E04               	movlw	4
  5781  0070FA                     u2795:
  5782  0070FA  90D8               	bcf	status,0,c
  5783  0070FC  3613               	rlcf	??_UART_Init,f,c
  5784  0070FE  3614               	rlcf	??_UART_Init+1,f,c
  5785  007100  3615               	rlcf	??_UART_Init+2,f,c
  5786  007102  3616               	rlcf	??_UART_Init+3,f,c
  5787  007104  2EE8               	decfsz	wreg,f,c
  5788  007106  D7F9               	goto	u2795
  5789  007108  1E13               	comf	??_UART_Init,f,c
  5790  00710A  1E14               	comf	??_UART_Init+1,f,c
  5791  00710C  1E15               	comf	??_UART_Init+2,f,c
  5792  00710E  1E16               	comf	??_UART_Init+3,f,c
  5793  007110  2A13               	incf	??_UART_Init,f,c
  5794  007112  0E00               	movlw	0
  5795  007114  2214               	addwfc	??_UART_Init+1,f,c
  5796  007116  2215               	addwfc	??_UART_Init+2,f,c
  5797  007118  2216               	addwfc	??_UART_Init+3,f,c
  5798  00711A  0E00               	movlw	0
  5799  00711C  2413               	addwf	??_UART_Init,w,c
  5800  00711E  6E01               	movwf	___aldiv@dividend,c
  5801  007120  0E12               	movlw	18
  5802  007122  2014               	addwfc	??_UART_Init+1,w,c
  5803  007124  6E02               	movwf	___aldiv@dividend+1,c
  5804  007126  0E7A               	movlw	122
  5805  007128  2015               	addwfc	??_UART_Init+2,w,c
  5806  00712A  6E03               	movwf	___aldiv@dividend+2,c
  5807  00712C  0E00               	movlw	0
  5808  00712E  2016               	addwfc	??_UART_Init+3,w,c
  5809  007130  6E04               	movwf	___aldiv@dividend+3,c
  5810  007132  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  5811  007136  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  5812  00713A  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  5813  00713E  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  5814  007142  0E04               	movlw	4
  5815  007144                     u2805:
  5816  007144  90D8               	bcf	status,0,c
  5817  007146  3617               	rlcf	??_UART_Init+4,f,c
  5818  007148  3618               	rlcf	??_UART_Init+5,f,c
  5819  00714A  3619               	rlcf	??_UART_Init+6,f,c
  5820  00714C  361A               	rlcf	??_UART_Init+7,f,c
  5821  00714E  2EE8               	decfsz	wreg,f,c
  5822  007150  D7F9               	goto	u2805
  5823  007152  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  5824  007156  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  5825  00715A  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  5826  00715E  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  5827  007162  EC4E  F037         	call	___aldiv	;wreg free
  5828  007166  C001  F01B         	movff	?___aldiv,UART_Init@x
  5829  00716A  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  5830                           
  5831                           ;UART.h: 7: BRGH = 1;
  5832  00716E  84AC               	bsf	4012,2,c	;volatile
  5833  007170                     l53:
  5834                           
  5835                           ;UART.h: 8: }
  5836                           ;UART.h: 9: if (x < 256) {
  5837  007170  041C               	decf	UART_Init@x+1,w,c
  5838  007172  B0D8               	btfsc	status,0,c
  5839  007174  0012               	return	
  5840                           
  5841                           ;UART.h: 10: SPBRG = x;
  5842  007176  C01B  FFAF         	movff	UART_Init@x,4015	;volatile
  5843                           
  5844                           ;UART.h: 11: SYNC = 0;
  5845  00717A  98AC               	bcf	4012,4,c	;volatile
  5846                           
  5847                           ;UART.h: 12: SPEN = 1;
  5848  00717C  8EAB               	bsf	4011,7,c	;volatile
  5849                           
  5850                           ;UART.h: 13: TRISC7 = 1;
  5851  00717E  8E94               	bsf	3988,7,c	;volatile
  5852                           
  5853                           ;UART.h: 14: TRISC6 = 1;
  5854  007180  8C94               	bsf	3988,6,c	;volatile
  5855                           
  5856                           ;UART.h: 15: CREN = 1;
  5857  007182  88AB               	bsf	4011,4,c	;volatile
  5858                           
  5859                           ;UART.h: 16: TXEN = 1;
  5860  007184  8AAC               	bsf	4012,5,c	;volatile
  5861                           
  5862                           ;UART.h: 17: return 1;
  5863                           ;	Return value of _UART_Init is never used
  5864  007186  0012               	return	
  5865  007188                     __end_of_UART_Init:
  5866                           	opt stack 0
  5867                           tblptru	equ	0xFF8
  5868                           tblptrh	equ	0xFF7
  5869                           tblptrl	equ	0xFF6
  5870                           tablat	equ	0xFF5
  5871                           prodh	equ	0xFF4
  5872                           prodl	equ	0xFF3
  5873                           wreg	equ	0xFE8
  5874                           indf2	equ	0xFDF
  5875                           postinc2	equ	0xFDE
  5876                           postdec2	equ	0xFDD
  5877                           plusw2	equ	0xFDB
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function ___aldiv *****************
  5883 ;; Defined at:
  5884 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  dividend        4    0[COMRAM] long 
  5887 ;;  divisor         4    4[COMRAM] long 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  quotient        4   10[COMRAM] long 
  5890 ;;  sign            1    9[COMRAM] unsigned char 
  5891 ;;  counter         1    8[COMRAM] unsigned char 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  4    0[COMRAM] long 
  5894 ;; Registers used:
  5895 ;;		wreg, status,2, status,0
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5901 ;;      Params:         8       0       0       0       0       0       0       0       0
  5902 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5903 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5904 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5905 ;;Total ram usage:       14 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_UART_Init
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text29
  5915  006E9C                     __ptext29:
  5916                           	opt stack 0
  5917  006E9C                     ___aldiv:
  5918                           	opt stack 29
  5919                           
  5920                           ;incstack = 0
  5921  006E9C  0E00               	movlw	0
  5922  006E9E  6E0A               	movwf	___aldiv@sign,c
  5923  006EA0  AE08               	btfss	___aldiv@divisor+3,7,c
  5924  006EA2  D00A               	goto	l371
  5925  006EA4  1E08               	comf	___aldiv@divisor+3,f,c
  5926  006EA6  1E07               	comf	___aldiv@divisor+2,f,c
  5927  006EA8  1E06               	comf	___aldiv@divisor+1,f,c
  5928  006EAA  6C05               	negf	___aldiv@divisor,c
  5929  006EAC  0E00               	movlw	0
  5930  006EAE  2206               	addwfc	___aldiv@divisor+1,f,c
  5931  006EB0  2207               	addwfc	___aldiv@divisor+2,f,c
  5932  006EB2  2208               	addwfc	___aldiv@divisor+3,f,c
  5933  006EB4  0E01               	movlw	1
  5934  006EB6  6E0A               	movwf	___aldiv@sign,c
  5935  006EB8                     l371:
  5936  006EB8  AE04               	btfss	___aldiv@dividend+3,7,c
  5937  006EBA  D00A               	goto	l372
  5938  006EBC  1E04               	comf	___aldiv@dividend+3,f,c
  5939  006EBE  1E03               	comf	___aldiv@dividend+2,f,c
  5940  006EC0  1E02               	comf	___aldiv@dividend+1,f,c
  5941  006EC2  6C01               	negf	___aldiv@dividend,c
  5942  006EC4  0E00               	movlw	0
  5943  006EC6  2202               	addwfc	___aldiv@dividend+1,f,c
  5944  006EC8  2203               	addwfc	___aldiv@dividend+2,f,c
  5945  006ECA  2204               	addwfc	___aldiv@dividend+3,f,c
  5946  006ECC  0E01               	movlw	1
  5947  006ECE  1A0A               	xorwf	___aldiv@sign,f,c
  5948  006ED0                     l372:
  5949  006ED0  0E00               	movlw	0
  5950  006ED2  6E0B               	movwf	___aldiv@quotient,c
  5951  006ED4  0E00               	movlw	0
  5952  006ED6  6E0C               	movwf	___aldiv@quotient+1,c
  5953  006ED8  0E00               	movlw	0
  5954  006EDA  6E0D               	movwf	___aldiv@quotient+2,c
  5955  006EDC  0E00               	movlw	0
  5956  006EDE  6E0E               	movwf	___aldiv@quotient+3,c
  5957  006EE0  5005               	movf	___aldiv@divisor,w,c
  5958  006EE2  1006               	iorwf	___aldiv@divisor+1,w,c
  5959  006EE4  1007               	iorwf	___aldiv@divisor+2,w,c
  5960  006EE6  1008               	iorwf	___aldiv@divisor+3,w,c
  5961  006EE8  B4D8               	btfsc	status,2,c
  5962  006EEA  D02A               	goto	l379
  5963  006EEC  0E01               	movlw	1
  5964  006EEE  6E09               	movwf	___aldiv@counter,c
  5965  006EF0  D006               	goto	l374
  5966  006EF2  90D8               	bcf	status,0,c
  5967  006EF4  3605               	rlcf	___aldiv@divisor,f,c
  5968  006EF6  3606               	rlcf	___aldiv@divisor+1,f,c
  5969  006EF8  3607               	rlcf	___aldiv@divisor+2,f,c
  5970  006EFA  3608               	rlcf	___aldiv@divisor+3,f,c
  5971  006EFC  2A09               	incf	___aldiv@counter,f,c
  5972  006EFE                     l374:
  5973  006EFE  AE08               	btfss	___aldiv@divisor+3,7,c
  5974  006F00  D7F8               	goto	l375
  5975  006F02                     u2730:
  5976  006F02  90D8               	bcf	status,0,c
  5977  006F04  360B               	rlcf	___aldiv@quotient,f,c
  5978  006F06  360C               	rlcf	___aldiv@quotient+1,f,c
  5979  006F08  360D               	rlcf	___aldiv@quotient+2,f,c
  5980  006F0A  360E               	rlcf	___aldiv@quotient+3,f,c
  5981  006F0C  5005               	movf	___aldiv@divisor,w,c
  5982  006F0E  5C01               	subwf	___aldiv@dividend,w,c
  5983  006F10  5006               	movf	___aldiv@divisor+1,w,c
  5984  006F12  5802               	subwfb	___aldiv@dividend+1,w,c
  5985  006F14  5007               	movf	___aldiv@divisor+2,w,c
  5986  006F16  5803               	subwfb	___aldiv@dividend+2,w,c
  5987  006F18  5008               	movf	___aldiv@divisor+3,w,c
  5988  006F1A  5804               	subwfb	___aldiv@dividend+3,w,c
  5989  006F1C  A0D8               	btfss	status,0,c
  5990  006F1E  D009               	goto	l378
  5991  006F20  5005               	movf	___aldiv@divisor,w,c
  5992  006F22  5E01               	subwf	___aldiv@dividend,f,c
  5993  006F24  5006               	movf	___aldiv@divisor+1,w,c
  5994  006F26  5A02               	subwfb	___aldiv@dividend+1,f,c
  5995  006F28  5007               	movf	___aldiv@divisor+2,w,c
  5996  006F2A  5A03               	subwfb	___aldiv@dividend+2,f,c
  5997  006F2C  5008               	movf	___aldiv@divisor+3,w,c
  5998  006F2E  5A04               	subwfb	___aldiv@dividend+3,f,c
  5999  006F30  800B               	bsf	___aldiv@quotient,0,c
  6000  006F32                     l378:
  6001  006F32  90D8               	bcf	status,0,c
  6002  006F34  3208               	rrcf	___aldiv@divisor+3,f,c
  6003  006F36  3207               	rrcf	___aldiv@divisor+2,f,c
  6004  006F38  3206               	rrcf	___aldiv@divisor+1,f,c
  6005  006F3A  3205               	rrcf	___aldiv@divisor,f,c
  6006  006F3C  2E09               	decfsz	___aldiv@counter,f,c
  6007  006F3E  D7E1               	goto	u2730
  6008  006F40                     l379:
  6009  006F40  500A               	movf	___aldiv@sign,w,c
  6010  006F42  B4D8               	btfsc	status,2,c
  6011  006F44  D008               	goto	l380
  6012  006F46  1E0E               	comf	___aldiv@quotient+3,f,c
  6013  006F48  1E0D               	comf	___aldiv@quotient+2,f,c
  6014  006F4A  1E0C               	comf	___aldiv@quotient+1,f,c
  6015  006F4C  6C0B               	negf	___aldiv@quotient,c
  6016  006F4E  0E00               	movlw	0
  6017  006F50  220C               	addwfc	___aldiv@quotient+1,f,c
  6018  006F52  220D               	addwfc	___aldiv@quotient+2,f,c
  6019  006F54  220E               	addwfc	___aldiv@quotient+3,f,c
  6020  006F56                     l380:
  6021  006F56  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  6022  006F5A  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  6023  006F5E  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  6024  006F62  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  6025  006F66  0012               	return	
  6026  006F68                     __end_of___aldiv:
  6027                           	opt stack 0
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           wreg	equ	0xFE8
  6035                           indf2	equ	0xFDF
  6036                           postinc2	equ	0xFDE
  6037                           postdec2	equ	0xFDD
  6038                           plusw2	equ	0xFDB
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           tblptru	equ	0xFF8
  6043                           tblptrh	equ	0xFF7
  6044                           tblptrl	equ	0xFF6
  6045                           tablat	equ	0xFF5
  6046                           prodh	equ	0xFF4
  6047                           prodl	equ	0xFF3
  6048                           wreg	equ	0xFE8
  6049                           indf2	equ	0xFDF
  6050                           postinc2	equ	0xFDE
  6051                           postdec2	equ	0xFDD
  6052                           plusw2	equ	0xFDB
  6053                           fsr2h	equ	0xFDA
  6054                           fsr2l	equ	0xFD9
  6055                           status	equ	0xFD8
  6056                           
  6057                           	psect	rparam
  6058  0000                     tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           wreg	equ	0xFE8
  6065                           indf2	equ	0xFDF
  6066                           postinc2	equ	0xFDE
  6067                           postdec2	equ	0xFDD
  6068                           plusw2	equ	0xFDB
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8


Data Sizes:
    Strings     317
    Constant    10
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     62      64
    BANK0           160      0       0
    BANK1           256    168     170
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_27(CODE[3]), STR_25(CODE[3]), STR_19(CODE[3]), STR_14(CODE[3]), 
		 -> STR_12(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> trabajo@outx(BANK1[20]), trabajo@mx(BANK1[20]), trabajo@cutx(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    menu@comandos	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_35(CODE[27]), 

    sp__calibracion	PTR void  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    calibracion@Input	PTR unsigned char  size(2) Largest target is 10
		 -> menu@stepx(COMRAM[10]), 

    calibracion@stepx	PTR unsigned char  size(2) Largest target is 10
		 -> menu@stepx(COMRAM[10]), 

    lcdtext@t	PTR unsigned char  size(2) Largest target is 27
		 -> STR_39(CODE[14]), menu@stepx(COMRAM[10]), STR_38(CODE[13]), STR_37(CODE[9]), 
		 -> STR_36(CODE[18]), STR_35(CODE[27]), STR_34(CODE[13]), STR_33(CODE[13]), 
		 -> STR_32(CODE[14]), STR_31(CODE[13]), STR_30(CODE[16]), STR_29(CODE[16]), 
		 -> STR_28(CODE[21]), STR_26(CODE[2]), STR_24(CODE[7]), STR_23(CODE[10]), 
		 -> STR_22(CODE[10]), STR_21(CODE[12]), STR_20(CODE[2]), STR_18(CODE[7]), 
		 -> STR_17(CODE[16]), STR_16(CODE[12]), STR_15(CODE[2]), trabajo@mx(BANK1[20]), 
		 -> STR_13(CODE[7]), trabajo@cutx(BANK1[20]), STR_11(CODE[10]), STR_10(CODE[10]), 
		 -> STR_9(CODE[11]), STR_8(CODE[15]), STR_7(CODE[7]), STR_6(CODE[13]), 
		 -> STR_5(CODE[4]), STR_4(CODE[11]), STR_3(CODE[8]), STR_2(CODE[12]), 
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_menu
    _menu->_trabajo
    _trabajo->_trunc
    _trunc->___altoft
    ___altoft->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdshiftCursor->_lcdcmd
    ___lbtoft->___ftpack
    ___awtoft->___ftpack
    _calibracion->_lcdtext
    _lcdtext->_lcdwrite
    _lcdsetCursor->_lcdcmd
    _lcdclear->_lcdcmd
    _lcdinitialize->_lcdcmd
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    _menu->_trabajo

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   28907
                                             60 COMRAM     2     2      0
                          _UART_Init
                      _lcdinitialize
                            _lcdtext
                               _menu
 ---------------------------------------------------------------------------------
 (1) _menu                                                23    23      0   24821
                                             37 COMRAM    23    23      0
                             ___wmul
                        _calibracion
                           _lcdclear
                       _lcdsetCursor
                            _lcdtext
                           _lcdwrite
                       _leer_teclado
                            _trabajo
 ---------------------------------------------------------------------------------
 (2) _trabajo                                            172   172      0   16884
                                             33 COMRAM     4     4      0
                                              0 BANK1    168   168      0
                    _UART_Data_Ready
                          _UART_Read
                         _UART_Write
                            ___awdiv
                           ___awtoft
                            ___lbdiv
                           ___lbtoft
                             ___wmul
                           _lcdclear
                       _lcdsetCursor
                     _lcdshiftCursor
                            _lcdtext
                           _lcdwrite
                       _leer_teclado
                            _sprintf
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    3612
                                             25 COMRAM     8     5      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                           ___lbtoft (ARG)
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     360
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     328
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2641
                                             15 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    17      6    1862
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdshiftCursor                                       2     2      0      66
                                              2 COMRAM     2     2      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2449
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     238
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2594
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _calibracion                                         11     9      2    3678
                                              8 COMRAM    11     9      2
                    _UART_Data_Ready
                          _UART_Read
                         _UART_Write
                           _lcdclear
                       _lcdsetCursor
                            _lcdtext
                       _leer_teclado
 ---------------------------------------------------------------------------------
 (3) _leer_teclado                                         4     4      0      85
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (3) _lcdtext                                              6     4      2    3228
                                              2 COMRAM     6     4      2
                           _lcdwrite
 ---------------------------------------------------------------------------------
 (3) _lcdwrite                                             2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcdsetCursor                                         2     2      0      44
                                              2 COMRAM     2     2      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (3) _lcdclear                                             1     1      0      22
                                              2 COMRAM     1     1      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdinitialize                                        1     1      0      22
                                              2 COMRAM     1     1      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (4) _lcdcmd                                               2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           14    10      4     836
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _lcdinitialize
     _lcdcmd
   _lcdtext
     _lcdwrite
   _menu
     ___wmul
     _calibracion
       _UART_Data_Ready
       _UART_Read
       _UART_Write
       _lcdclear
         _lcdcmd
       _lcdsetCursor
         _lcdcmd
       _lcdtext
         _lcdwrite
       _leer_teclado
     _lcdclear
       _lcdcmd
     _lcdsetCursor
       _lcdcmd
     _lcdtext
       _lcdwrite
     _lcdwrite
     _leer_teclado
     _trabajo
       _UART_Data_Ready
       _UART_Read
       _UART_Write
       ___awdiv
       ___awtoft
         ___ftpack
       ___lbdiv
       ___lbtoft
         ___ftpack
       ___wmul
       _lcdclear
         _lcdcmd
       _lcdsetCursor
         _lcdcmd
       _lcdshiftCursor
         _lcdcmd
       _lcdtext
         _lcdwrite
       _lcdwrite
       _leer_teclado
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _trunc
         ___altoft
           ___ftpack
           ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     A8      AA       7       66.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3E      40       1       67.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EA      20        0.0%
DATA                 0      0      EA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 05 18:22:04 2017

            ___altoft@exp 0018             ___altoft@sign 0019                        l53 7170  
                      l90 72F8                        l92 7316                        l94 7310  
                      l96 7324                        l98 731E              ___awdiv@sign 0006  
     ___wmul@multiplicand 0003               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
            trabajo@m_281 01A2                       l100 7332                       l110 735A  
                     l102 732C                       l120 738A                       l112 736E  
                     l104 7340                       l130 73B2                       l122 7384  
                     l114 7368                       l106 733A                       l211 788A  
                     l203 77B4                       l140 73F4                       l132 73C6  
                     l124 73AA                       l116 737C                       l108 7360  
                     l213 7B86                       l221 7AB4                       l205 77EC  
                     l150 740A                       l142 73EE                       l134 73C0  
                     l126 73A4                       l118 7376                       l310 724A  
                     l230 7C00                       l222 7B66                       l214 78B0  
                     l311 72A2                       l231 7CDC                       l223 7B70  
                     l152 741E                       l144 7402                       l136 73D4  
                     l128 73B8                       l312 7250                       l304 71D6  
                     l400 6CA8                       l232 7C9A                       l216 793E  
                     l208 7832                       l401 6C9C                       l209 783C  
                     l154 7418                       l146 73FC                       l138 73CE  
                     l306 71FE                       l250 7E8C                       l242 7DFC  
                     l171 6C46                       l235 7D20                       l227 7BE4  
                     l172 6C12                       l148 7410                       l180 6A38  
                     l236 7D38                       l181 6A46                       l229 7E36  
                     l245 7E10                       l190 7482                       l246 7E20  
                     l270 76B4                       l262 762E                       l511 6A6C  
                     l239 7D80                       l263 774A                       l271 7716  
                     l192 759E                       l272 76D8                       l264 7638  
                     l193 748E                       l265 7730                       l530 6E16  
                     l274 772A                       l266 7668                       l258 75FE  
                     l371 6EB8                       l531 6E0C                       l267 7678  
                     l259 75FA                       l380 6F56                       l372 6ED0  
                     l196 75B4                       l284 6B54                       l197 757A  
                     l189 7470                       l533 6E4A                       l277 777E  
                     l269 7740                       l374 6EFE                       l198 758C  
                     l534 6E34                       l630 6F94                       l375 6EF2  
                     l536 6E72                       l720 6B70                       l632 700A  
                     l537 6E68                       l297 7192                       l641 704A  
                     l633 6FFA                       l378 6F32                       l490 6DCC  
                     l650 6AC6                       l730 6AD8                       l298 71AC  
                     l379 6F40                       l491 6DD6                       l483 6D7E  
                     l723 6B98                       l492 6DE4                       l484 6D8E  
                     l724 6BA2                       l645 6AA8                       l733 6AF8  
                     l486 6DAC                       l646 6AA2                       l734 6B02  
                     l638 702E                       l487 6DA4                       l719 6B78  
                     l639 7022                       l649 6ABE                       l729 6AE0  
                     l866 6C06                       l891 6D0E              __CFG_CPB$OFF 000000  
            __CFG_CPD$OFF 000000              __CFG_BOR$OFF 000000                       wreg 000FE8  
           _lcdinitialize 6A00              __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000  
                    l2236 7202                      l2094 6928                      l2166 743C  
                    l2668 7DFC                      STR_1 7F50                      STR_2 7ED0  
                    STR_3 7FDF                      STR_4 7FAC                      STR_5 7FF5  
                    STR_6 7F86                      STR_7 7FEE                      STR_8 7F33  
                    STR_9 7FB7                      _BRGH 007D62                      _CREN 007D5C  
            lcdcmd@cmdout 0002                      u2210 72AA                      u2220 72C2  
                    u2070 743C                      u1510 6E7C                      u2310 6AAC  
                    _LATB 000F8A                      u3007 7E7C                      u2080 6C3E  
                    u3017 7EA6                      u2090 6C72                      u3107 7426  
                    u3027 6A4C                      u2260 6DB0                      u1620 7034  
                    u3117 69A8                      u3037 7524                      u1470 6DFE  
                    u2190 722E                      u1710 6D36                      u2510 7AE2  
                    u2430 7846                      u3127 696E                      u2087 6C34  
                    u3047 756A                      u3137 6952                      u2097 6C68  
                    u3057 75BE                      u1561 6F78                      u1650 6B7C  
                    u2530 7B7A                      u3147 6A06                      u3067 7300  
                    u1740 72F6                      u1580 6FB2                      u3157 698A  
                    u3077 734A                      u1718 6D38                      u2550 7BA0  
                    u2390 77D6                      u3087 7394                      u1680 6AE4  
                    u2480 797A                      u3097 73DE                      u1585 6FAA  
                    u2730 6F02                      u2650 7E2A                      u2805 7144  
                    u2670 7E50                      u2590 7D42                      u2680 7E58  
                    u2860 7778                      u2765 706E                      u2917 6B46  
                    u2775 70B8                      u2927 76A4                      u2937 787A  
                    u2795 70FA                      u2947 7A38                      _RCIF 007CF5  
                    u2957 7BD4                      u2967 7CA4                      u2977 7CF8  
                    u2987 7D72                      u2997 7D9A                      _SPEN 007D5F  
            __CFG_WDTPS$1 000000                      _TRMT 007D61                      _TXEN 007D65  
                    _SYNC 007D64                      _main 6B0C              ___ftpack@arg 0001  
                    _menu 75E4              ___ftpack@exp 0004                      fsr2h 000FDA  
                    indf2 000FDF                      fsr2l 000FD9                      prodh 000FF4  
                    prodl 000FF3                      start 0000             __CFG_IESO$OFF 000000  
           ?_lcdsetCursor 0001              ___param_bank 000000              ___fttol@exp1 000F  
            ___fttol@lval 000B             __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000  
    __size_of_calibracion 019C           __end_of___aldiv 6F68                     ?_main 0001  
                   ?_menu 0001           __end_of___awdiv 6DEE           __end_of___lbdiv 6ACA  
                   STR_10 7FCC                     STR_11 7FC2                     STR_20 7FFC  
                   STR_12 7FF9                     STR_21 7FA0                     STR_13 7FE7  
                   STR_14 7FF9                     STR_22 7FCC                     STR_30 7F13  
                   STR_23 7FC2                     STR_15 7FFC                     STR_31 7F79  
                   STR_24 7FE7                     STR_16 7FA0                     STR_32 7F42  
                   STR_33 7F86                     STR_25 7FF9                     STR_17 7F23  
                   STR_18 7FE7                     STR_26 7FFC                     STR_34 7F93  
                   STR_27 7FF9                     STR_19 7FF9                     STR_35 7EC1  
                   STR_36 7EF1                     STR_28 7EDC                     STR_37 7FD6  
                   STR_29 7F03                     STR_38 7F6C                     STR_39 7F5E  
         ___awdiv@divisor 0003           __end_of___fttol 705C                     _LATB4 007C54  
                   _LATB5 007C55                     _LATB6 007C56                     _LATB7 007C57  
         __end_of___lwdiv 6BAC           __end_of___lwmod 6B0C           ___awdiv@counter 0005  
                   _RCREG 000FAE                     _SPBRG 000FAF             __CFG_USBDIV$1 000000  
                   _TRISB 000F93            ?_lcdinitialize 0001                     _TXREG 000FAD  
           __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
           __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000             ?_leer_teclado 0001  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000               ?_UART_Write 0001  
      __size_of_UART_Init 012C        __size_of_UART_Read 0008             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000  
         __end_of_lcdtext 6C7A             ___awtoft@sign 000C           __end_of_dpowers 7EC1  
                   _frexp 6CF2                     _errno 003F             ___ftpack@sign 0005  
                   _steps 01A8                     _trunc 6BAC                     menu@c 003C  
                   menu@i 003A                     menu@k 0036                     menu@l 0034  
                   tablat 000FF5           __end_of_trabajo 7EB6                     plusw2 000FDB  
                   status 000FD8          calibracion@Input 0009           __end_of_sprintf 72D0  
         ___lbdiv@divisor 0001            __CFG_ICPRT$OFF 000000            ??_lcdsetCursor 0003  
         ___lbdiv@counter 0003          calibracion@stepx 0012            __CFG_MCLRE$OFF 000000  
         __initialization 6932              __end_of_main 6B5A              __end_of_menu 7786  
          _lcdshiftCursor 6A28                    ??_main 003D             ___fttol@sign1 000A  
                  ??_menu 0026             __activetblptr 000002            ??_leer_teclado 0001  
                  ?_frexp 0001          __end_of___altoft 6CF2          ___awdiv@dividend 0001  
        __end_of___awtoft 6A90          __end_of___ftpack 6E9C          __end_of___lbtoft 69DA  
                  ?_trunc 001A                    _OSCCON 000FD3                    _TRISC6 007CA6  
                  _TRISC7 007CA7            __CFG_VREGEN$ON 000000            __CFG_XINST$OFF 000000  
       __end_of_UART_Init 7188         __end_of_UART_Read 6926          __end_of_lcdclear 695E  
     __size_of_UART_Write 000C                 ??___aldiv 0009                    ___wmul 69DA  
               ??___awdiv 0005                 ??___lbdiv 0002            __CFG_STVREN$ON 000000  
               ??___fttol 0005    __end_of_lcdshiftCursor 6A58          __end_of_lcdwrite 69B6  
               ??___lwdiv 0005                 ??___lwmod 000C                    _lcdcmd 697A  
        ___awdiv@quotient 0007           ??_lcdinitialize 0003                 ??_lcdtext 0005  
            __mediumconst 7EB6                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                 ??_trabajo 0022                 ??_sprintf 0013  
                  trunc@i 001D                    trunc@x 001A          ___lbdiv@dividend 0002  
              __accesstop 0060   __end_of__initialization 693C                ___altoft@c 0010  
         __CFG_PBADEN$OFF 000000         lcdsetCursor@value 0004             ___rparam_used 000001  
              ___awtoft@c 0009                ___lbtoft@c 000C                ___fttol@f1 0001  
          __pcstackCOMRAM 0001           ?_lcdshiftCursor 0001             __end_of_frexp 6D6A  
           __end_of_trunc 6C08          ___lbdiv@quotient 0004      __end_of_lcdsetCursor 697A  
                 ??_frexp 0006                   ??_trunc 001D           lcdwrite@dataout 0002  
              __pbssBANK1 01A8  __size_of_UART_Data_Ready 0008      __end_of_leer_teclado 7448  
                 ?___wmul 0001                   ?_lcdcmd 0001                 ?___altoft 0010  
               ?___awtoft 0009                 ?___ftpack 0001                 ?___lbtoft 0009  
            menu@comandos 0038              ??_UART_Write 0001                 ?_lcdclear 0001  
               ?_lcdwrite 0001                   __Hparam 0000                   __Lparam 0000  
                 ___aldiv 6E9C             ??_calibracion 000B                   ___awdiv 6D6A  
                 ___lbdiv 6A90           __size_of___wmul 0026        __end_of_UART_Write 6932  
                 ___fttol 6F68                   ___lwdiv 6B5A                   ___lwmod 6ACA  
              ??___altoft 0014           __size_of_lcdcmd 001E                   __pcinit 6932  
              ??___awtoft 000C                ??___ftpack 0006                ??___lbtoft 000C  
                 __ramtop 0800                   __ptext0 6B0C                   __ptext1 75E4  
                 __ptext2 7786                   __ptext3 6BAC                   __ptext4 6CF2  
                 __ptext5 6F68                   __ptext6 6C7A                   __ptext7 7188  
                 __ptext8 6ACA                   __ptext9 6B5A                   _lcdtext 6C08  
                 _dpowers 7EB7          ___aldiv@dividend 0001                   _trabajo 7786  
                 _sprintf 7188                ??_lcdclear 0003      end_of_initialization 693C  
              ??_lcdwrite 0001             __Lmediumconst 7EB6          ___aldiv@quotient 000B  
                 postdec2 000FDD                   postinc2 000FDE         ??_UART_Data_Ready 0001  
   __size_of_lcdsetCursor 001C                 _UART_Init 705C                 _UART_Read 691E  
               _PORTBbits 000F81            UART_Write@data 0001       __end_of_calibracion 75E4  
               _TRISDbits 000F95               trabajo@cuts 01A4               trabajo@cutx 0164  
             trabajo@outx 0178     __size_of_leer_teclado 0178          ??_lcdshiftCursor 0003  
            _lcdsetCursor 695E             leer_teclado@j 0002            __end_of___wmul 6A00  
              ?_UART_Init 000F                ?_UART_Read 0001            __end_of_lcdcmd 6998  
   __end_of_lcdinitialize 6A28       start_initialization 6932              _leer_teclado 72D0  
            calibracion@i 0010         leer_teclado@tecla 0004                frexp@value 0001  
                ??___wmul 0005               _calibracion 7448                  ??_lcdcmd 0001  
        __CFG_LPT1OSC$OFF 000000         __size_of___altoft 0078         __size_of___awtoft 0038  
       __size_of___ftpack 00AE         __size_of___lbtoft 0024               __pbssCOMRAM 003F  
           __pcstackBANK1 0100         __size_of_lcdclear 0018               sprintf@flag 0016  
             sprintf@prec 0017         __size_of_lcdwrite 001E          ___lwdiv@dividend 0001  
           __pmediumconst 7EB6                  ?___aldiv 0001                  ?___awdiv 0001  
                ?___lbdiv 0001                  ?___fttol 0001                  ?___lwdiv 0001  
                ?___lwmod 0008               ??_UART_Init 0013               ??_UART_Read 0001  
                ?_lcdtext 0003                  ?_trabajo 0001          ___lwdiv@quotient 0005  
                ?_sprintf 000D            __size_of_frexp 0078                UART_Init@x 001B  
          __size_of_trunc 005C           ___aldiv@divisor 0005           ___aldiv@counter 0009  
          ___wmul@product 0005           _UART_Data_Ready 6916                  _LATDbits 000F8C  
       UART_Init@baudrate 000F         ___wmul@multiplier 0001                trabajo@num 01A7  
               frexp@eptr 0004                  __Hrparam 0000                 menu@stepx 002A  
                __Lrparam 0000          __size_of___aldiv 00CC          __size_of___awdiv 0084  
        __size_of___lbdiv 003A                  ___altoft 6C7A          __size_of___fttol 00F4  
        __size_of___lwdiv 0052          __size_of___lwmod 0042                  ___awtoft 6A58  
                ___ftpack 6DEE                  ___lbtoft 69B6                sprintf@val 0018  
        __size_of_lcdtext 0072           ___lwdiv@divisor 0003           ___lwdiv@counter 0007  
                __ptext10 6A28                  __ptext11 69DA                  __ptext20 6998  
                __ptext12 69B6                  __ptext21 695E                  __ptext13 6A90  
                __ptext22 6946                  __ptext14 6A58                  __ptext23 6926  
                __ptext15 6DEE                  __ptext24 691E                  __ptext16 6D6A  
                __ptext25 6916                  __ptext17 7448                  __ptext26 6A00  
                __ptext18 72D0                  __ptext27 697A                  __ptext19 6C08  
                __ptext28 705C                  __ptext29 6E9C   __end_of_UART_Data_Ready 691E  
        __size_of_trabajo 0730                  _lcdclear 6946          __size_of_sprintf 0148  
       trabajo@distancias 0100                  _lcdwrite 6998                trunc@expon 0020  
           __size_of_main 004E             __size_of_menu 01A2              ?_calibracion 0009  
               trabajo@mx 018C     __CFG_CPUDIV$OSC1_PLL2 000000       lcdshiftCursor@value 0004  
                lcdtext@i 0007                  lcdtext@t 0003                 sprintf@ap 0014  
               sprintf@sp 000D          ___lwmod@dividend 0008    __size_of_lcdinitialize 0028  
                trabajo@i 01A0                  trabajo@m 01A5   __size_of_lcdshiftCursor 0030  
     __CFG_FOSC$INTOSC_EC 000000                  sprintf@c 001A                  sprintf@f 000F  
         ___lwmod@divisor 000A           ___lwmod@counter 000C              ___aldiv@sign 000A  
              _UART_Write 6926          ?_UART_Data_Ready 0001  
