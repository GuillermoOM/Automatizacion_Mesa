

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 05 13:36:07 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32  0000                     
    33                           ; Version 1.44
    34                           ; Generated 14/09/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4550 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	smallconst
    69  000800                     __psmallconst:
    70                           	opt stack 0
    71  000800  00                 	db	0
    72  000801                     _dpowers:
    73                           	opt stack 0
    74  000801  0001               	dw	1
    75  000803  000A               	dw	10
    76  000805  0064               	dw	100
    77  000807  03E8               	dw	1000
    78  000809  2710               	dw	10000
    79  00080B                     __end_of_dpowers:
    80                           	opt stack 0
    81  0000                     _TRISDbits	set	3989
    82  0000                     _OSCCON	set	4051
    83  0000                     _PORTDbits	set	3971
    84  0000                     _RCREG	set	4014
    85  0000                     _TXREG	set	4013
    86  0000                     _SPBRG	set	4015
    87  0000                     _RCIF	set	31989
    88  0000                     _TRMT	set	32097
    89  0000                     _TXEN	set	32101
    90  0000                     _CREN	set	32092
    91  0000                     _TRISC6	set	31910
    92  0000                     _TRISC7	set	31911
    93  0000                     _SPEN	set	32095
    94  0000                     _SYNC	set	32100
    95  0000                     _BRGH	set	32098
    96  00080B                     STR_1:
    97  00080B  25                 	db	37
    98  00080C  64                 	db	100	;'d'
    99  00080D  00                 	db	0
   100                           
   101                           ; #config settings
   102  00080E  00                 	db	0	; dummy byte at the end
   103  0000                     
   104                           	psect	cinit
   105  00170A                     __pcinit:
   106                           	opt stack 0
   107  00170A                     start_initialization:
   108                           	opt stack 0
   109  00170A                     __initialization:
   110                           	opt stack 0
   111                           
   112                           ; Clear objects allocated to COMRAM (2 bytes)
   113  00170A  6A48               	clrf	(__pbssCOMRAM+1)& (0+255),c
   114  00170C  6A47               	clrf	__pbssCOMRAM& (0+255),c
   115  00170E                     end_of_initialization:
   116                           	opt stack 0
   117  00170E                     __end_of__initialization:
   118                           	opt stack 0
   119  00170E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   120  001710  6EF8               	movwf	tblptru,c
   121  001712  0100               	movlb	0
   122  001714  EF08  F004         	goto	_main	;jump to C main() function
   123                           tblptru	equ	0xFF8
   124                           
   125                           	psect	bssCOMRAM
   126  000047                     __pbssCOMRAM:
   127                           	opt stack 0
   128  000047                     _errno:
   129                           	opt stack 0
   130  000047                     	ds	2
   131                           tblptru	equ	0xFF8
   132                           
   133                           	psect	cstackCOMRAM
   134  000001                     __pcstackCOMRAM:
   135                           	opt stack 0
   136  000001                     ??_step:
   137  000001                     ?___wmul:
   138                           	opt stack 0
   139  000001                     ?___lwdiv:
   140                           	opt stack 0
   141  000001                     ?___ftpack:
   142                           	opt stack 0
   143  000001                     ?___aldiv:
   144                           	opt stack 0
   145  000001                     ?___fttol:
   146                           	opt stack 0
   147  000001                     UART_Write@data:
   148                           	opt stack 0
   149  000001                     ___wmul@multiplier:
   150                           	opt stack 0
   151  000001                     ___lwdiv@dividend:
   152                           	opt stack 0
   153  000001                     ___ftpack@arg:
   154                           	opt stack 0
   155  000001                     ___fttol@f1:
   156                           	opt stack 0
   157  000001                     frexp@value:
   158                           	opt stack 0
   159  000001                     ___aldiv@dividend:
   160                           	opt stack 0
   161                           
   162                           ; 4 bytes @ 0x0
   163  000001                     	ds	2
   164  000003                     ___wmul@multiplicand:
   165                           	opt stack 0
   166  000003                     ___lwdiv@divisor:
   167                           	opt stack 0
   168                           
   169                           ; 2 bytes @ 0x2
   170  000003                     	ds	1
   171  000004                     ___ftpack@exp:
   172                           	opt stack 0
   173  000004                     frexp@eptr:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x3
   177  000004                     	ds	1
   178  000005                     ??___fttol:
   179  000005                     ___ftpack@sign:
   180                           	opt stack 0
   181  000005                     ___wmul@product:
   182                           	opt stack 0
   183  000005                     ___lwdiv@quotient:
   184                           	opt stack 0
   185  000005                     ___aldiv@divisor:
   186                           	opt stack 0
   187                           
   188                           ; 4 bytes @ 0x4
   189  000005                     	ds	1
   190  000006                     ??___ftpack:
   191  000006                     ??_frexp:
   192                           
   193                           ; 1 bytes @ 0x5
   194  000006                     	ds	1
   195  000007                     ___lwdiv@counter:
   196                           	opt stack 0
   197                           
   198                           ; 1 bytes @ 0x6
   199  000007                     	ds	1
   200  000008                     ?___lwmod:
   201                           	opt stack 0
   202  000008                     ___lwmod@dividend:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0x7
   206  000008                     	ds	1
   207  000009                     ?___ftmul:
   208                           	opt stack 0
   209  000009                     ?___awtoft:
   210                           	opt stack 0
   211  000009                     ___aldiv@counter:
   212                           	opt stack 0
   213  000009                     ___awtoft@c:
   214                           	opt stack 0
   215  000009                     ___ftmul@f1:
   216                           	opt stack 0
   217                           
   218                           ; 3 bytes @ 0x8
   219  000009                     	ds	1
   220  00000A                     ___aldiv@sign:
   221                           	opt stack 0
   222  00000A                     ___fttol@sign1:
   223                           	opt stack 0
   224  00000A                     ___lwmod@divisor:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x9
   228  00000A                     	ds	1
   229  00000B                     ___aldiv@quotient:
   230                           	opt stack 0
   231  00000B                     ___fttol@lval:
   232                           	opt stack 0
   233                           
   234                           ; 4 bytes @ 0xA
   235  00000B                     	ds	1
   236  00000C                     ___awtoft@sign:
   237                           	opt stack 0
   238  00000C                     ___lwmod@counter:
   239                           	opt stack 0
   240  00000C                     ___ftmul@f2:
   241                           	opt stack 0
   242                           
   243                           ; 3 bytes @ 0xB
   244  00000C                     	ds	1
   245  00000D                     ___ftge@ff1:
   246                           	opt stack 0
   247                           
   248                           ; 3 bytes @ 0xC
   249  00000D                     	ds	2
   250  00000F                     ??___ftmul:
   251  00000F                     ___fttol@exp1:
   252                           	opt stack 0
   253  00000F                     UART_Init@baudrate:
   254                           	opt stack 0
   255                           
   256                           ; 4 bytes @ 0xE
   257  00000F                     	ds	1
   258  000010                     ?_sprintf:
   259                           	opt stack 0
   260  000010                     ?___altoft:
   261                           	opt stack 0
   262  000010                     sprintf@sp:
   263                           	opt stack 0
   264  000010                     ___ftge@ff2:
   265                           	opt stack 0
   266  000010                     ___altoft@c:
   267                           	opt stack 0
   268                           
   269                           ; 4 bytes @ 0xF
   270  000010                     	ds	2
   271  000012                     ___ftmul@exp:
   272                           	opt stack 0
   273  000012                     sprintf@f:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x11
   277  000012                     	ds	1
   278  000013                     ??_UART_Init:
   279  000013                     ??___ftge:
   280  000013                     ___ftmul@f3_as_product:
   281                           	opt stack 0
   282                           
   283                           ; 3 bytes @ 0x12
   284  000013                     	ds	1
   285  000014                     ??___altoft:
   286                           
   287                           ; 1 bytes @ 0x13
   288  000014                     	ds	2
   289  000016                     ??_sprintf:
   290  000016                     ___ftmul@cntr:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x15
   294  000016                     	ds	1
   295  000017                     ___ftmul@sign:
   296                           	opt stack 0
   297  000017                     sprintf@ap:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x16
   301  000017                     	ds	1
   302  000018                     ?___ftadd:
   303                           	opt stack 0
   304  000018                     ___altoft@exp:
   305                           	opt stack 0
   306  000018                     ___ftadd@f1:
   307                           	opt stack 0
   308                           
   309                           ; 3 bytes @ 0x17
   310  000018                     	ds	1
   311  000019                     sprintf@flag:
   312                           	opt stack 0
   313  000019                     ___altoft@sign:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x18
   317  000019                     	ds	1
   318  00001A                     sprintf@prec:
   319                           	opt stack 0
   320  00001A                     trunc@x:
   321                           	opt stack 0
   322                           
   323                           ; 3 bytes @ 0x19
   324  00001A                     	ds	1
   325  00001B                     UART_Init@x:
   326                           	opt stack 0
   327  00001B                     sprintf@val:
   328                           	opt stack 0
   329  00001B                     ___ftadd@f2:
   330                           	opt stack 0
   331                           
   332                           ; 3 bytes @ 0x1A
   333  00001B                     	ds	2
   334  00001D                     sprintf@c:
   335                           	opt stack 0
   336  00001D                     trunc@i:
   337                           	opt stack 0
   338                           
   339                           ; 3 bytes @ 0x1C
   340  00001D                     	ds	1
   341  00001E                     ??___ftadd:
   342                           
   343                           ; 1 bytes @ 0x1D
   344  00001E                     	ds	2
   345  000020                     trunc@expon:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x1F
   349  000020                     	ds	1
   350  000021                     ___ftadd@sign:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x20
   354  000021                     	ds	1
   355  000022                     ___ftadd@exp2:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x21
   359  000022                     	ds	1
   360  000023                     ___ftadd@exp1:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x22
   364  000023                     	ds	1
   365  000024                     ??_main:
   366                           
   367                           ; 1 bytes @ 0x23
   368  000024                     	ds	5
   369  000029                     main@stepx:
   370                           	opt stack 0
   371                           
   372                           ; 10 bytes @ 0x28
   373  000029                     	ds	10
   374  000033                     main@dir:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x32
   378  000033                     	ds	2
   379  000035                     main@k:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x34
   383  000035                     	ds	2
   384  000037                     main@resolucion:
   385                           	opt stack 0
   386                           
   387                           ; 3 bytes @ 0x36
   388  000037                     	ds	3
   389  00003A                     main@u:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x39
   393  00003A                     	ds	2
   394  00003C                     main@i:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x3B
   398  00003C                     	ds	2
   399  00003E                     main@steps:
   400                           	opt stack 0
   401                           
   402                           ; 3 bytes @ 0x3D
   403  00003E                     	ds	3
   404  000041                     main@move:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x40
   408  000041                     	ds	2
   409  000043                     main@pos:
   410                           	opt stack 0
   411                           
   412                           ; 3 bytes @ 0x42
   413  000043                     	ds	3
   414  000046                     main@stop:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x45
   418  000046                     	ds	1
   419                           tblptru	equ	0xFF8
   420                           
   421 ;;
   422 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   423 ;;
   424 ;; *************** function _main *****************
   425 ;; Defined at:
   426 ;;		line 27 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  u               2   57[COMRAM] int 
   431 ;;  k               2   52[COMRAM] int 
   432 ;;  stepx          10   40[COMRAM] unsigned char [10]
   433 ;;  pos             3   66[COMRAM] float 
   434 ;;  steps           3   61[COMRAM] float 
   435 ;;  resolucion      3   54[COMRAM] float 
   436 ;;  move            2   64[COMRAM] int 
   437 ;;  i               2   59[COMRAM] int 
   438 ;;  dir             2   50[COMRAM] int 
   439 ;;  stop            1   69[COMRAM] unsigned char 
   440 ;; Return value:  Size  Location     Type
   441 ;;                  1    wreg      void 
   442 ;; Registers used:
   443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   444 ;; Tracked objects:
   445 ;;		On entry : 0/0
   446 ;;		On exit  : 0/0
   447 ;;		Unchanged: 0/0
   448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   449 ;;      Params:         0       0       0       0       0       0       0       0       0
   450 ;;      Locals:        30       0       0       0       0       0       0       0       0
   451 ;;      Temps:          5       0       0       0       0       0       0       0       0
   452 ;;      Totals:        35       0       0       0       0       0       0       0       0
   453 ;;Total ram usage:       35 bytes
   454 ;; Hardware stack levels required when called:    3
   455 ;; This function calls:
   456 ;;		_UART_Data_Ready
   457 ;;		_UART_Init
   458 ;;		_UART_Read
   459 ;;		_UART_Write
   460 ;;		___awtoft
   461 ;;		___ftadd
   462 ;;		___ftge
   463 ;;		___ftmul
   464 ;;		___fttol
   465 ;;		___wmul
   466 ;;		_sprintf
   467 ;;		_step
   468 ;;		_stopcheck
   469 ;;		_trunc
   470 ;; This function is called by:
   471 ;;		Startup code after reset
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475                           	psect	text0
   476  000810                     __ptext0:
   477                           	opt stack 0
   478  000810                     _main:
   479                           	opt stack 28
   480                           
   481                           ;main.c: 28: int i = 0;
   482                           
   483                           ;incstack = 0
   484  000810  0E00               	movlw	0
   485  000812  6E3D               	movwf	main@i+1,c
   486  000814  0E00               	movlw	0
   487  000816  6E3C               	movwf	main@i,c
   488                           
   489                           ;main.c: 29: float steps = 0;
   490  000818  0E00               	movlw	0
   491  00081A  6E3E               	movwf	main@steps,c
   492  00081C  0E00               	movlw	0
   493  00081E  6E3F               	movwf	main@steps+1,c
   494  000820  0E00               	movlw	0
   495  000822  6E40               	movwf	main@steps+2,c
   496                           
   497                           ;main.c: 30: int move = 0;
   498  000824  0E00               	movlw	0
   499  000826  6E42               	movwf	main@move+1,c
   500  000828  0E00               	movlw	0
   501  00082A  6E41               	movwf	main@move,c
   502                           
   503                           ;main.c: 31: float pos = 0;
   504  00082C  0E00               	movlw	0
   505  00082E  6E43               	movwf	main@pos,c
   506  000830  0E00               	movlw	0
   507  000832  6E44               	movwf	main@pos+1,c
   508  000834  0E00               	movlw	0
   509  000836  6E45               	movwf	main@pos+2,c
   510                           
   511                           ;main.c: 32: float resolucion = 0.59375;
   512  000838  0E00               	movlw	0
   513  00083A  6E37               	movwf	main@resolucion,c
   514  00083C  0E18               	movlw	24
   515  00083E  6E38               	movwf	main@resolucion+1,c
   516  000840  0E3F               	movlw	63
   517  000842  6E39               	movwf	main@resolucion+2,c
   518                           
   519                           ;main.c: 33: int dir = 0;
   520  000844  0E00               	movlw	0
   521  000846  6E34               	movwf	main@dir+1,c
   522  000848  0E00               	movlw	0
   523  00084A  6E33               	movwf	main@dir,c
   524                           
   525                           ;main.c: 34: char stop = 0;
   526  00084C  0E00               	movlw	0
   527  00084E  6E46               	movwf	main@stop,c
   528                           
   529                           ;main.c: 35: char stepx[10];
   530                           ;main.c: 36: OSCCON = 0b01111110;
   531  000850  0E7E               	movlw	126
   532  000852  6ED3               	movwf	4051,c	;volatile
   533                           
   534                           ;main.c: 37: TRISDbits.RD3 = 1;
   535  000854  8695               	bsf	3989,3,c	;volatile
   536                           
   537                           ;main.c: 38: TRISDbits.RD2 = 1;
   538  000856  8495               	bsf	3989,2,c	;volatile
   539                           
   540                           ;main.c: 39: TRISDbits.RD1 = 0;
   541  000858  9295               	bcf	3989,1,c	;volatile
   542                           
   543                           ;main.c: 40: TRISDbits.RD0 = 0;
   544  00085A  9095               	bcf	3989,0,c	;volatile
   545                           
   546                           ;main.c: 41: UART_Init(9600);
   547  00085C  0E80               	movlw	128
   548  00085E  6E0F               	movwf	UART_Init@baudrate,c
   549  000860  0E25               	movlw	37
   550  000862  6E10               	movwf	UART_Init@baudrate+1,c
   551  000864  0E00               	movlw	0
   552  000866  6E11               	movwf	UART_Init@baudrate+2,c
   553  000868  0E00               	movlw	0
   554  00086A  6E12               	movwf	UART_Init@baudrate+3,c
   555  00086C  ECB4  F007         	call	_UART_Init	;wreg free
   556  000870                     
   557                           ;main.c: 44: if (UART_Data_Ready()) {
   558  000870  EC96  F00B         	call	_UART_Data_Ready	;wreg free
   559  000874  0900               	iorlw	0
   560  000876  A4D8               	btfss	status,2,c
   561  000878  D1F4               	goto	l87
   562  00087A  D7FA               	goto	l85
   563  00087C                     
   564                           ;main.c: 47: steps = 0;
   565  00087C  0E00               	movlw	0
   566  00087E  6E3E               	movwf	main@steps,c
   567  000880  0E00               	movlw	0
   568  000882  6E3F               	movwf	main@steps+1,c
   569  000884  0E00               	movlw	0
   570  000886  6E40               	movwf	main@steps+2,c
   571                           
   572                           ;main.c: 48: PORTDbits.RD0 = 1;
   573  000888  8083               	bsf	3971,0,c	;volatile
   574                           
   575                           ;main.c: 49: while (!PORTDbits.RD2) {
   576  00088A  D00A               	goto	l89
   577  00088C                     
   578                           ;main.c: 50: if (stopcheck()) {
   579  00088C  EC75  F00B         	call	_stopcheck	;wreg free
   580  000890  0900               	iorlw	0
   581  000892  B4D8               	btfsc	status,2,c
   582  000894  D003               	goto	l91
   583                           
   584                           ;main.c: 51: stop = 1;
   585  000896  0E01               	movlw	1
   586  000898  6E46               	movwf	main@stop,c
   587                           
   588                           ;main.c: 52: break;
   589  00089A  D004               	goto	u1860
   590  00089C                     l91:
   591                           
   592                           ;main.c: 53: }
   593                           ;main.c: 54: step();
   594  00089C  EC4F  F00B         	call	_step	;wreg free
   595  0008A0                     l89:
   596  0008A0  A483               	btfss	3971,2,c	;volatile
   597  0008A2  D7F4               	goto	l90
   598  0008A4                     u1860:
   599                           
   600                           ;main.c: 55: }
   601                           ;main.c: 56: PORTDbits.RD0 = 0;
   602  0008A4  9083               	bcf	3971,0,c	;volatile
   603                           
   604                           ;main.c: 57: if (!stop) {
   605  0008A6  5046               	movf	main@stop,w,c
   606  0008A8  B4D8               	btfsc	status,2,c
   607  0008AA  D01F               	goto	l94
   608  0008AC  D088               	goto	l98
   609  0008AE                     
   610                           ;main.c: 59: if (stopcheck()) {
   611  0008AE  EC75  F00B         	call	_stopcheck	;wreg free
   612  0008B2  0900               	iorlw	0
   613  0008B4  B4D8               	btfsc	status,2,c
   614  0008B6  D003               	goto	l96
   615                           
   616                           ;main.c: 60: stop = 1;
   617  0008B8  0E01               	movlw	1
   618  0008BA  6E46               	movwf	main@stop,c
   619                           
   620                           ;main.c: 61: break;
   621  0008BC  D018               	goto	u1890
   622  0008BE                     l96:
   623                           
   624                           ;main.c: 62: }
   625                           ;main.c: 63: step();
   626  0008BE  EC4F  F00B         	call	_step	;wreg free
   627                           
   628                           ;main.c: 64: steps += resolucion;
   629  0008C2  C03E  F018         	movff	main@steps,___ftadd@f1
   630  0008C6  C03F  F019         	movff	main@steps+1,___ftadd@f1+1
   631  0008CA  C040  F01A         	movff	main@steps+2,___ftadd@f1+2
   632  0008CE  C037  F01B         	movff	main@resolucion,___ftadd@f2
   633  0008D2  C038  F01C         	movff	main@resolucion+1,___ftadd@f2+1
   634  0008D6  C039  F01D         	movff	main@resolucion+2,___ftadd@f2+2
   635  0008DA  EC3A  F006         	call	___ftadd	;wreg free
   636  0008DE  C018  F03E         	movff	?___ftadd,main@steps
   637  0008E2  C019  F03F         	movff	?___ftadd+1,main@steps+1
   638  0008E6  C01A  F040         	movff	?___ftadd+2,main@steps+2
   639  0008EA                     l94:
   640  0008EA  A683               	btfss	3971,3,c	;volatile
   641  0008EC  D7E0               	goto	l95
   642  0008EE                     u1890:
   643                           
   644                           ;main.c: 65: }
   645                           ;main.c: 66: if (!stop) {
   646  0008EE  5046               	movf	main@stop,w,c
   647  0008F0  A4D8               	btfss	status,2,c
   648  0008F2  D065               	goto	l98
   649                           
   650                           ;main.c: 67: UART_Write('d');
   651  0008F4  0E64               	movlw	100
   652  0008F6  EC8C  F00B         	call	_UART_Write
   653                           
   654                           ;main.c: 68: trunc(steps);
   655  0008FA  C03E  F01A         	movff	main@steps,trunc@x
   656  0008FE  C03F  F01B         	movff	main@steps+1,trunc@x+1
   657  000902  C040  F01C         	movff	main@steps+2,trunc@x+2
   658  000906  ECBB  F00A         	call	_trunc	;wreg free
   659                           
   660                           ;main.c: 69: sprintf(stepx, "%d", ((int)steps + 353 - 43));
   661  00090A  0E29               	movlw	low main@stepx
   662  00090C  6E10               	movwf	sprintf@sp,c
   663  00090E  0E00               	movlw	high main@stepx
   664  000910  6E11               	movwf	sprintf@sp+1,c
   665  000912  0E0B               	movlw	low STR_1
   666  000914  6E12               	movwf	sprintf@f,c
   667  000916  0E08               	movlw	high STR_1
   668  000918  6E13               	movwf	sprintf@f+1,c
   669  00091A  C03E  F001         	movff	main@steps,___fttol@f1
   670  00091E  C03F  F002         	movff	main@steps+1,___fttol@f1+1
   671  000922  C040  F003         	movff	main@steps+2,___fttol@f1+2
   672  000926  EC4A  F008         	call	___fttol	;wreg free
   673  00092A  0E36               	movlw	54
   674  00092C  2401               	addwf	?___fttol,w,c
   675  00092E  6E14               	movwf	?_sprintf+4,c
   676  000930  0E01               	movlw	1
   677  000932  2002               	addwfc	?___fttol+1,w,c
   678  000934  6E15               	movwf	?_sprintf+5,c
   679  000936  EC10  F007         	call	_sprintf	;wreg free
   680                           
   681                           ;main.c: 70: for (int u = 0; stepx[u] != '\0'; u++) {
   682  00093A  0E00               	movlw	0
   683  00093C  6E3B               	movwf	main@u+1,c
   684  00093E  0E00               	movlw	0
   685  000940  6E3A               	movwf	main@u,c
   686  000942  D01F               	goto	l99
   687  000944                     
   688                           ;main.c: 71: _delay((unsigned long)((100)*(8000000/4000.0)));
   689  000944  0E02               	movlw	2
   690  000946  6E25               	movwf	(??_main+1)& (0+255),c
   691  000948  0E04               	movlw	4
   692  00094A  6E24               	movwf	??_main& (0+255),c
   693  00094C  0EBA               	movlw	186
   694  00094E                     u2037:
   695  00094E  2EE8               	decfsz	wreg,f,c
   696  000950  D7FE               	bra	u2037
   697  000952  2E24               	decfsz	??_main& (0+255),f,c
   698  000954  D7FC               	bra	u2037
   699  000956  2E25               	decfsz	(??_main+1)& (0+255),f,c
   700  000958  D7FA               	bra	u2037
   701  00095A  D000               	nop2	
   702                           
   703                           ;main.c: 72: UART_Write(stepx[u]);
   704  00095C  0E29               	movlw	low main@stepx
   705  00095E  243A               	addwf	main@u,w,c
   706  000960  6ED9               	movwf	fsr2l,c
   707  000962  0E00               	movlw	high main@stepx
   708  000964  203B               	addwfc	main@u+1,w,c
   709  000966  6EDA               	movwf	fsr2h,c
   710  000968  50DF               	movf	indf2,w,c
   711  00096A  EC8C  F00B         	call	_UART_Write
   712                           
   713                           ;main.c: 73: stepx[u] = '\0';
   714  00096E  0E29               	movlw	low main@stepx
   715  000970  243A               	addwf	main@u,w,c
   716  000972  6ED9               	movwf	fsr2l,c
   717  000974  0E00               	movlw	high main@stepx
   718  000976  203B               	addwfc	main@u+1,w,c
   719  000978  6EDA               	movwf	fsr2h,c
   720  00097A  0E00               	movlw	0
   721  00097C  6EDF               	movwf	indf2,c
   722  00097E  4A3A               	infsnz	main@u,f,c
   723  000980  2A3B               	incf	main@u+1,f,c
   724  000982                     l99:
   725  000982  0E29               	movlw	low main@stepx
   726  000984  243A               	addwf	main@u,w,c
   727  000986  6ED9               	movwf	fsr2l,c
   728  000988  0E00               	movlw	high main@stepx
   729  00098A  203B               	addwfc	main@u+1,w,c
   730  00098C  6EDA               	movwf	fsr2h,c
   731  00098E  50DF               	movf	indf2,w,c
   732  000990  A4D8               	btfss	status,2,c
   733  000992  D7D8               	goto	l100
   734                           
   735                           ;main.c: 74: }
   736                           ;main.c: 75: _delay((unsigned long)((100)*(8000000/4000.0)));
   737  000994  0E02               	movlw	2
   738  000996  6E25               	movwf	(??_main+1)& (0+255),c
   739  000998  0E04               	movlw	4
   740  00099A  6E24               	movwf	??_main& (0+255),c
   741  00099C  0EBA               	movlw	186
   742  00099E                     u2047:
   743  00099E  2EE8               	decfsz	wreg,f,c
   744  0009A0  D7FE               	bra	u2047
   745  0009A2  2E24               	decfsz	??_main& (0+255),f,c
   746  0009A4  D7FC               	bra	u2047
   747  0009A6  2E25               	decfsz	(??_main+1)& (0+255),f,c
   748  0009A8  D7FA               	bra	u2047
   749  0009AA  D000               	nop2	
   750                           
   751                           ;main.c: 76: UART_Write('d');
   752  0009AC  0E64               	movlw	100
   753  0009AE  EC8C  F00B         	call	_UART_Write
   754                           
   755                           ;main.c: 77: pos = steps;
   756  0009B2  C03E  F043         	movff	main@steps,main@pos
   757  0009B6  C03F  F044         	movff	main@steps+1,main@pos+1
   758  0009BA  C040  F045         	movff	main@steps+2,main@pos+2
   759  0009BE                     l98:
   760                           
   761                           ;main.c: 78: }
   762                           ;main.c: 79: }
   763                           ;main.c: 80: if (stop)UART_Write('e');
   764  0009BE  5046               	movf	main@stop,w,c
   765  0009C0  B4D8               	btfsc	status,2,c
   766  0009C2  D14C               	goto	l126
   767  0009C4  0E65               	movlw	101
   768  0009C6  EC8C  F00B         	call	_UART_Write
   769  0009CA  D148               	goto	l126
   770  0009CC                     
   771                           ;main.c: 84: i = 0;
   772  0009CC  0E00               	movlw	0
   773  0009CE  6E3D               	movwf	main@i+1,c
   774  0009D0  0E00               	movlw	0
   775  0009D2  6E3C               	movwf	main@i,c
   776                           
   777                           ;main.c: 85: move = 0;
   778  0009D4  0E00               	movlw	0
   779  0009D6  6E42               	movwf	main@move+1,c
   780  0009D8  0E00               	movlw	0
   781  0009DA  6E41               	movwf	main@move,c
   782  0009DC                     
   783                           ;main.c: 87: stepx[i] = UART_Read();
   784  0009DC  0E29               	movlw	low main@stepx
   785  0009DE  243C               	addwf	main@i,w,c
   786  0009E0  6ED9               	movwf	fsr2l,c
   787  0009E2  0E00               	movlw	high main@stepx
   788  0009E4  203D               	addwfc	main@i+1,w,c
   789  0009E6  6EDA               	movwf	fsr2h,c
   790  0009E8  EC92  F00B         	call	_UART_Read	;wreg free
   791  0009EC  6EDF               	movwf	indf2,c
   792                           
   793                           ;main.c: 88: i += 1;
   794  0009EE  4A3C               	infsnz	main@i,f,c
   795  0009F0  2A3D               	incf	main@i+1,f,c
   796                           
   797                           ;main.c: 89: } while (stepx[i - 1] != 'a');
   798  0009F2  0EFF               	movlw	255
   799  0009F4  6E24               	movwf	??_main& (0+255),c
   800  0009F6  0EFF               	movlw	255
   801  0009F8  6E25               	movwf	(??_main+1)& (0+255),c
   802  0009FA  C03C  F026         	movff	main@i,??_main+2
   803  0009FE  C03D  F027         	movff	main@i+1,??_main+3
   804  000A02  5024               	movf	??_main,w,c
   805  000A04  2626               	addwf	??_main+2,f,c
   806  000A06  5025               	movf	??_main+1,w,c
   807  000A08  2227               	addwfc	??_main+3,f,c
   808  000A0A  0E29               	movlw	low main@stepx
   809  000A0C  2426               	addwf	??_main+2,w,c
   810  000A0E  6ED9               	movwf	fsr2l,c
   811  000A10  0E00               	movlw	high main@stepx
   812  000A12  2027               	addwfc	??_main+3,w,c
   813  000A14  6EDA               	movwf	fsr2h,c
   814  000A16  0E61               	movlw	97
   815  000A18  18DE               	xorwf	postinc2,w,c
   816  000A1A  A4D8               	btfss	status,2,c
   817  000A1C  D7DF               	goto	l105
   818                           
   819                           ;main.c: 90: stepx[i - 1] = '\0';
   820  000A1E  0EFF               	movlw	255
   821  000A20  6E24               	movwf	??_main& (0+255),c
   822  000A22  0EFF               	movlw	255
   823  000A24  6E25               	movwf	(??_main+1)& (0+255),c
   824  000A26  C03C  F026         	movff	main@i,??_main+2
   825  000A2A  C03D  F027         	movff	main@i+1,??_main+3
   826  000A2E  5024               	movf	??_main,w,c
   827  000A30  2626               	addwf	??_main+2,f,c
   828  000A32  5025               	movf	??_main+1,w,c
   829  000A34  2227               	addwfc	??_main+3,f,c
   830  000A36  0E29               	movlw	low main@stepx
   831  000A38  2426               	addwf	??_main+2,w,c
   832  000A3A  6ED9               	movwf	fsr2l,c
   833  000A3C  0E00               	movlw	high main@stepx
   834  000A3E  2027               	addwfc	??_main+3,w,c
   835  000A40  6EDA               	movwf	fsr2h,c
   836  000A42  0E00               	movlw	0
   837  000A44  6EDF               	movwf	indf2,c
   838                           
   839                           ;main.c: 91: for (int k = 0; stepx[k] != '\0'; k++) {
   840  000A46  0E00               	movlw	0
   841  000A48  6E36               	movwf	main@k+1,c
   842  000A4A  0E00               	movlw	0
   843  000A4C  6E35               	movwf	main@k,c
   844  000A4E  D01E               	goto	l107
   845  000A50                     
   846                           ;main.c: 92: move = move * 10 + stepx[k] - '0';
   847  000A50  C041  F001         	movff	main@move,___wmul@multiplier
   848  000A54  C042  F002         	movff	main@move+1,___wmul@multiplier+1
   849  000A58  0E00               	movlw	0
   850  000A5A  6E04               	movwf	___wmul@multiplicand+1,c
   851  000A5C  0E0A               	movlw	10
   852  000A5E  6E03               	movwf	___wmul@multiplicand,c
   853  000A60  EC62  F00B         	call	___wmul	;wreg free
   854  000A64  0E29               	movlw	low main@stepx
   855  000A66  2435               	addwf	main@k,w,c
   856  000A68  6ED9               	movwf	fsr2l,c
   857  000A6A  0E00               	movlw	high main@stepx
   858  000A6C  2036               	addwfc	main@k+1,w,c
   859  000A6E  6EDA               	movwf	fsr2h,c
   860  000A70  50DF               	movf	indf2,w,c
   861  000A72  6E24               	movwf	??_main& (0+255),c
   862  000A74  5024               	movf	??_main,w,c
   863  000A76  2601               	addwf	?___wmul,f,c
   864  000A78  0E00               	movlw	0
   865  000A7A  2202               	addwfc	?___wmul+1,f,c
   866  000A7C  0ED0               	movlw	208
   867  000A7E  2401               	addwf	?___wmul,w,c
   868  000A80  6E41               	movwf	main@move,c
   869  000A82  0EFF               	movlw	255
   870  000A84  2002               	addwfc	?___wmul+1,w,c
   871  000A86  6E42               	movwf	main@move+1,c
   872  000A88  4A35               	infsnz	main@k,f,c
   873  000A8A  2A36               	incf	main@k+1,f,c
   874  000A8C                     l107:
   875  000A8C  0E29               	movlw	low main@stepx
   876  000A8E  2435               	addwf	main@k,w,c
   877  000A90  6ED9               	movwf	fsr2l,c
   878  000A92  0E00               	movlw	high main@stepx
   879  000A94  2036               	addwfc	main@k+1,w,c
   880  000A96  6EDA               	movwf	fsr2h,c
   881  000A98  50DF               	movf	indf2,w,c
   882  000A9A  A4D8               	btfss	status,2,c
   883  000A9C  D7D9               	goto	l108
   884                           
   885                           ;main.c: 93: }
   886                           ;main.c: 94: if (move < pos) {
   887  000A9E  C041  F009         	movff	main@move,___awtoft@c
   888  000AA2  C042  F00A         	movff	main@move+1,___awtoft@c+1
   889  000AA6  EC33  F00B         	call	___awtoft	;wreg free
   890  000AAA  C009  F00D         	movff	?___awtoft,___ftge@ff1
   891  000AAE  C00A  F00E         	movff	?___awtoft+1,___ftge@ff1+1
   892  000AB2  C00B  F00F         	movff	?___awtoft+2,___ftge@ff1+2
   893  000AB6  C043  F010         	movff	main@pos,___ftge@ff2
   894  000ABA  C044  F011         	movff	main@pos+1,___ftge@ff2+1
   895  000ABE  C045  F012         	movff	main@pos+2,___ftge@ff2+2
   896  000AC2  ECFB  F009         	call	___ftge	;wreg free
   897  000AC6  B0D8               	btfsc	status,0,c
   898  000AC8  D005               	goto	l110
   899                           
   900                           ;main.c: 95: PORTDbits.RD0 = 1;
   901  000ACA  8083               	bsf	3971,0,c	;volatile
   902                           
   903                           ;main.c: 96: dir = 0;
   904  000ACC  0E00               	movlw	0
   905  000ACE  6E34               	movwf	main@dir+1,c
   906  000AD0  0E00               	movlw	0
   907  000AD2  6E33               	movwf	main@dir,c
   908  000AD4                     l110:
   909                           
   910                           ;main.c: 97: }
   911                           ;main.c: 98: if (move > pos) {
   912  000AD4  C043  F00D         	movff	main@pos,___ftge@ff1
   913  000AD8  C044  F00E         	movff	main@pos+1,___ftge@ff1+1
   914  000ADC  C045  F00F         	movff	main@pos+2,___ftge@ff1+2
   915  000AE0  C041  F009         	movff	main@move,___awtoft@c
   916  000AE4  C042  F00A         	movff	main@move+1,___awtoft@c+1
   917  000AE8  EC33  F00B         	call	___awtoft	;wreg free
   918  000AEC  C009  F010         	movff	?___awtoft,___ftge@ff2
   919  000AF0  C00A  F011         	movff	?___awtoft+1,___ftge@ff2+1
   920  000AF4  C00B  F012         	movff	?___awtoft+2,___ftge@ff2+2
   921  000AF8  ECFB  F009         	call	___ftge	;wreg free
   922  000AFC  B0D8               	btfsc	status,0,c
   923  000AFE  D08F               	goto	l112
   924                           
   925                           ;main.c: 99: PORTDbits.RD0 = 0;
   926  000B00  9083               	bcf	3971,0,c	;volatile
   927                           
   928                           ;main.c: 100: dir = 1;
   929  000B02  0E00               	movlw	0
   930  000B04  6E34               	movwf	main@dir+1,c
   931  000B06  0E01               	movlw	1
   932  000B08  6E33               	movwf	main@dir,c
   933                           
   934                           ;main.c: 101: }
   935                           ;main.c: 102: switch (dir) {
   936  000B0A  D089               	goto	l112
   937  000B0C                     
   938                           ;main.c: 105: step();
   939  000B0C  EC4F  F00B         	call	_step	;wreg free
   940                           
   941                           ;main.c: 106: pos += resolucion * 1;
   942  000B10  C043  F018         	movff	main@pos,___ftadd@f1
   943  000B14  C044  F019         	movff	main@pos+1,___ftadd@f1+1
   944  000B18  C045  F01A         	movff	main@pos+2,___ftadd@f1+2
   945  000B1C  0E00               	movlw	0
   946  000B1E  6E0C               	movwf	___ftmul@f2,c
   947  000B20  0E80               	movlw	128
   948  000B22  6E0D               	movwf	___ftmul@f2+1,c
   949  000B24  0E3F               	movlw	63
   950  000B26  6E0E               	movwf	___ftmul@f2+2,c
   951  000B28  C037  F009         	movff	main@resolucion,___ftmul@f1
   952  000B2C  C038  F00A         	movff	main@resolucion+1,___ftmul@f1+1
   953  000B30  C039  F00B         	movff	main@resolucion+2,___ftmul@f1+2
   954  000B34  ECC4  F008         	call	___ftmul	;wreg free
   955  000B38  C009  F01B         	movff	?___ftmul,___ftadd@f2
   956  000B3C  C00A  F01C         	movff	?___ftmul+1,___ftadd@f2+1
   957  000B40  C00B  F01D         	movff	?___ftmul+2,___ftadd@f2+2
   958  000B44  EC3A  F006         	call	___ftadd	;wreg free
   959  000B48  C018  F043         	movff	?___ftadd,main@pos
   960  000B4C  C019  F044         	movff	?___ftadd+1,main@pos+1
   961  000B50  C01A  F045         	movff	?___ftadd+2,main@pos+2
   962                           
   963                           ;main.c: 107: if (stopcheck()) {
   964  000B54  EC75  F00B         	call	_stopcheck	;wreg free
   965  000B58  0900               	iorlw	0
   966  000B5A  B4D8               	btfsc	status,2,c
   967  000B5C  D003               	goto	l116
   968                           
   969                           ;main.c: 108: stop = 1;
   970  000B5E  0E01               	movlw	1
   971  000B60  6E46               	movwf	main@stop,c
   972                           
   973                           ;main.c: 109: break;
   974  000B62  D06C               	goto	l118
   975  000B64                     l116:
   976  000B64  C043  F00D         	movff	main@pos,___ftge@ff1
   977  000B68  C044  F00E         	movff	main@pos+1,___ftge@ff1+1
   978  000B6C  C045  F00F         	movff	main@pos+2,___ftge@ff1+2
   979  000B70  C041  F009         	movff	main@move,___awtoft@c
   980  000B74  C042  F00A         	movff	main@move+1,___awtoft@c+1
   981  000B78  EC33  F00B         	call	___awtoft	;wreg free
   982  000B7C  C009  F010         	movff	?___awtoft,___ftge@ff2
   983  000B80  C00A  F011         	movff	?___awtoft+1,___ftge@ff2+1
   984  000B84  C00B  F012         	movff	?___awtoft+2,___ftge@ff2+2
   985  000B88  ECFB  F009         	call	___ftge	;wreg free
   986  000B8C  B0D8               	btfsc	status,0,c
   987  000B8E  D056               	goto	l118
   988  000B90  D7BD               	goto	l115
   989  000B92                     
   990                           ;main.c: 115: step();
   991  000B92  EC4F  F00B         	call	_step	;wreg free
   992                           
   993                           ;main.c: 116: pos += resolucion * -1;
   994  000B96  C043  F018         	movff	main@pos,___ftadd@f1
   995  000B9A  C044  F019         	movff	main@pos+1,___ftadd@f1+1
   996  000B9E  C045  F01A         	movff	main@pos+2,___ftadd@f1+2
   997  000BA2  0E00               	movlw	0
   998  000BA4  6E0C               	movwf	___ftmul@f2,c
   999  000BA6  0E80               	movlw	128
  1000  000BA8  6E0D               	movwf	___ftmul@f2+1,c
  1001  000BAA  0EBF               	movlw	191
  1002  000BAC  6E0E               	movwf	___ftmul@f2+2,c
  1003  000BAE  C037  F009         	movff	main@resolucion,___ftmul@f1
  1004  000BB2  C038  F00A         	movff	main@resolucion+1,___ftmul@f1+1
  1005  000BB6  C039  F00B         	movff	main@resolucion+2,___ftmul@f1+2
  1006  000BBA  ECC4  F008         	call	___ftmul	;wreg free
  1007  000BBE  C009  F01B         	movff	?___ftmul,___ftadd@f2
  1008  000BC2  C00A  F01C         	movff	?___ftmul+1,___ftadd@f2+1
  1009  000BC6  C00B  F01D         	movff	?___ftmul+2,___ftadd@f2+2
  1010  000BCA  EC3A  F006         	call	___ftadd	;wreg free
  1011  000BCE  C018  F043         	movff	?___ftadd,main@pos
  1012  000BD2  C019  F044         	movff	?___ftadd+1,main@pos+1
  1013  000BD6  C01A  F045         	movff	?___ftadd+2,main@pos+2
  1014                           
  1015                           ;main.c: 117: if (stopcheck()) {
  1016  000BDA  EC75  F00B         	call	_stopcheck	;wreg free
  1017  000BDE  0900               	iorlw	0
  1018  000BE0  B4D8               	btfsc	status,2,c
  1019  000BE2  D003               	goto	l122
  1020                           
  1021                           ;main.c: 118: stop = 1;
  1022  000BE4  0E01               	movlw	1
  1023  000BE6  6E46               	movwf	main@stop,c
  1024                           
  1025                           ;main.c: 119: break;
  1026  000BE8  D016               	goto	u2000
  1027  000BEA                     l122:
  1028  000BEA  C041  F009         	movff	main@move,___awtoft@c
  1029  000BEE  C042  F00A         	movff	main@move+1,___awtoft@c+1
  1030  000BF2  EC33  F00B         	call	___awtoft	;wreg free
  1031  000BF6  C009  F00D         	movff	?___awtoft,___ftge@ff1
  1032  000BFA  C00A  F00E         	movff	?___awtoft+1,___ftge@ff1+1
  1033  000BFE  C00B  F00F         	movff	?___awtoft+2,___ftge@ff1+2
  1034  000C02  C043  F010         	movff	main@pos,___ftge@ff2
  1035  000C06  C044  F011         	movff	main@pos+1,___ftge@ff2+1
  1036  000C0A  C045  F012         	movff	main@pos+2,___ftge@ff2+2
  1037  000C0E  ECFB  F009         	call	___ftge	;wreg free
  1038  000C12  A0D8               	btfss	status,0,c
  1039  000C14  D7BE               	goto	l121
  1040  000C16                     u2000:
  1041                           
  1042                           ;main.c: 120: }
  1043                           ;main.c: 121: }
  1044                           ;main.c: 122: PORTDbits.RD0 = 0;
  1045  000C16  9083               	bcf	3971,0,c	;volatile
  1046                           
  1047                           ;main.c: 123: step();
  1048  000C18  EC4F  F00B         	call	_step	;wreg free
  1049                           
  1050                           ;main.c: 127: }
  1051                           
  1052                           ;main.c: 126: break;
  1053                           
  1054                           ;main.c: 125: default:
  1055                           
  1056                           ;main.c: 124: break;
  1057  000C1C  D00F               	goto	l118
  1058  000C1E                     l112:
  1059  000C1E  C033  F024         	movff	main@dir,??_main
  1060  000C22  C034  F025         	movff	main@dir+1,??_main+1
  1061                           
  1062                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1063                           ; Switch size 1, requested type "space"
  1064                           ; Number of cases is 1, Range of values is 0 to 0
  1065                           ; switch strategies available:
  1066                           ; Name         Instructions Cycles
  1067                           ; simple_byte            4     3 (average)
  1068                           ;	Chosen strategy is simple_byte
  1069  000C26  5025               	movf	??_main+1,w,c
  1070  000C28  0A00               	xorlw	0	; case 0
  1071  000C2A  A4D8               	btfss	status,2,c
  1072  000C2C  D007               	goto	l118
  1073                           
  1074                           ; Switch size 1, requested type "space"
  1075                           ; Number of cases is 2, Range of values is 0 to 1
  1076                           ; switch strategies available:
  1077                           ; Name         Instructions Cycles
  1078                           ; simple_byte            7     4 (average)
  1079                           ;	Chosen strategy is simple_byte
  1080  000C2E  5024               	movf	??_main,w,c
  1081  000C30  0A00               	xorlw	0	; case 0
  1082  000C32  B4D8               	btfsc	status,2,c
  1083  000C34  D7DA               	goto	l122
  1084  000C36  0A01               	xorlw	1	; case 1
  1085  000C38  B4D8               	btfsc	status,2,c
  1086  000C3A  D794               	goto	l116
  1087  000C3C                     l118:
  1088                           
  1089                           ;main.c: 128: dir = 0;
  1090  000C3C  0E00               	movlw	0
  1091  000C3E  6E34               	movwf	main@dir+1,c
  1092  000C40  0E00               	movlw	0
  1093  000C42  6E33               	movwf	main@dir,c
  1094                           
  1095                           ;main.c: 129: if (!stop)UART_Write('d');
  1096  000C44  5046               	movf	main@stop,w,c
  1097  000C46  A4D8               	btfss	status,2,c
  1098  000C48  D003               	goto	l125
  1099  000C4A  0E64               	movlw	100
  1100  000C4C  EC8C  F00B         	call	_UART_Write
  1101  000C50                     l125:
  1102                           
  1103                           ;main.c: 130: if (stop)UART_Write('e');
  1104  000C50  5046               	movf	main@stop,w,c
  1105  000C52  B4D8               	btfsc	status,2,c
  1106  000C54  D003               	goto	l126
  1107  000C56  0E65               	movlw	101
  1108  000C58  EC8C  F00B         	call	_UART_Write
  1109  000C5C                     l126:
  1110                           
  1111                           ;main.c: 131: stop = 0;
  1112  000C5C  0E00               	movlw	0
  1113  000C5E  6E46               	movwf	main@stop,c
  1114                           
  1115                           ;main.c: 133: }
  1116                           
  1117                           ;main.c: 132: break;
  1118  000C60  D607               	goto	l85
  1119  000C62                     l87:
  1120  000C62  EC92  F00B         	call	_UART_Read	;wreg free
  1121                           
  1122                           ; Switch size 1, requested type "space"
  1123                           ; Number of cases is 2, Range of values is 97 to 99
  1124                           ; switch strategies available:
  1125                           ; Name         Instructions Cycles
  1126                           ; simple_byte            7     4 (average)
  1127                           ;	Chosen strategy is simple_byte
  1128  000C66  0A61               	xorlw	97	; case 97
  1129  000C68  B4D8               	btfsc	status,2,c
  1130  000C6A  D6B0               	goto	l104
  1131  000C6C  0A02               	xorlw	2	; case 99
  1132  000C6E  B4D8               	btfsc	status,2,c
  1133  000C70  D605               	goto	l88
  1134  000C72  D5FE               	goto	l85
  1135  000C74                     __end_of_main:
  1136                           	opt stack 0
  1137                           tblptru	equ	0xFF8
  1138                           wreg	equ	0xFE8
  1139                           indf2	equ	0xFDF
  1140                           postinc2	equ	0xFDE
  1141                           fsr2h	equ	0xFDA
  1142                           fsr2l	equ	0xFD9
  1143                           status	equ	0xFD8
  1144                           
  1145 ;; *************** function _trunc *****************
  1146 ;; Defined at:
  1147 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\trunc.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  x               3   25[COMRAM] void 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  i               3   28[COMRAM] void 
  1152 ;;  expon           2   31[COMRAM] int 
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  3   25[COMRAM] int 
  1155 ;; Registers used:
  1156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1162 ;;      Params:         3       0       0       0       0       0       0       0       0
  1163 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1164 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1165 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1166 ;;Total ram usage:        8 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    2
  1169 ;; This function calls:
  1170 ;;		___altoft
  1171 ;;		___fttol
  1172 ;;		_frexp
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text1
  1179  001576                     __ptext1:
  1180                           	opt stack 0
  1181  001576                     _trunc:
  1182                           	opt stack 28
  1183                           
  1184                           ;incstack = 0
  1185  001576  C01A  F001         	movff	trunc@x,frexp@value
  1186  00157A  C01B  F002         	movff	trunc@x+1,frexp@value+1
  1187  00157E  C01C  F003         	movff	trunc@x+2,frexp@value+2
  1188  001582  0E20               	movlw	low trunc@expon
  1189  001584  6E04               	movwf	frexp@eptr,c
  1190  001586  0E00               	movlw	high trunc@expon
  1191  001588  6E05               	movwf	frexp@eptr+1,c
  1192  00158A  EC43  F00A         	call	_frexp	;wreg free
  1193  00158E  BE21               	btfsc	trunc@expon+1,7,c
  1194  001590  0012               	return	
  1195                           
  1196                           ;	Return value of _trunc is never used
  1197  001592  5021               	movf	trunc@expon+1,w,c
  1198  001594  E11D               	bnz	l708
  1199  001596  0E15               	movlw	21
  1200  001598  5C20               	subwf	trunc@expon,w,c
  1201  00159A  B0D8               	btfsc	status,0,c
  1202  00159C  0012               	return	
  1203                           
  1204                           ;	Return value of _trunc is never used
  1205  00159E  C01A  F001         	movff	trunc@x,___fttol@f1
  1206  0015A2  C01B  F002         	movff	trunc@x+1,___fttol@f1+1
  1207  0015A6  C01C  F003         	movff	trunc@x+2,___fttol@f1+2
  1208  0015AA  EC4A  F008         	call	___fttol	;wreg free
  1209  0015AE  C001  F010         	movff	?___fttol,___altoft@c
  1210  0015B2  C002  F011         	movff	?___fttol+1,___altoft@c+1
  1211  0015B6  C003  F012         	movff	?___fttol+2,___altoft@c+2
  1212  0015BA  C004  F013         	movff	?___fttol+3,___altoft@c+3
  1213  0015BE  EC7F  F00A         	call	___altoft	;wreg free
  1214  0015C2  C010  F01D         	movff	?___altoft,trunc@i
  1215  0015C6  C011  F01E         	movff	?___altoft+1,trunc@i+1
  1216  0015CA  C012  F01F         	movff	?___altoft+2,trunc@i+2
  1217  0015CE  0012               	return	
  1218  0015D0                     l708:
  1219  0015D0  0012               	return		;funcret
  1220  0015D2                     __end_of_trunc:
  1221                           	opt stack 0
  1222                           tblptru	equ	0xFF8
  1223                           wreg	equ	0xFE8
  1224                           indf2	equ	0xFDF
  1225                           postinc2	equ	0xFDE
  1226                           fsr2h	equ	0xFDA
  1227                           fsr2l	equ	0xFD9
  1228                           status	equ	0xFD8
  1229                           
  1230 ;; *************** function _frexp *****************
  1231 ;; Defined at:
  1232 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  value           3    0[COMRAM] int 
  1235 ;;  eptr            2    3[COMRAM] PTR int 
  1236 ;;		 -> trunc@expon(2), 
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;		None
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  3    0[COMRAM] PTR int 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1248 ;;      Params:         5       0       0       0       0       0       0       0       0
  1249 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1250 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1251 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1252 ;;Total ram usage:        7 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; This function calls:
  1255 ;;		Nothing
  1256 ;; This function is called by:
  1257 ;;		_trunc
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text2
  1262  001486                     __ptext2:
  1263                           	opt stack 0
  1264  001486                     _frexp:
  1265                           	opt stack 29
  1266                           
  1267                           ;incstack = 0
  1268  001486  5001               	movf	frexp@value,w,c
  1269  001488  1002               	iorwf	frexp@value+1,w,c
  1270  00148A  1003               	iorwf	frexp@value+2,w,c
  1271  00148C  A4D8               	btfss	status,2,c
  1272  00148E  D009               	goto	l733
  1273  001490  C004  FFD9         	movff	frexp@eptr,fsr2l
  1274  001494  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1275  001498  0E00               	movlw	0
  1276  00149A  6EDE               	movwf	postinc2,c
  1277  00149C  0E00               	movlw	0
  1278  00149E  6EDD               	movwf	postdec2,c
  1279                           
  1280                           ;	Return value of _frexp is never used
  1281  0014A0  0012               	return	
  1282  0014A2                     l733:
  1283  0014A2  5003               	movf	frexp@value+2,w,c
  1284  0014A4  0B7F               	andlw	127
  1285  0014A6  6E06               	movwf	??_frexp& (0+255),c
  1286  0014A8  6A07               	clrf	(??_frexp+1)& (0+255),c
  1287  0014AA  90D8               	bcf	status,0,c
  1288  0014AC  3606               	rlcf	??_frexp,f,c
  1289  0014AE  3607               	rlcf	??_frexp+1,f,c
  1290  0014B0  C004  FFD9         	movff	frexp@eptr,fsr2l
  1291  0014B4  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1292  0014B8  C006  FFDE         	movff	??_frexp,postinc2
  1293  0014BC  C007  FFDD         	movff	??_frexp+1,postdec2
  1294  0014C0  AE02               	btfss	frexp@value+1,7,c
  1295  0014C2  D003               	goto	u1360
  1296  0014C4  6A06               	clrf	??_frexp& (0+255),c
  1297  0014C6  2A06               	incf	??_frexp& (0+255),f,c
  1298  0014C8  D001               	goto	u1368
  1299  0014CA                     u1360:
  1300  0014CA  6A06               	clrf	??_frexp& (0+255),c
  1301  0014CC                     u1368:
  1302  0014CC  5006               	movf	??_frexp,w,c
  1303  0014CE  C004  FFD9         	movff	frexp@eptr,fsr2l
  1304  0014D2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1305  0014D6  12DE               	iorwf	postinc2,f,c
  1306  0014D8  0E00               	movlw	0
  1307  0014DA  12DD               	iorwf	postdec2,f,c
  1308  0014DC  C004  FFD9         	movff	frexp@eptr,fsr2l
  1309  0014E0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1310  0014E4  0E82               	movlw	130
  1311  0014E6  26DE               	addwf	postinc2,f,c
  1312  0014E8  0EFF               	movlw	255
  1313  0014EA  22DD               	addwfc	postdec2,f,c
  1314  0014EC  8003               	bsf	frexp@value+2,0,c
  1315  0014EE  8203               	bsf	frexp@value+2,1,c
  1316  0014F0  8403               	bsf	frexp@value+2,2,c
  1317  0014F2  8603               	bsf	frexp@value+2,3,c
  1318  0014F4  8803               	bsf	frexp@value+2,4,c
  1319  0014F6  8A03               	bsf	frexp@value+2,5,c
  1320  0014F8  9C03               	bcf	frexp@value+2,6,c
  1321  0014FA  9E02               	bcf	frexp@value+1,7,c
  1322  0014FC  0012               	return	
  1323  0014FE                     __end_of_frexp:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           wreg	equ	0xFE8
  1327                           indf2	equ	0xFDF
  1328                           postinc2	equ	0xFDE
  1329                           postdec2	equ	0xFDD
  1330                           fsr2h	equ	0xFDA
  1331                           fsr2l	equ	0xFD9
  1332                           status	equ	0xFD8
  1333                           
  1334 ;; *************** function ___fttol *****************
  1335 ;; Defined at:
  1336 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;  f1              3    0[COMRAM] float 
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;  lval            4   10[COMRAM] unsigned long 
  1341 ;;  exp1            1   14[COMRAM] unsigned char 
  1342 ;;  sign1           1    9[COMRAM] unsigned char 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  4    0[COMRAM] long 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2, status,0
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1352 ;;      Params:         4       0       0       0       0       0       0       0       0
  1353 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1354 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1355 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1356 ;;Total ram usage:       15 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; This function calls:
  1359 ;;		Nothing
  1360 ;; This function is called by:
  1361 ;;		_main
  1362 ;;		_trunc
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text3
  1367  001094                     __ptext3:
  1368                           	opt stack 0
  1369  001094                     ___fttol:
  1370                           	opt stack 29
  1371                           
  1372                           ;incstack = 0
  1373  001094  C003  F005         	movff	___fttol@f1+2,??___fttol
  1374  001098  6A06               	clrf	(??___fttol+1)& (0+255),c
  1375  00109A  6A07               	clrf	(??___fttol+2)& (0+255),c
  1376  00109C  3402               	rlcf	___fttol@f1+1,w,c
  1377  00109E  3605               	rlcf	??___fttol& (0+255),f,c
  1378  0010A0  E301               	bnc	u1211
  1379  0010A2  8006               	bsf	(??___fttol+1)& (0+255),0,c
  1380  0010A4                     u1211:
  1381  0010A4  5005               	movf	??___fttol,w,c
  1382  0010A6  6E0F               	movwf	___fttol@exp1,c
  1383  0010A8  500F               	movf	___fttol@exp1,w,c
  1384  0010AA  A4D8               	btfss	status,2,c
  1385  0010AC  D009               	goto	l472
  1386  0010AE  0E00               	movlw	0
  1387  0010B0  6E01               	movwf	?___fttol,c
  1388  0010B2  0E00               	movlw	0
  1389  0010B4  6E02               	movwf	?___fttol+1,c
  1390  0010B6  0E00               	movlw	0
  1391  0010B8  6E03               	movwf	?___fttol+2,c
  1392  0010BA  0E00               	movlw	0
  1393  0010BC  6E04               	movwf	?___fttol+3,c
  1394  0010BE  0012               	return	
  1395  0010C0                     l472:
  1396  0010C0  0E17               	movlw	23
  1397  0010C2  6E05               	movwf	??___fttol& (0+255),c
  1398  0010C4  C001  F006         	movff	___fttol@f1,??___fttol+1
  1399  0010C8  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  1400  0010CC  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  1401  0010D0  2805               	incf	??___fttol,w,c
  1402  0010D2  6E09               	movwf	(??___fttol+4)& (0+255),c
  1403  0010D4  D004               	goto	u1230
  1404  0010D6                     u1235:
  1405  0010D6  90D8               	bcf	status,0,c
  1406  0010D8  3208               	rrcf	??___fttol+3,f,c
  1407  0010DA  3207               	rrcf	??___fttol+2,f,c
  1408  0010DC  3206               	rrcf	??___fttol+1,f,c
  1409  0010DE                     u1230:
  1410  0010DE  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  1411  0010E0  D7FA               	goto	u1235
  1412  0010E2  5006               	movf	??___fttol+1,w,c
  1413  0010E4  6E0A               	movwf	___fttol@sign1,c
  1414  0010E6  8E02               	bsf	___fttol@f1+1,7,c
  1415  0010E8  0EFF               	movlw	255
  1416  0010EA  1601               	andwf	___fttol@f1,f,c
  1417  0010EC  0EFF               	movlw	255
  1418  0010EE  1602               	andwf	___fttol@f1+1,f,c
  1419  0010F0  0E00               	movlw	0
  1420  0010F2  1603               	andwf	___fttol@f1+2,f,c
  1421  0010F4  5001               	movf	___fttol@f1,w,c
  1422  0010F6  6E0B               	movwf	___fttol@lval,c
  1423  0010F8  5002               	movf	___fttol@f1+1,w,c
  1424  0010FA  6E0C               	movwf	___fttol@lval+1,c
  1425  0010FC  5003               	movf	___fttol@f1+2,w,c
  1426  0010FE  6E0D               	movwf	___fttol@lval+2,c
  1427  001100  6A0E               	clrf	___fttol@lval+3,c
  1428  001102  0E8E               	movlw	142
  1429  001104  5E0F               	subwf	___fttol@exp1,f,c
  1430  001106  AE0F               	btfss	___fttol@exp1,7,c
  1431  001108  D016               	goto	l474
  1432  00110A  500F               	movf	___fttol@exp1,w,c
  1433  00110C  0A80               	xorlw	128
  1434  00110E  0F8F               	addlw	143
  1435  001110  B0D8               	btfsc	status,0,c
  1436  001112  D009               	goto	l475
  1437  001114  0E00               	movlw	0
  1438  001116  6E01               	movwf	?___fttol,c
  1439  001118  0E00               	movlw	0
  1440  00111A  6E02               	movwf	?___fttol+1,c
  1441  00111C  0E00               	movlw	0
  1442  00111E  6E03               	movwf	?___fttol+2,c
  1443  001120  0E00               	movlw	0
  1444  001122  6E04               	movwf	?___fttol+3,c
  1445  001124  0012               	return	
  1446  001126                     l475:
  1447  001126  90D8               	bcf	status,0,c
  1448  001128  320E               	rrcf	___fttol@lval+3,f,c
  1449  00112A  320D               	rrcf	___fttol@lval+2,f,c
  1450  00112C  320C               	rrcf	___fttol@lval+1,f,c
  1451  00112E  320B               	rrcf	___fttol@lval,f,c
  1452  001130  3E0F               	incfsz	___fttol@exp1,f,c
  1453  001132  D7F9               	goto	l475
  1454  001134  D015               	goto	u1270
  1455  001136                     l474:
  1456  001136  0E17               	movlw	23
  1457  001138  640F               	cpfsgt	___fttol@exp1,c
  1458  00113A  D00F               	goto	l480
  1459  00113C  0E00               	movlw	0
  1460  00113E  6E01               	movwf	?___fttol,c
  1461  001140  0E00               	movlw	0
  1462  001142  6E02               	movwf	?___fttol+1,c
  1463  001144  0E00               	movlw	0
  1464  001146  6E03               	movwf	?___fttol+2,c
  1465  001148  0E00               	movlw	0
  1466  00114A  6E04               	movwf	?___fttol+3,c
  1467  00114C  0012               	return	
  1468  00114E  90D8               	bcf	status,0,c
  1469  001150  360B               	rlcf	___fttol@lval,f,c
  1470  001152  360C               	rlcf	___fttol@lval+1,f,c
  1471  001154  360D               	rlcf	___fttol@lval+2,f,c
  1472  001156  360E               	rlcf	___fttol@lval+3,f,c
  1473  001158  060F               	decf	___fttol@exp1,f,c
  1474  00115A                     l480:
  1475  00115A  500F               	movf	___fttol@exp1,w,c
  1476  00115C  A4D8               	btfss	status,2,c
  1477  00115E  D7F7               	goto	l481
  1478  001160                     u1270:
  1479  001160  500A               	movf	___fttol@sign1,w,c
  1480  001162  B4D8               	btfsc	status,2,c
  1481  001164  D008               	goto	l483
  1482  001166  1E0E               	comf	___fttol@lval+3,f,c
  1483  001168  1E0D               	comf	___fttol@lval+2,f,c
  1484  00116A  1E0C               	comf	___fttol@lval+1,f,c
  1485  00116C  6C0B               	negf	___fttol@lval,c
  1486  00116E  0E00               	movlw	0
  1487  001170  220C               	addwfc	___fttol@lval+1,f,c
  1488  001172  220D               	addwfc	___fttol@lval+2,f,c
  1489  001174  220E               	addwfc	___fttol@lval+3,f,c
  1490  001176                     l483:
  1491  001176  C00B  F001         	movff	___fttol@lval,?___fttol
  1492  00117A  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  1493  00117E  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  1494  001182  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  1495  001186  0012               	return	
  1496  001188                     __end_of___fttol:
  1497                           	opt stack 0
  1498                           tblptru	equ	0xFF8
  1499                           wreg	equ	0xFE8
  1500                           indf2	equ	0xFDF
  1501                           postinc2	equ	0xFDE
  1502                           postdec2	equ	0xFDD
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function ___altoft *****************
  1508 ;; Defined at:
  1509 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  c               4   15[COMRAM] long 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  sign            1   24[COMRAM] unsigned char 
  1514 ;;  exp             1   23[COMRAM] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  3   15[COMRAM] float 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1524 ;;      Params:         4       0       0       0       0       0       0       0       0
  1525 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1526 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1527 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1528 ;;Total ram usage:       10 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    1
  1531 ;; This function calls:
  1532 ;;		___ftpack
  1533 ;; This function is called by:
  1534 ;;		_trunc
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text4
  1539  0014FE                     __ptext4:
  1540                           	opt stack 0
  1541  0014FE                     ___altoft:
  1542                           	opt stack 28
  1543                           
  1544                           ;incstack = 0
  1545  0014FE  0E00               	movlw	0
  1546  001500  6E19               	movwf	___altoft@sign,c
  1547  001502  0E8E               	movlw	142
  1548  001504  6E18               	movwf	___altoft@exp,c
  1549  001506  AE13               	btfss	___altoft@c+3,7,c
  1550  001508  D011               	goto	l242
  1551  00150A  1E13               	comf	___altoft@c+3,f,c
  1552  00150C  1E12               	comf	___altoft@c+2,f,c
  1553  00150E  1E11               	comf	___altoft@c+1,f,c
  1554  001510  6C10               	negf	___altoft@c,c
  1555  001512  0E00               	movlw	0
  1556  001514  2211               	addwfc	___altoft@c+1,f,c
  1557  001516  2212               	addwfc	___altoft@c+2,f,c
  1558  001518  2213               	addwfc	___altoft@c+3,f,c
  1559  00151A  0E01               	movlw	1
  1560  00151C  6E19               	movwf	___altoft@sign,c
  1561  00151E  D006               	goto	l242
  1562  001520  90D8               	bcf	status,0,c
  1563  001522  3213               	rrcf	___altoft@c+3,f,c
  1564  001524  3212               	rrcf	___altoft@c+2,f,c
  1565  001526  3211               	rrcf	___altoft@c+1,f,c
  1566  001528  3210               	rrcf	___altoft@c,f,c
  1567  00152A  2A18               	incf	___altoft@exp,f,c
  1568  00152C                     l242:
  1569  00152C  0E00               	movlw	0
  1570  00152E  1410               	andwf	___altoft@c,w,c
  1571  001530  6E14               	movwf	??___altoft& (0+255),c
  1572  001532  0E00               	movlw	0
  1573  001534  1411               	andwf	___altoft@c+1,w,c
  1574  001536  6E15               	movwf	(??___altoft+1)& (0+255),c
  1575  001538  0E00               	movlw	0
  1576  00153A  1412               	andwf	___altoft@c+2,w,c
  1577  00153C  6E16               	movwf	(??___altoft+2)& (0+255),c
  1578  00153E  0EFF               	movlw	255
  1579  001540  1413               	andwf	___altoft@c+3,w,c
  1580  001542  6E17               	movwf	(??___altoft+3)& (0+255),c
  1581  001544  5014               	movf	??___altoft,w,c
  1582  001546  1015               	iorwf	??___altoft+1,w,c
  1583  001548  1016               	iorwf	??___altoft+2,w,c
  1584  00154A  1017               	iorwf	??___altoft+3,w,c
  1585  00154C  A4D8               	btfss	status,2,c
  1586  00154E  D7E8               	goto	l243
  1587  001550  C010  F001         	movff	___altoft@c,___ftpack@arg
  1588  001554  C011  F002         	movff	___altoft@c+1,___ftpack@arg+1
  1589  001558  C012  F003         	movff	___altoft@c+2,___ftpack@arg+2
  1590  00155C  C018  F004         	movff	___altoft@exp,___ftpack@exp
  1591  001560  C019  F005         	movff	___altoft@sign,___ftpack@sign
  1592  001564  ECA4  F009         	call	___ftpack	;wreg free
  1593  001568  C001  F010         	movff	?___ftpack,?___altoft
  1594  00156C  C002  F011         	movff	?___ftpack+1,?___altoft+1
  1595  001570  C003  F012         	movff	?___ftpack+2,?___altoft+2
  1596  001574  0012               	return	
  1597  001576                     __end_of___altoft:
  1598                           	opt stack 0
  1599                           tblptru	equ	0xFF8
  1600                           wreg	equ	0xFE8
  1601                           indf2	equ	0xFDF
  1602                           postinc2	equ	0xFDE
  1603                           postdec2	equ	0xFDD
  1604                           fsr2h	equ	0xFDA
  1605                           fsr2l	equ	0xFD9
  1606                           status	equ	0xFD8
  1607                           
  1608 ;; *************** function _stopcheck *****************
  1609 ;; Defined at:
  1610 ;;		line 17 in file "main.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      unsigned char 
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1624 ;;      Params:         0       0       0       0       0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    1
  1631 ;; This function calls:
  1632 ;;		_UART_Data_Ready
  1633 ;;		_UART_Read
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text5
  1640  0016EA                     __ptext5:
  1641                           	opt stack 0
  1642  0016EA                     _stopcheck:
  1643                           	opt stack 29
  1644                           
  1645                           ;main.c: 18: if (UART_Data_Ready()) {
  1646                           
  1647                           ;incstack = 0
  1648  0016EA  EC96  F00B         	call	_UART_Data_Ready	;wreg free
  1649  0016EE  0900               	iorlw	0
  1650  0016F0  B4D8               	btfsc	status,2,c
  1651  0016F2  D009               	goto	l80
  1652                           
  1653                           ;main.c: 19: if (UART_Read() == 's') {
  1654  0016F4  EC92  F00B         	call	_UART_Read	;wreg free
  1655  0016F8  0A73               	xorlw	115
  1656  0016FA  A4D8               	btfss	status,2,c
  1657  0016FC  D002               	goto	l78
  1658                           
  1659                           ;main.c: 20: return 1;
  1660  0016FE  0E01               	movlw	1
  1661  001700  0012               	return	
  1662  001702                     l78:
  1663  001702  0E00               	movlw	0
  1664  001704  0012               	return	
  1665  001706                     l80:
  1666                           
  1667                           ;main.c: 22: }
  1668                           ;main.c: 23: return 0;
  1669  001706  0E00               	movlw	0
  1670  001708  0012               	return	
  1671  00170A                     __end_of_stopcheck:
  1672                           	opt stack 0
  1673                           tblptru	equ	0xFF8
  1674                           wreg	equ	0xFE8
  1675                           indf2	equ	0xFDF
  1676                           postinc2	equ	0xFDE
  1677                           postdec2	equ	0xFDD
  1678                           fsr2h	equ	0xFDA
  1679                           fsr2l	equ	0xFD9
  1680                           status	equ	0xFD8
  1681                           
  1682 ;; *************** function _UART_Read *****************
  1683 ;; Defined at:
  1684 ;;		line 40 in file "UART.h"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;		None
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;		None
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      unsigned char 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1698 ;;      Params:         0       0       0       0       0       0       0       0       0
  1699 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1701 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1702 ;;Total ram usage:        0 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; This function calls:
  1705 ;;		Nothing
  1706 ;; This function is called by:
  1707 ;;		_stopcheck
  1708 ;;		_main
  1709 ;;		_UART_Read_Text
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text6
  1714  001724                     __ptext6:
  1715                           	opt stack 0
  1716  001724                     _UART_Read:
  1717                           	opt stack 29
  1718                           
  1719                           ;UART.h: 41: while (!RCIF);
  1720                           
  1721                           ;incstack = 0
  1722  001724  AA9E               	btfss	3998,5,c	;volatile
  1723  001726  D7FE               	goto	_UART_Read
  1724                           
  1725                           ;UART.h: 42: return RCREG;
  1726  001728  50AE               	movf	4014,w,c	;volatile
  1727  00172A  0012               	return	
  1728  00172C                     __end_of_UART_Read:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           wreg	equ	0xFE8
  1732                           indf2	equ	0xFDF
  1733                           postinc2	equ	0xFDE
  1734                           postdec2	equ	0xFDD
  1735                           fsr2h	equ	0xFDA
  1736                           fsr2l	equ	0xFD9
  1737                           status	equ	0xFD8
  1738                           
  1739 ;; *************** function _UART_Data_Ready *****************
  1740 ;; Defined at:
  1741 ;;		line 36 in file "UART.h"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      unsigned char 
  1748 ;; Registers used:
  1749 ;;		wreg
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1755 ;;      Params:         0       0       0       0       0       0       0       0       0
  1756 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1757 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1758 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1759 ;;Total ram usage:        0 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		_stopcheck
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text7
  1770  00172C                     __ptext7:
  1771                           	opt stack 0
  1772  00172C                     _UART_Data_Ready:
  1773                           	opt stack 29
  1774                           
  1775                           ;UART.h: 37: return RCIF;
  1776                           
  1777                           ;incstack = 0
  1778  00172C  0E00               	movlw	0
  1779  00172E  BA9E               	btfsc	3998,5,c	;volatile
  1780  001730  0E01               	movlw	1
  1781  001732  0012               	return	
  1782  001734                     __end_of_UART_Data_Ready:
  1783                           	opt stack 0
  1784                           tblptru	equ	0xFF8
  1785                           wreg	equ	0xFE8
  1786                           indf2	equ	0xFDF
  1787                           postinc2	equ	0xFDE
  1788                           postdec2	equ	0xFDD
  1789                           fsr2h	equ	0xFDA
  1790                           fsr2l	equ	0xFD9
  1791                           status	equ	0xFD8
  1792                           
  1793 ;; *************** function _step *****************
  1794 ;; Defined at:
  1795 ;;		line 10 in file "main.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;		None
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      void 
  1802 ;; Registers used:
  1803 ;;		wreg
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1809 ;;      Params:         0       0       0       0       0       0       0       0       0
  1810 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1811 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1812 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1813 ;;Total ram usage:        1 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; This function calls:
  1816 ;;		Nothing
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text8
  1823  00169E                     __ptext8:
  1824                           	opt stack 0
  1825  00169E                     _step:
  1826                           	opt stack 30
  1827                           
  1828                           ;main.c: 11: PORTDbits.RD1 = 1;
  1829                           
  1830                           ;incstack = 0
  1831  00169E  8283               	bsf	3971,1,c	;volatile
  1832                           
  1833                           ;main.c: 12: _delay((unsigned long)((1200)*(8000000/4000000.0)));
  1834  0016A0  0E04               	movlw	4
  1835  0016A2  6E01               	movwf	??_step& (0+255),c
  1836  0016A4  0E1C               	movlw	28
  1837  0016A6                     u2057:
  1838  0016A6  2EE8               	decfsz	wreg,f,c
  1839  0016A8  D7FE               	bra	u2057
  1840  0016AA  2E01               	decfsz	??_step& (0+255),f,c
  1841  0016AC  D7FC               	bra	u2057
  1842  0016AE  D000               	nop2	
  1843                           
  1844                           ;main.c: 13: PORTDbits.RD1 = 0;
  1845  0016B0  9283               	bcf	3971,1,c	;volatile
  1846                           
  1847                           ;main.c: 14: _delay((unsigned long)((1200)*(8000000/4000000.0)));
  1848  0016B2  0E04               	movlw	4
  1849  0016B4  6E01               	movwf	??_step& (0+255),c
  1850  0016B6  0E1C               	movlw	28
  1851  0016B8                     u2067:
  1852  0016B8  2EE8               	decfsz	wreg,f,c
  1853  0016BA  D7FE               	bra	u2067
  1854  0016BC  2E01               	decfsz	??_step& (0+255),f,c
  1855  0016BE  D7FC               	bra	u2067
  1856  0016C0  D000               	nop2	
  1857  0016C2  0012               	return		;funcret
  1858  0016C4                     __end_of_step:
  1859                           	opt stack 0
  1860                           tblptru	equ	0xFF8
  1861                           wreg	equ	0xFE8
  1862                           indf2	equ	0xFDF
  1863                           postinc2	equ	0xFDE
  1864                           postdec2	equ	0xFDD
  1865                           fsr2h	equ	0xFDA
  1866                           fsr2l	equ	0xFD9
  1867                           status	equ	0xFD8
  1868                           
  1869 ;; *************** function _sprintf *****************
  1870 ;; Defined at:
  1871 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  sp              2   15[COMRAM] PTR unsigned char 
  1874 ;;		 -> main@stepx(10), 
  1875 ;;  f               2   17[COMRAM] PTR const unsigned char 
  1876 ;;		 -> STR_1(3), 
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;  tmpval          4    0        struct .
  1879 ;;  cp              3    0        PTR const unsigned char 
  1880 ;;  val             2   26[COMRAM] unsigned int 
  1881 ;;  ap              2   22[COMRAM] PTR void [1]
  1882 ;;		 -> ?_sprintf(2), 
  1883 ;;  len             2    0        unsigned int 
  1884 ;;  c               1   28[COMRAM] char 
  1885 ;;  prec            1   25[COMRAM] char 
  1886 ;;  flag            1   24[COMRAM] unsigned char 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  2   15[COMRAM] int 
  1889 ;; Registers used:
  1890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1896 ;;      Params:         6       0       0       0       0       0       0       0       0
  1897 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1898 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1899 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1900 ;;Total ram usage:       14 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; Hardware stack levels required when called:    1
  1903 ;; This function calls:
  1904 ;;		___lwdiv
  1905 ;;		___lwmod
  1906 ;; This function is called by:
  1907 ;;		_main
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text9
  1912  000E20                     __ptext9:
  1913                           	opt stack 0
  1914  000E20                     _sprintf:
  1915                           	opt stack 29
  1916                           
  1917                           ;doprnt.c: 494: va_list ap;
  1918                           ;doprnt.c: 499: signed char c;
  1919                           ;doprnt.c: 506: signed char prec;
  1920                           ;doprnt.c: 508: unsigned char flag;
  1921                           ;doprnt.c: 523: union {
  1922                           ;doprnt.c: 524: unsigned long vd;
  1923                           ;doprnt.c: 525: double integ;
  1924                           ;doprnt.c: 526: } tmpval;
  1925                           ;doprnt.c: 528: unsigned int val;
  1926                           ;doprnt.c: 529: unsigned len;
  1927                           ;doprnt.c: 530: const char * cp;
  1928                           ;doprnt.c: 533: *ap = __va_start();
  1929                           
  1930                           ;incstack = 0
  1931  000E20  0E14               	movlw	low (?_sprintf+4)
  1932  000E22  6E17               	movwf	sprintf@ap,c
  1933  000E24  0E00               	movlw	high (?_sprintf+4)
  1934  000E26  6E18               	movwf	sprintf@ap+1,c
  1935                           
  1936                           ;doprnt.c: 536: while(c = *f++) {
  1937  000E28  D08C               	goto	u1510
  1938  000E2A                     
  1939                           ;doprnt.c: 538: if(c != '%')
  1940  000E2A  0E25               	movlw	37
  1941  000E2C  181D               	xorwf	sprintf@c,w,c
  1942  000E2E  B4D8               	btfsc	status,2,c
  1943  000E30  D009               	goto	l140
  1944                           
  1945                           ;doprnt.c: 540: {
  1946                           ;doprnt.c: 541: ((*sp++ = (c)));
  1947  000E32  C010  FFD9         	movff	sprintf@sp,fsr2l
  1948  000E36  C011  FFDA         	movff	sprintf@sp+1,fsr2h
  1949  000E3A  C01D  FFDF         	movff	sprintf@c,indf2
  1950  000E3E  4A10               	infsnz	sprintf@sp,f,c
  1951  000E40  2A11               	incf	sprintf@sp+1,f,c
  1952                           
  1953                           ;doprnt.c: 542: continue;
  1954  000E42  D07F               	goto	u1510
  1955  000E44                     l140:
  1956                           
  1957                           ;doprnt.c: 543: }
  1958                           ;doprnt.c: 548: flag = 0;
  1959  000E44  0E00               	movlw	0
  1960  000E46  6E19               	movwf	sprintf@flag,c
  1961                           
  1962                           ;doprnt.c: 822: }
  1963                           
  1964                           ;doprnt.c: 813: continue;
  1965                           
  1966                           ;doprnt.c: 802: default:
  1967                           
  1968                           ;doprnt.c: 698: case 'i':
  1969                           ;doprnt.c: 699: break;
  1970                           
  1971                           ;doprnt.c: 697: case 'd':
  1972                           
  1973                           ;doprnt.c: 638: goto alldone;
  1974                           
  1975                           ;doprnt.c: 637: case 0:
  1976                           
  1977                           ;doprnt.c: 635: switch(c = *f++) {
  1978  000E48  C012  FFF6         	movff	sprintf@f,tblptrl
  1979  000E4C  C013  FFF7         	movff	sprintf@f+1,tblptrh
  1980  000E50  4A12               	infsnz	sprintf@f,f,c
  1981  000E52  2A13               	incf	sprintf@f+1,f,c
  1982  000E54                     	if	0	;tblptru may be non-zero
  1983  000E54                     	endif
  1984  000E54                     	if	0	;tblptru may be non-zero
  1985  000E54                     	endif
  1986  000E54  0008               	tblrd		*
  1987  000E56  CFF5 F01D          	movff	tablat,sprintf@c
  1988  000E5A  501D               	movf	sprintf@c,w,c
  1989                           
  1990                           ; Switch size 1, requested type "space"
  1991                           ; Number of cases is 3, Range of values is 0 to 105
  1992                           ; switch strategies available:
  1993                           ; Name         Instructions Cycles
  1994                           ; simple_byte           10     6 (average)
  1995                           ;	Chosen strategy is simple_byte
  1996  000E5C  0A00               	xorlw	0	; case 0
  1997  000E5E  B4D8               	btfsc	status,2,c
  1998  000E60  D07C               	goto	u1520
  1999  000E62  0A64               	xorlw	100	; case 100
  2000  000E64  B4D8               	btfsc	status,2,c
  2001  000E66  D003               	goto	l146
  2002  000E68  0A0D               	xorlw	13	; case 105
  2003  000E6A  A4D8               	btfss	status,2,c
  2004  000E6C  D06A               	goto	u1510
  2005  000E6E                     l146:
  2006                           
  2007                           ;doprnt.c: 1253: {
  2008                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2009  000E6E  C017  FFD9         	movff	sprintf@ap,fsr2l
  2010  000E72  C018  FFDA         	movff	sprintf@ap+1,fsr2h
  2011  000E76  CFDE F01B          	movff	postinc2,sprintf@val
  2012  000E7A  CFDD F01C          	movff	postdec2,sprintf@val+1
  2013  000E7E  0E02               	movlw	2
  2014  000E80  2617               	addwf	sprintf@ap,f,c
  2015  000E82  0E00               	movlw	0
  2016  000E84  2218               	addwfc	sprintf@ap+1,f,c
  2017                           
  2018                           ;doprnt.c: 1261: if((int)val < 0) {
  2019  000E86  AE1C               	btfss	sprintf@val+1,7,c
  2020  000E88  D006               	goto	l148
  2021                           
  2022                           ;doprnt.c: 1262: flag |= 0x03;
  2023  000E8A  0E03               	movlw	3
  2024  000E8C  1219               	iorwf	sprintf@flag,f,c
  2025                           
  2026                           ;doprnt.c: 1263: val = -val;
  2027  000E8E  6C1B               	negf	sprintf@val,c
  2028  000E90  1E1C               	comf	sprintf@val+1,f,c
  2029  000E92  B0D8               	btfsc	status,0,c
  2030  000E94  2A1C               	incf	sprintf@val+1,f,c
  2031  000E96                     l148:
  2032                           
  2033                           ;doprnt.c: 1264: }
  2034                           ;doprnt.c: 1266: }
  2035                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2036  000E96  0E01               	movlw	1
  2037  000E98  6E1D               	movwf	sprintf@c,c
  2038  000E9A                     l1712:
  2039  000E9A  0E05               	movlw	5
  2040  000E9C  181D               	xorwf	sprintf@c,w,c
  2041  000E9E  B4D8               	btfsc	status,2,c
  2042  000EA0  D012               	goto	u1490
  2043                           
  2044                           ;doprnt.c: 1306: if(val < dpowers[c])
  2045  000EA2  501D               	movf	sprintf@c,w,c
  2046  000EA4  0D02               	mullw	2
  2047  000EA6  0E01               	movlw	low _dpowers
  2048  000EA8  24F3               	addwf	prodl,w,c
  2049  000EAA  6EF6               	movwf	tblptrl,c
  2050  000EAC  0E08               	movlw	high _dpowers
  2051  000EAE  20F4               	addwfc	prodh,w,c
  2052  000EB0  6EF7               	movwf	tblptrh,c
  2053  000EB2                     	if	0	;There are less than 3 active tblptr bytes
  2054  000EB2                     	endif
  2055  000EB2  0009               	tblrd		*+
  2056  000EB4  50F5               	movf	tablat,w,c
  2057  000EB6  5C1B               	subwf	sprintf@val,w,c
  2058  000EB8  0009               	tblrd		*+
  2059  000EBA  50F5               	movf	tablat,w,c
  2060  000EBC  581C               	subwfb	sprintf@val+1,w,c
  2061  000EBE  A0D8               	btfss	status,0,c
  2062  000EC0  D002               	goto	u1490
  2063                           
  2064                           ;doprnt.c: 1307: break;
  2065  000EC2  2A1D               	incf	sprintf@c,f,c
  2066  000EC4  D7EA               	goto	l1712
  2067  000EC6                     u1490:
  2068                           
  2069                           ;doprnt.c: 1422: {
  2070                           ;doprnt.c: 1438: if(flag & 0x03)
  2071  000EC6  C019  F016         	movff	sprintf@flag,??_sprintf
  2072  000ECA  0E03               	movlw	3
  2073  000ECC  1616               	andwf	??_sprintf,f,c
  2074  000ECE  B4D8               	btfsc	status,2,c
  2075  000ED0  D008               	goto	l152
  2076                           
  2077                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2078  000ED2  C010  FFD9         	movff	sprintf@sp,fsr2l
  2079  000ED6  C011  FFDA         	movff	sprintf@sp+1,fsr2h
  2080  000EDA  0E2D               	movlw	45
  2081  000EDC  6EDF               	movwf	indf2,c
  2082  000EDE  4A10               	infsnz	sprintf@sp,f,c
  2083  000EE0  2A11               	incf	sprintf@sp+1,f,c
  2084  000EE2                     l152:
  2085                           
  2086                           ;doprnt.c: 1469: }
  2087                           ;doprnt.c: 1472: prec = c;
  2088  000EE2  C01D  F01A         	movff	sprintf@c,sprintf@prec
  2089                           
  2090                           ;doprnt.c: 1474: while(prec--) {
  2091  000EE6  D029               	goto	l153
  2092  000EE8                     
  2093                           ;doprnt.c: 1478: {
  2094                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2095  000EE8  501A               	movf	sprintf@prec,w,c
  2096  000EEA  0D02               	mullw	2
  2097  000EEC  0E01               	movlw	low _dpowers
  2098  000EEE  24F3               	addwf	prodl,w,c
  2099  000EF0  6EF6               	movwf	tblptrl,c
  2100  000EF2  0E08               	movlw	high _dpowers
  2101  000EF4  20F4               	addwfc	prodh,w,c
  2102  000EF6  6EF7               	movwf	tblptrh,c
  2103  000EF8                     	if	0	;There are less than 3 active tblptr bytes
  2104  000EF8                     	endif
  2105  000EF8  0009               	tblrd		*+
  2106  000EFA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2107  000EFE  000A               	tblrd		*-
  2108  000F00  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2109  000F04  C01B  F001         	movff	sprintf@val,___lwdiv@dividend
  2110  000F08  C01C  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2111  000F0C  ECE9  F00A         	call	___lwdiv	;wreg free
  2112  000F10  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2113  000F14  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2114  000F18  0E00               	movlw	0
  2115  000F1A  6E0B               	movwf	___lwmod@divisor+1,c
  2116  000F1C  0E0A               	movlw	10
  2117  000F1E  6E0A               	movwf	___lwmod@divisor,c
  2118  000F20  EC12  F00B         	call	___lwmod	;wreg free
  2119  000F24  5008               	movf	?___lwmod,w,c
  2120  000F26  0F30               	addlw	48
  2121  000F28  6E1D               	movwf	sprintf@c,c
  2122                           
  2123                           ;doprnt.c: 1523: }
  2124                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2125  000F2A  C010  FFD9         	movff	sprintf@sp,fsr2l
  2126  000F2E  C011  FFDA         	movff	sprintf@sp+1,fsr2h
  2127  000F32  C01D  FFDF         	movff	sprintf@c,indf2
  2128  000F36  4A10               	infsnz	sprintf@sp,f,c
  2129  000F38  2A11               	incf	sprintf@sp+1,f,c
  2130  000F3A                     l153:
  2131  000F3A  061A               	decf	sprintf@prec,f,c
  2132  000F3C  281A               	incf	sprintf@prec,w,c
  2133  000F3E  A4D8               	btfss	status,2,c
  2134  000F40  D7D3               	goto	l154
  2135  000F42                     u1510:
  2136  000F42  C012  FFF6         	movff	sprintf@f,tblptrl
  2137  000F46  C013  FFF7         	movff	sprintf@f+1,tblptrh
  2138  000F4A  4A12               	infsnz	sprintf@f,f,c
  2139  000F4C  2A13               	incf	sprintf@f+1,f,c
  2140  000F4E                     	if	0	;tblptru may be non-zero
  2141  000F4E                     	endif
  2142  000F4E                     	if	0	;tblptru may be non-zero
  2143  000F4E                     	endif
  2144  000F4E  0008               	tblrd		*
  2145  000F50  CFF5 F01D          	movff	tablat,sprintf@c
  2146  000F54  501D               	movf	sprintf@c,w,c
  2147  000F56  A4D8               	btfss	status,2,c
  2148  000F58  D768               	goto	l139
  2149  000F5A                     u1520:
  2150                           
  2151                           ;doprnt.c: 1538: *sp = 0;
  2152                           
  2153                           ;doprnt.c: 1525: }
  2154                           ;doprnt.c: 1533: }
  2155                           ;doprnt.c: 1535: alldone:
  2156  000F5A  C010  FFD9         	movff	sprintf@sp,fsr2l
  2157  000F5E  C011  FFDA         	movff	sprintf@sp+1,fsr2h
  2158  000F62  0E00               	movlw	0
  2159  000F64  6EDF               	movwf	indf2,c
  2160  000F66  0012               	return	
  2161  000F68                     __end_of_sprintf:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           prodh	equ	0xFF4
  2168                           prodl	equ	0xFF3
  2169                           wreg	equ	0xFE8
  2170                           indf2	equ	0xFDF
  2171                           postinc2	equ	0xFDE
  2172                           postdec2	equ	0xFDD
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function ___lwmod *****************
  2178 ;; Defined at:
  2179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;  dividend        2    7[COMRAM] unsigned int 
  2182 ;;  divisor         2    9[COMRAM] unsigned int 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  counter         1   11[COMRAM] unsigned char 
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  2    7[COMRAM] unsigned int 
  2187 ;; Registers used:
  2188 ;;		wreg, status,2, status,0
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2194 ;;      Params:         4       0       0       0       0       0       0       0       0
  2195 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2197 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2198 ;;Total ram usage:        5 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_sprintf
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text10
  2208  001624                     __ptext10:
  2209                           	opt stack 0
  2210  001624                     ___lwmod:
  2211                           	opt stack 29
  2212                           
  2213                           ;incstack = 0
  2214  001624  500A               	movf	___lwmod@divisor,w,c
  2215  001626  100B               	iorwf	___lwmod@divisor+1,w,c
  2216  001628  B4D8               	btfsc	status,2,c
  2217  00162A  D018               	goto	l576
  2218  00162C  0E01               	movlw	1
  2219  00162E  6E0C               	movwf	___lwmod@counter,c
  2220  001630  D004               	goto	l571
  2221  001632  90D8               	bcf	status,0,c
  2222  001634  360A               	rlcf	___lwmod@divisor,f,c
  2223  001636  360B               	rlcf	___lwmod@divisor+1,f,c
  2224  001638  2A0C               	incf	___lwmod@counter,f,c
  2225  00163A                     l571:
  2226  00163A  AE0B               	btfss	___lwmod@divisor+1,7,c
  2227  00163C  D7FA               	goto	l572
  2228  00163E                     u1330:
  2229  00163E  500A               	movf	___lwmod@divisor,w,c
  2230  001640  5C08               	subwf	___lwmod@dividend,w,c
  2231  001642  500B               	movf	___lwmod@divisor+1,w,c
  2232  001644  5809               	subwfb	___lwmod@dividend+1,w,c
  2233  001646  A0D8               	btfss	status,0,c
  2234  001648  D004               	goto	l575
  2235  00164A  500A               	movf	___lwmod@divisor,w,c
  2236  00164C  5E08               	subwf	___lwmod@dividend,f,c
  2237  00164E  500B               	movf	___lwmod@divisor+1,w,c
  2238  001650  5A09               	subwfb	___lwmod@dividend+1,f,c
  2239  001652                     l575:
  2240  001652  90D8               	bcf	status,0,c
  2241  001654  320B               	rrcf	___lwmod@divisor+1,f,c
  2242  001656  320A               	rrcf	___lwmod@divisor,f,c
  2243  001658  2E0C               	decfsz	___lwmod@counter,f,c
  2244  00165A  D7F1               	goto	u1330
  2245  00165C                     l576:
  2246  00165C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2247  001660  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2248  001664  0012               	return		;funcret
  2249  001666                     __end_of___lwmod:
  2250                           	opt stack 0
  2251                           tblptru	equ	0xFF8
  2252                           tblptrh	equ	0xFF7
  2253                           tblptrl	equ	0xFF6
  2254                           tablat	equ	0xFF5
  2255                           prodh	equ	0xFF4
  2256                           prodl	equ	0xFF3
  2257                           wreg	equ	0xFE8
  2258                           indf2	equ	0xFDF
  2259                           postinc2	equ	0xFDE
  2260                           postdec2	equ	0xFDD
  2261                           fsr2h	equ	0xFDA
  2262                           fsr2l	equ	0xFD9
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function ___lwdiv *****************
  2266 ;; Defined at:
  2267 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  dividend        2    0[COMRAM] unsigned int 
  2270 ;;  divisor         2    2[COMRAM] unsigned int 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  quotient        2    4[COMRAM] unsigned int 
  2273 ;;  counter         1    6[COMRAM] unsigned char 
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  2    0[COMRAM] unsigned int 
  2276 ;; Registers used:
  2277 ;;		wreg, status,2, status,0
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2283 ;;      Params:         4       0       0       0       0       0       0       0       0
  2284 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2286 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2287 ;;Total ram usage:        7 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_sprintf
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text11
  2297  0015D2                     __ptext11:
  2298                           	opt stack 0
  2299  0015D2                     ___lwdiv:
  2300                           	opt stack 29
  2301                           
  2302                           ;incstack = 0
  2303  0015D2  0E00               	movlw	0
  2304  0015D4  6E06               	movwf	___lwdiv@quotient+1,c
  2305  0015D6  0E00               	movlw	0
  2306  0015D8  6E05               	movwf	___lwdiv@quotient,c
  2307  0015DA  5003               	movf	___lwdiv@divisor,w,c
  2308  0015DC  1004               	iorwf	___lwdiv@divisor+1,w,c
  2309  0015DE  B4D8               	btfsc	status,2,c
  2310  0015E0  D01C               	goto	l566
  2311  0015E2  0E01               	movlw	1
  2312  0015E4  6E07               	movwf	___lwdiv@counter,c
  2313  0015E6  D004               	goto	l561
  2314  0015E8  90D8               	bcf	status,0,c
  2315  0015EA  3603               	rlcf	___lwdiv@divisor,f,c
  2316  0015EC  3604               	rlcf	___lwdiv@divisor+1,f,c
  2317  0015EE  2A07               	incf	___lwdiv@counter,f,c
  2318  0015F0                     l561:
  2319  0015F0  AE04               	btfss	___lwdiv@divisor+1,7,c
  2320  0015F2  D7FA               	goto	l562
  2321  0015F4                     u1300:
  2322  0015F4  90D8               	bcf	status,0,c
  2323  0015F6  3605               	rlcf	___lwdiv@quotient,f,c
  2324  0015F8  3606               	rlcf	___lwdiv@quotient+1,f,c
  2325  0015FA  5003               	movf	___lwdiv@divisor,w,c
  2326  0015FC  5C01               	subwf	___lwdiv@dividend,w,c
  2327  0015FE  5004               	movf	___lwdiv@divisor+1,w,c
  2328  001600  5802               	subwfb	___lwdiv@dividend+1,w,c
  2329  001602  A0D8               	btfss	status,0,c
  2330  001604  D005               	goto	l565
  2331  001606  5003               	movf	___lwdiv@divisor,w,c
  2332  001608  5E01               	subwf	___lwdiv@dividend,f,c
  2333  00160A  5004               	movf	___lwdiv@divisor+1,w,c
  2334  00160C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2335  00160E  8005               	bsf	___lwdiv@quotient,0,c
  2336  001610                     l565:
  2337  001610  90D8               	bcf	status,0,c
  2338  001612  3204               	rrcf	___lwdiv@divisor+1,f,c
  2339  001614  3203               	rrcf	___lwdiv@divisor,f,c
  2340  001616  2E07               	decfsz	___lwdiv@counter,f,c
  2341  001618  D7ED               	goto	u1300
  2342  00161A                     l566:
  2343  00161A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2344  00161E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2345  001622  0012               	return		;funcret
  2346  001624                     __end_of___lwdiv:
  2347                           	opt stack 0
  2348                           tblptru	equ	0xFF8
  2349                           tblptrh	equ	0xFF7
  2350                           tblptrl	equ	0xFF6
  2351                           tablat	equ	0xFF5
  2352                           prodh	equ	0xFF4
  2353                           prodl	equ	0xFF3
  2354                           wreg	equ	0xFE8
  2355                           indf2	equ	0xFDF
  2356                           postinc2	equ	0xFDE
  2357                           postdec2	equ	0xFDD
  2358                           fsr2h	equ	0xFDA
  2359                           fsr2l	equ	0xFD9
  2360                           status	equ	0xFD8
  2361                           
  2362 ;; *************** function ___wmul *****************
  2363 ;; Defined at:
  2364 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  multiplier      2    0[COMRAM] unsigned int 
  2367 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  product         2    4[COMRAM] unsigned int 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  2    0[COMRAM] unsigned int 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0, prodl, prodh
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2379 ;;      Params:         4       0       0       0       0       0       0       0       0
  2380 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2382 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2383 ;;Total ram usage:        6 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; This function calls:
  2386 ;;		Nothing
  2387 ;; This function is called by:
  2388 ;;		_main
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           	psect	text12
  2393  0016C4                     __ptext12:
  2394                           	opt stack 0
  2395  0016C4                     ___wmul:
  2396                           	opt stack 30
  2397                           
  2398                           ;incstack = 0
  2399  0016C4  5001               	movf	___wmul@multiplier,w,c
  2400  0016C6  0203               	mulwf	___wmul@multiplicand,c
  2401  0016C8  CFF3 F005          	movff	prodl,___wmul@product
  2402  0016CC  CFF4 F006          	movff	prodh,___wmul@product+1
  2403  0016D0  5001               	movf	___wmul@multiplier,w,c
  2404  0016D2  0204               	mulwf	___wmul@multiplicand+1,c
  2405  0016D4  50F3               	movf	prodl,w,c
  2406  0016D6  2606               	addwf	___wmul@product+1,f,c
  2407  0016D8  5002               	movf	___wmul@multiplier+1,w,c
  2408  0016DA  0203               	mulwf	___wmul@multiplicand,c
  2409  0016DC  50F3               	movf	prodl,w,c
  2410  0016DE  2606               	addwf	___wmul@product+1,f,c
  2411  0016E0  C005  F001         	movff	___wmul@product,?___wmul
  2412  0016E4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2413  0016E8  0012               	return	
  2414  0016EA                     __end_of___wmul:
  2415                           	opt stack 0
  2416                           tblptru	equ	0xFF8
  2417                           tblptrh	equ	0xFF7
  2418                           tblptrl	equ	0xFF6
  2419                           tablat	equ	0xFF5
  2420                           prodh	equ	0xFF4
  2421                           prodl	equ	0xFF3
  2422                           wreg	equ	0xFE8
  2423                           indf2	equ	0xFDF
  2424                           postinc2	equ	0xFDE
  2425                           postdec2	equ	0xFDD
  2426                           fsr2h	equ	0xFDA
  2427                           fsr2l	equ	0xFD9
  2428                           status	equ	0xFD8
  2429                           
  2430 ;; *************** function ___ftmul *****************
  2431 ;; Defined at:
  2432 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  f1              3    8[COMRAM] float 
  2435 ;;  f2              3   11[COMRAM] float 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  2438 ;;  sign            1   22[COMRAM] unsigned char 
  2439 ;;  cntr            1   21[COMRAM] unsigned char 
  2440 ;;  exp             1   17[COMRAM] unsigned char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  3    8[COMRAM] float 
  2443 ;; Registers used:
  2444 ;;		wreg, status,2, status,0, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2450 ;;      Params:         6       0       0       0       0       0       0       0       0
  2451 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2452 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2453 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2454 ;;Total ram usage:       15 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    1
  2457 ;; This function calls:
  2458 ;;		___ftpack
  2459 ;; This function is called by:
  2460 ;;		_main
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text13
  2465  001188                     __ptext13:
  2466                           	opt stack 0
  2467  001188                     ___ftmul:
  2468                           	opt stack 29
  2469                           
  2470                           ;incstack = 0
  2471  001188  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  2472  00118C  6A10               	clrf	(??___ftmul+1)& (0+255),c
  2473  00118E  6A11               	clrf	(??___ftmul+2)& (0+255),c
  2474  001190  340A               	rlcf	___ftmul@f1+1,w,c
  2475  001192  360F               	rlcf	??___ftmul& (0+255),f,c
  2476  001194  E301               	bnc	u1741
  2477  001196  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  2478  001198                     u1741:
  2479  001198  500F               	movf	??___ftmul,w,c
  2480  00119A  6E12               	movwf	___ftmul@exp,c
  2481  00119C  5012               	movf	___ftmul@exp,w,c
  2482  00119E  A4D8               	btfss	status,2,c
  2483  0011A0  D007               	goto	l451
  2484  0011A2  0E00               	movlw	0
  2485  0011A4  6E09               	movwf	?___ftmul,c
  2486  0011A6  0E00               	movlw	0
  2487  0011A8  6E0A               	movwf	?___ftmul+1,c
  2488  0011AA  0E00               	movlw	0
  2489  0011AC  6E0B               	movwf	?___ftmul+2,c
  2490  0011AE  0012               	return	
  2491  0011B0                     l451:
  2492  0011B0  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  2493  0011B4  6A10               	clrf	(??___ftmul+1)& (0+255),c
  2494  0011B6  6A11               	clrf	(??___ftmul+2)& (0+255),c
  2495  0011B8  340D               	rlcf	___ftmul@f2+1,w,c
  2496  0011BA  360F               	rlcf	??___ftmul& (0+255),f,c
  2497  0011BC  E301               	bnc	u1761
  2498  0011BE  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  2499  0011C0                     u1761:
  2500  0011C0  500F               	movf	??___ftmul,w,c
  2501  0011C2  6E17               	movwf	___ftmul@sign,c
  2502  0011C4  5017               	movf	___ftmul@sign,w,c
  2503  0011C6  A4D8               	btfss	status,2,c
  2504  0011C8  D007               	goto	l453
  2505  0011CA  0E00               	movlw	0
  2506  0011CC  6E09               	movwf	?___ftmul,c
  2507  0011CE  0E00               	movlw	0
  2508  0011D0  6E0A               	movwf	?___ftmul+1,c
  2509  0011D2  0E00               	movlw	0
  2510  0011D4  6E0B               	movwf	?___ftmul+2,c
  2511  0011D6  0012               	return	
  2512  0011D8                     l453:
  2513  0011D8  5017               	movf	___ftmul@sign,w,c
  2514  0011DA  0F7B               	addlw	123
  2515  0011DC  2612               	addwf	___ftmul@exp,f,c
  2516  0011DE  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  2517  0011E2  500E               	movf	___ftmul@f2+2,w,c
  2518  0011E4  1A17               	xorwf	___ftmul@sign,f,c
  2519  0011E6  0E80               	movlw	128
  2520  0011E8  1617               	andwf	___ftmul@sign,f,c
  2521  0011EA  8E0A               	bsf	___ftmul@f1+1,7,c
  2522  0011EC  8E0D               	bsf	___ftmul@f2+1,7,c
  2523  0011EE  0EFF               	movlw	255
  2524  0011F0  160C               	andwf	___ftmul@f2,f,c
  2525  0011F2  0EFF               	movlw	255
  2526  0011F4  160D               	andwf	___ftmul@f2+1,f,c
  2527  0011F6  0E00               	movlw	0
  2528  0011F8  160E               	andwf	___ftmul@f2+2,f,c
  2529  0011FA  0E00               	movlw	0
  2530  0011FC  6E13               	movwf	___ftmul@f3_as_product,c
  2531  0011FE  0E00               	movlw	0
  2532  001200  6E14               	movwf	___ftmul@f3_as_product+1,c
  2533  001202  0E00               	movlw	0
  2534  001204  6E15               	movwf	___ftmul@f3_as_product+2,c
  2535  001206  0E07               	movlw	7
  2536  001208  6E16               	movwf	___ftmul@cntr,c
  2537  00120A  A009               	btfss	___ftmul@f1,0,c
  2538  00120C  D006               	goto	l455
  2539  00120E  500C               	movf	___ftmul@f2,w,c
  2540  001210  2613               	addwf	___ftmul@f3_as_product,f,c
  2541  001212  500D               	movf	___ftmul@f2+1,w,c
  2542  001214  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  2543  001216  500E               	movf	___ftmul@f2+2,w,c
  2544  001218  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  2545  00121A                     l455:
  2546  00121A  90D8               	bcf	status,0,c
  2547  00121C  320B               	rrcf	___ftmul@f1+2,f,c
  2548  00121E  320A               	rrcf	___ftmul@f1+1,f,c
  2549  001220  3209               	rrcf	___ftmul@f1,f,c
  2550  001222  90D8               	bcf	status,0,c
  2551  001224  360C               	rlcf	___ftmul@f2,f,c
  2552  001226  360D               	rlcf	___ftmul@f2+1,f,c
  2553  001228  360E               	rlcf	___ftmul@f2+2,f,c
  2554  00122A  2E16               	decfsz	___ftmul@cntr,f,c
  2555  00122C  D7EE               	goto	l454
  2556  00122E  0E09               	movlw	9
  2557  001230  6E16               	movwf	___ftmul@cntr,c
  2558  001232  A009               	btfss	___ftmul@f1,0,c
  2559  001234  D006               	goto	l458
  2560  001236  500C               	movf	___ftmul@f2,w,c
  2561  001238  2613               	addwf	___ftmul@f3_as_product,f,c
  2562  00123A  500D               	movf	___ftmul@f2+1,w,c
  2563  00123C  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  2564  00123E  500E               	movf	___ftmul@f2+2,w,c
  2565  001240  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  2566  001242                     l458:
  2567  001242  90D8               	bcf	status,0,c
  2568  001244  320B               	rrcf	___ftmul@f1+2,f,c
  2569  001246  320A               	rrcf	___ftmul@f1+1,f,c
  2570  001248  3209               	rrcf	___ftmul@f1,f,c
  2571  00124A  90D8               	bcf	status,0,c
  2572  00124C  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  2573  00124E  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  2574  001250  3213               	rrcf	___ftmul@f3_as_product,f,c
  2575  001252  2E16               	decfsz	___ftmul@cntr,f,c
  2576  001254  D7EE               	goto	l457
  2577  001256  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2578  00125A  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2579  00125E  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2580  001262  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  2581  001266  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  2582  00126A  ECA4  F009         	call	___ftpack	;wreg free
  2583  00126E  C001  F009         	movff	?___ftpack,?___ftmul
  2584  001272  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  2585  001276  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  2586  00127A  0012               	return	
  2587  00127C                     __end_of___ftmul:
  2588                           	opt stack 0
  2589                           tblptru	equ	0xFF8
  2590                           tblptrh	equ	0xFF7
  2591                           tblptrl	equ	0xFF6
  2592                           tablat	equ	0xFF5
  2593                           prodh	equ	0xFF4
  2594                           prodl	equ	0xFF3
  2595                           wreg	equ	0xFE8
  2596                           indf2	equ	0xFDF
  2597                           postinc2	equ	0xFDE
  2598                           postdec2	equ	0xFDD
  2599                           fsr2h	equ	0xFDA
  2600                           fsr2l	equ	0xFD9
  2601                           status	equ	0xFD8
  2602                           
  2603 ;; *************** function ___ftge *****************
  2604 ;; Defined at:
  2605 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;  ff1             3   12[COMRAM] float 
  2608 ;;  ff2             3   15[COMRAM] float 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;		None               void
  2613 ;; Registers used:
  2614 ;;		wreg, status,2, status,0
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2620 ;;      Params:         6       0       0       0       0       0       0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2622 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2623 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2624 ;;Total ram usage:        9 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_main
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text14
  2634  0013F6                     __ptext14:
  2635                           	opt stack 0
  2636  0013F6                     ___ftge:
  2637                           	opt stack 30
  2638                           
  2639                           ;incstack = 0
  2640  0013F6  AE0F               	btfss	___ftge@ff1+2,7,c
  2641  0013F8  D016               	goto	l444
  2642  0013FA  C00D  F013         	movff	___ftge@ff1,??___ftge
  2643  0013FE  C00E  F014         	movff	___ftge@ff1+1,??___ftge+1
  2644  001402  C00F  F015         	movff	___ftge@ff1+2,??___ftge+2
  2645  001406  1E13               	comf	??___ftge,f,c
  2646  001408  1E14               	comf	??___ftge+1,f,c
  2647  00140A  1E15               	comf	??___ftge+2,f,c
  2648  00140C  2A13               	incf	??___ftge,f,c
  2649  00140E  0E00               	movlw	0
  2650  001410  2214               	addwfc	??___ftge+1,f,c
  2651  001412  2215               	addwfc	??___ftge+2,f,c
  2652  001414  0E00               	movlw	0
  2653  001416  2413               	addwf	??___ftge,w,c
  2654  001418  6E0D               	movwf	___ftge@ff1,c
  2655  00141A  0E00               	movlw	0
  2656  00141C  2014               	addwfc	??___ftge+1,w,c
  2657  00141E  6E0E               	movwf	___ftge@ff1+1,c
  2658  001420  0E80               	movlw	128
  2659  001422  2015               	addwfc	??___ftge+2,w,c
  2660  001424  6E0F               	movwf	___ftge@ff1+2,c
  2661  001426                     l444:
  2662  001426  AE12               	btfss	___ftge@ff2+2,7,c
  2663  001428  D016               	goto	l445
  2664  00142A  C010  F013         	movff	___ftge@ff2,??___ftge
  2665  00142E  C011  F014         	movff	___ftge@ff2+1,??___ftge+1
  2666  001432  C012  F015         	movff	___ftge@ff2+2,??___ftge+2
  2667  001436  1E13               	comf	??___ftge,f,c
  2668  001438  1E14               	comf	??___ftge+1,f,c
  2669  00143A  1E15               	comf	??___ftge+2,f,c
  2670  00143C  2A13               	incf	??___ftge,f,c
  2671  00143E  0E00               	movlw	0
  2672  001440  2214               	addwfc	??___ftge+1,f,c
  2673  001442  2215               	addwfc	??___ftge+2,f,c
  2674  001444  0E00               	movlw	0
  2675  001446  2413               	addwf	??___ftge,w,c
  2676  001448  6E10               	movwf	___ftge@ff2,c
  2677  00144A  0E00               	movlw	0
  2678  00144C  2014               	addwfc	??___ftge+1,w,c
  2679  00144E  6E11               	movwf	___ftge@ff2+1,c
  2680  001450  0E80               	movlw	128
  2681  001452  2015               	addwfc	??___ftge+2,w,c
  2682  001454  6E12               	movwf	___ftge@ff2+2,c
  2683  001456                     l445:
  2684  001456  0E00               	movlw	0
  2685  001458  1A0D               	xorwf	___ftge@ff1,f,c
  2686  00145A  0E00               	movlw	0
  2687  00145C  1A0E               	xorwf	___ftge@ff1+1,f,c
  2688  00145E  0E80               	movlw	128
  2689  001460  1A0F               	xorwf	___ftge@ff1+2,f,c
  2690  001462  0E00               	movlw	0
  2691  001464  1A10               	xorwf	___ftge@ff2,f,c
  2692  001466  0E00               	movlw	0
  2693  001468  1A11               	xorwf	___ftge@ff2+1,f,c
  2694  00146A  0E80               	movlw	128
  2695  00146C  1A12               	xorwf	___ftge@ff2+2,f,c
  2696  00146E  5010               	movf	___ftge@ff2,w,c
  2697  001470  5C0D               	subwf	___ftge@ff1,w,c
  2698  001472  5011               	movf	___ftge@ff2+1,w,c
  2699  001474  580E               	subwfb	___ftge@ff1+1,w,c
  2700  001476  5012               	movf	___ftge@ff2+2,w,c
  2701  001478  580F               	subwfb	___ftge@ff1+2,w,c
  2702  00147A  B0D8               	btfsc	status,0,c
  2703  00147C  D002               	goto	l1460
  2704  00147E  90D8               	bcf	status,0,c
  2705  001480  0012               	return	
  2706  001482                     l1460:
  2707  001482  80D8               	bsf	status,0,c
  2708  001484  0012               	return	
  2709  001486                     __end_of___ftge:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           prodh	equ	0xFF4
  2716                           prodl	equ	0xFF3
  2717                           wreg	equ	0xFE8
  2718                           indf2	equ	0xFDF
  2719                           postinc2	equ	0xFDE
  2720                           postdec2	equ	0xFDD
  2721                           fsr2h	equ	0xFDA
  2722                           fsr2l	equ	0xFD9
  2723                           status	equ	0xFD8
  2724                           
  2725 ;; *************** function ___ftadd *****************
  2726 ;; Defined at:
  2727 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  f1              3   23[COMRAM] float 
  2730 ;;  f2              3   26[COMRAM] float 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  exp1            1   34[COMRAM] unsigned char 
  2733 ;;  exp2            1   33[COMRAM] unsigned char 
  2734 ;;  sign            1   32[COMRAM] unsigned char 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  3   23[COMRAM] float 
  2737 ;; Registers used:
  2738 ;;		wreg, status,2, status,0, cstack
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2744 ;;      Params:         6       0       0       0       0       0       0       0       0
  2745 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2746 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2747 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2748 ;;Total ram usage:       12 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; Hardware stack levels required when called:    1
  2751 ;; This function calls:
  2752 ;;		___ftpack
  2753 ;; This function is called by:
  2754 ;;		_main
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           	psect	text15
  2759  000C74                     __ptext15:
  2760                           	opt stack 0
  2761  000C74                     ___ftadd:
  2762                           	opt stack 29
  2763                           
  2764                           ;incstack = 0
  2765  000C74  C01A  F01E         	movff	___ftadd@f1+2,??___ftadd
  2766  000C78  6A1F               	clrf	(??___ftadd+1)& (0+255),c
  2767  000C7A  6A20               	clrf	(??___ftadd+2)& (0+255),c
  2768  000C7C  3419               	rlcf	___ftadd@f1+1,w,c
  2769  000C7E  361E               	rlcf	??___ftadd& (0+255),f,c
  2770  000C80  E301               	bnc	u1531
  2771  000C82  801F               	bsf	(??___ftadd+1)& (0+255),0,c
  2772  000C84                     u1531:
  2773  000C84  501E               	movf	??___ftadd,w,c
  2774  000C86  6E23               	movwf	___ftadd@exp1,c
  2775  000C88  C01D  F01E         	movff	___ftadd@f2+2,??___ftadd
  2776  000C8C  6A1F               	clrf	(??___ftadd+1)& (0+255),c
  2777  000C8E  6A20               	clrf	(??___ftadd+2)& (0+255),c
  2778  000C90  341C               	rlcf	___ftadd@f2+1,w,c
  2779  000C92  361E               	rlcf	??___ftadd& (0+255),f,c
  2780  000C94  E301               	bnc	u1541
  2781  000C96  801F               	bsf	(??___ftadd+1)& (0+255),0,c
  2782  000C98                     u1541:
  2783  000C98  501E               	movf	??___ftadd,w,c
  2784  000C9A  6E22               	movwf	___ftadd@exp2,c
  2785  000C9C  5023               	movf	___ftadd@exp1,w,c
  2786  000C9E  B4D8               	btfsc	status,2,c
  2787  000CA0  D00B               	goto	u1570
  2788  000CA2  5022               	movf	___ftadd@exp2,w,c
  2789  000CA4  5C23               	subwf	___ftadd@exp1,w,c
  2790  000CA6  B0D8               	btfsc	status,0,c
  2791  000CA8  D00E               	goto	l403
  2792  000CAA  5023               	movf	___ftadd@exp1,w,c
  2793  000CAC  0800               	sublw	0
  2794  000CAE  2422               	addwf	___ftadd@exp2,w,c
  2795  000CB0  6E1E               	movwf	??___ftadd& (0+255),c
  2796  000CB2  0E18               	movlw	24
  2797  000CB4  641E               	cpfsgt	??___ftadd,c
  2798  000CB6  D007               	goto	l403
  2799  000CB8                     u1570:
  2800  000CB8  C01B  F018         	movff	___ftadd@f2,?___ftadd
  2801  000CBC  C01C  F019         	movff	___ftadd@f2+1,?___ftadd+1
  2802  000CC0  C01D  F01A         	movff	___ftadd@f2+2,?___ftadd+2
  2803  000CC4  0012               	return	
  2804  000CC6                     l403:
  2805  000CC6  5022               	movf	___ftadd@exp2,w,c
  2806  000CC8  B4D8               	btfsc	status,2,c
  2807  000CCA  D00B               	goto	u1600
  2808  000CCC  5023               	movf	___ftadd@exp1,w,c
  2809  000CCE  5C22               	subwf	___ftadd@exp2,w,c
  2810  000CD0  B0D8               	btfsc	status,0,c
  2811  000CD2  D00E               	goto	l407
  2812  000CD4  5022               	movf	___ftadd@exp2,w,c
  2813  000CD6  0800               	sublw	0
  2814  000CD8  2423               	addwf	___ftadd@exp1,w,c
  2815  000CDA  6E1E               	movwf	??___ftadd& (0+255),c
  2816  000CDC  0E18               	movlw	24
  2817  000CDE  641E               	cpfsgt	??___ftadd,c
  2818  000CE0  D007               	goto	l407
  2819  000CE2                     u1600:
  2820  000CE2  C018  F018         	movff	___ftadd@f1,?___ftadd
  2821  000CE6  C019  F019         	movff	___ftadd@f1+1,?___ftadd+1
  2822  000CEA  C01A  F01A         	movff	___ftadd@f1+2,?___ftadd+2
  2823  000CEE  0012               	return	
  2824  000CF0                     l407:
  2825  000CF0  0E06               	movlw	6
  2826  000CF2  6E21               	movwf	___ftadd@sign,c
  2827  000CF4  BE1A               	btfsc	___ftadd@f1+2,7,c
  2828  000CF6  8E21               	bsf	___ftadd@sign,7,c
  2829  000CF8  BE1D               	btfsc	___ftadd@f2+2,7,c
  2830  000CFA  8C21               	bsf	___ftadd@sign,6,c
  2831  000CFC  8E19               	bsf	___ftadd@f1+1,7,c
  2832  000CFE  0EFF               	movlw	255
  2833  000D00  1618               	andwf	___ftadd@f1,f,c
  2834  000D02  0EFF               	movlw	255
  2835  000D04  1619               	andwf	___ftadd@f1+1,f,c
  2836  000D06  0E00               	movlw	0
  2837  000D08  161A               	andwf	___ftadd@f1+2,f,c
  2838  000D0A  8E1C               	bsf	___ftadd@f2+1,7,c
  2839  000D0C  0EFF               	movlw	255
  2840  000D0E  161B               	andwf	___ftadd@f2,f,c
  2841  000D10  0EFF               	movlw	255
  2842  000D12  161C               	andwf	___ftadd@f2+1,f,c
  2843  000D14  0E00               	movlw	0
  2844  000D16  161D               	andwf	___ftadd@f2+2,f,c
  2845  000D18  5022               	movf	___ftadd@exp2,w,c
  2846  000D1A  5C23               	subwf	___ftadd@exp1,w,c
  2847  000D1C  B0D8               	btfsc	status,0,c
  2848  000D1E  D01B               	goto	l412
  2849  000D20                     u1630:
  2850  000D20  90D8               	bcf	status,0,c
  2851  000D22  361B               	rlcf	___ftadd@f2,f,c
  2852  000D24  361C               	rlcf	___ftadd@f2+1,f,c
  2853  000D26  361D               	rlcf	___ftadd@f2+2,f,c
  2854  000D28  0622               	decf	___ftadd@exp2,f,c
  2855  000D2A  5023               	movf	___ftadd@exp1,w,c
  2856  000D2C  1822               	xorwf	___ftadd@exp2,w,c
  2857  000D2E  B4D8               	btfsc	status,2,c
  2858  000D30  D00D               	goto	l417
  2859  000D32  0621               	decf	___ftadd@sign,f,c
  2860  000D34  C021  F01E         	movff	___ftadd@sign,??___ftadd
  2861  000D38  0E07               	movlw	7
  2862  000D3A  161E               	andwf	??___ftadd,f,c
  2863  000D3C  B4D8               	btfsc	status,2,c
  2864  000D3E  D006               	goto	l417
  2865  000D40  D7EF               	goto	u1630
  2866  000D42  90D8               	bcf	status,0,c
  2867  000D44  321A               	rrcf	___ftadd@f1+2,f,c
  2868  000D46  3219               	rrcf	___ftadd@f1+1,f,c
  2869  000D48  3218               	rrcf	___ftadd@f1,f,c
  2870  000D4A  2A23               	incf	___ftadd@exp1,f,c
  2871  000D4C                     l417:
  2872  000D4C  5022               	movf	___ftadd@exp2,w,c
  2873  000D4E  1823               	xorwf	___ftadd@exp1,w,c
  2874  000D50  B4D8               	btfsc	status,2,c
  2875  000D52  D01F               	goto	u1700
  2876  000D54  D7F6               	goto	l418
  2877  000D56                     l412:
  2878  000D56  5023               	movf	___ftadd@exp1,w,c
  2879  000D58  5C22               	subwf	___ftadd@exp2,w,c
  2880  000D5A  B0D8               	btfsc	status,0,c
  2881  000D5C  D01A               	goto	u1700
  2882  000D5E                     u1670:
  2883  000D5E  90D8               	bcf	status,0,c
  2884  000D60  3618               	rlcf	___ftadd@f1,f,c
  2885  000D62  3619               	rlcf	___ftadd@f1+1,f,c
  2886  000D64  361A               	rlcf	___ftadd@f1+2,f,c
  2887  000D66  0623               	decf	___ftadd@exp1,f,c
  2888  000D68  5023               	movf	___ftadd@exp1,w,c
  2889  000D6A  1822               	xorwf	___ftadd@exp2,w,c
  2890  000D6C  B4D8               	btfsc	status,2,c
  2891  000D6E  D00D               	goto	l426
  2892  000D70  0621               	decf	___ftadd@sign,f,c
  2893  000D72  C021  F01E         	movff	___ftadd@sign,??___ftadd
  2894  000D76  0E07               	movlw	7
  2895  000D78  161E               	andwf	??___ftadd,f,c
  2896  000D7A  B4D8               	btfsc	status,2,c
  2897  000D7C  D006               	goto	l426
  2898  000D7E  D7EF               	goto	u1670
  2899  000D80  90D8               	bcf	status,0,c
  2900  000D82  321D               	rrcf	___ftadd@f2+2,f,c
  2901  000D84  321C               	rrcf	___ftadd@f2+1,f,c
  2902  000D86  321B               	rrcf	___ftadd@f2,f,c
  2903  000D88  2A22               	incf	___ftadd@exp2,f,c
  2904  000D8A                     l426:
  2905  000D8A  5022               	movf	___ftadd@exp2,w,c
  2906  000D8C  1823               	xorwf	___ftadd@exp1,w,c
  2907  000D8E  A4D8               	btfss	status,2,c
  2908  000D90  D7F7               	goto	l427
  2909  000D92                     u1700:
  2910  000D92  AE21               	btfss	___ftadd@sign,7,c
  2911  000D94  D00C               	goto	l429
  2912  000D96  0EFF               	movlw	255
  2913  000D98  1A18               	xorwf	___ftadd@f1,f,c
  2914  000D9A  0EFF               	movlw	255
  2915  000D9C  1A19               	xorwf	___ftadd@f1+1,f,c
  2916  000D9E  0EFF               	movlw	255
  2917  000DA0  1A1A               	xorwf	___ftadd@f1+2,f,c
  2918  000DA2  0E01               	movlw	1
  2919  000DA4  2618               	addwf	___ftadd@f1,f,c
  2920  000DA6  0E00               	movlw	0
  2921  000DA8  2219               	addwfc	___ftadd@f1+1,f,c
  2922  000DAA  0E00               	movlw	0
  2923  000DAC  221A               	addwfc	___ftadd@f1+2,f,c
  2924  000DAE                     l429:
  2925  000DAE  AC21               	btfss	___ftadd@sign,6,c
  2926  000DB0  D00C               	goto	l430
  2927  000DB2  0EFF               	movlw	255
  2928  000DB4  1A1B               	xorwf	___ftadd@f2,f,c
  2929  000DB6  0EFF               	movlw	255
  2930  000DB8  1A1C               	xorwf	___ftadd@f2+1,f,c
  2931  000DBA  0EFF               	movlw	255
  2932  000DBC  1A1D               	xorwf	___ftadd@f2+2,f,c
  2933  000DBE  0E01               	movlw	1
  2934  000DC0  261B               	addwf	___ftadd@f2,f,c
  2935  000DC2  0E00               	movlw	0
  2936  000DC4  221C               	addwfc	___ftadd@f2+1,f,c
  2937  000DC6  0E00               	movlw	0
  2938  000DC8  221D               	addwfc	___ftadd@f2+2,f,c
  2939  000DCA                     l430:
  2940  000DCA  0E00               	movlw	0
  2941  000DCC  6E21               	movwf	___ftadd@sign,c
  2942  000DCE  5018               	movf	___ftadd@f1,w,c
  2943  000DD0  261B               	addwf	___ftadd@f2,f,c
  2944  000DD2  5019               	movf	___ftadd@f1+1,w,c
  2945  000DD4  221C               	addwfc	___ftadd@f2+1,f,c
  2946  000DD6  501A               	movf	___ftadd@f1+2,w,c
  2947  000DD8  221D               	addwfc	___ftadd@f2+2,f,c
  2948  000DDA  AE1D               	btfss	___ftadd@f2+2,7,c
  2949  000DDC  D00E               	goto	l431
  2950  000DDE  0EFF               	movlw	255
  2951  000DE0  1A1B               	xorwf	___ftadd@f2,f,c
  2952  000DE2  0EFF               	movlw	255
  2953  000DE4  1A1C               	xorwf	___ftadd@f2+1,f,c
  2954  000DE6  0EFF               	movlw	255
  2955  000DE8  1A1D               	xorwf	___ftadd@f2+2,f,c
  2956  000DEA  0E01               	movlw	1
  2957  000DEC  261B               	addwf	___ftadd@f2,f,c
  2958  000DEE  0E00               	movlw	0
  2959  000DF0  221C               	addwfc	___ftadd@f2+1,f,c
  2960  000DF2  0E00               	movlw	0
  2961  000DF4  221D               	addwfc	___ftadd@f2+2,f,c
  2962  000DF6  0E01               	movlw	1
  2963  000DF8  6E21               	movwf	___ftadd@sign,c
  2964  000DFA                     l431:
  2965  000DFA  C01B  F001         	movff	___ftadd@f2,___ftpack@arg
  2966  000DFE  C01C  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  2967  000E02  C01D  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  2968  000E06  C023  F004         	movff	___ftadd@exp1,___ftpack@exp
  2969  000E0A  C021  F005         	movff	___ftadd@sign,___ftpack@sign
  2970  000E0E  ECA4  F009         	call	___ftpack	;wreg free
  2971  000E12  C001  F018         	movff	?___ftpack,?___ftadd
  2972  000E16  C002  F019         	movff	?___ftpack+1,?___ftadd+1
  2973  000E1A  C003  F01A         	movff	?___ftpack+2,?___ftadd+2
  2974  000E1E  0012               	return	
  2975  000E20                     __end_of___ftadd:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           wreg	equ	0xFE8
  2984                           indf2	equ	0xFDF
  2985                           postinc2	equ	0xFDE
  2986                           postdec2	equ	0xFDD
  2987                           fsr2h	equ	0xFDA
  2988                           fsr2l	equ	0xFD9
  2989                           status	equ	0xFD8
  2990                           
  2991 ;; *************** function ___awtoft *****************
  2992 ;; Defined at:
  2993 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  c               2    8[COMRAM] int 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  sign            1   11[COMRAM] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  3    8[COMRAM] float 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3007 ;;      Params:         3       0       0       0       0       0       0       0       0
  3008 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3010 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3011 ;;Total ram usage:        4 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    1
  3014 ;; This function calls:
  3015 ;;		___ftpack
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text16
  3022  001666                     __ptext16:
  3023                           	opt stack 0
  3024  001666                     ___awtoft:
  3025                           	opt stack 29
  3026                           
  3027                           ;incstack = 0
  3028  001666  0E00               	movlw	0
  3029  001668  6E0C               	movwf	___awtoft@sign,c
  3030  00166A  AE0A               	btfss	___awtoft@c+1,7,c
  3031  00166C  D006               	goto	l353
  3032  00166E  6C09               	negf	___awtoft@c,c
  3033  001670  1E0A               	comf	___awtoft@c+1,f,c
  3034  001672  B0D8               	btfsc	status,0,c
  3035  001674  2A0A               	incf	___awtoft@c+1,f,c
  3036  001676  0E01               	movlw	1
  3037  001678  6E0C               	movwf	___awtoft@sign,c
  3038  00167A                     l353:
  3039  00167A  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3040  00167E  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3041  001682  6A03               	clrf	___ftpack@arg+2,c
  3042  001684  0E8E               	movlw	142
  3043  001686  6E04               	movwf	___ftpack@exp,c
  3044  001688  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3045  00168C  ECA4  F009         	call	___ftpack	;wreg free
  3046  001690  C001  F009         	movff	?___ftpack,?___awtoft
  3047  001694  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3048  001698  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3049  00169C  0012               	return	
  3050  00169E                     __end_of___awtoft:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           prodh	equ	0xFF4
  3057                           prodl	equ	0xFF3
  3058                           wreg	equ	0xFE8
  3059                           indf2	equ	0xFDF
  3060                           postinc2	equ	0xFDE
  3061                           postdec2	equ	0xFDD
  3062                           fsr2h	equ	0xFDA
  3063                           fsr2l	equ	0xFD9
  3064                           status	equ	0xFD8
  3065                           
  3066 ;; *************** function ___ftpack *****************
  3067 ;; Defined at:
  3068 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  arg             3    0[COMRAM] unsigned um
  3071 ;;  exp             1    3[COMRAM] unsigned char 
  3072 ;;  sign            1    4[COMRAM] unsigned char 
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;		None
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  3    0[COMRAM] float 
  3077 ;; Registers used:
  3078 ;;		wreg, status,2, status,0
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3084 ;;      Params:         5       0       0       0       0       0       0       0       0
  3085 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3086 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3087 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3088 ;;Total ram usage:        8 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		___altoft
  3094 ;;		___awtoft
  3095 ;;		___ftadd
  3096 ;;		___ftmul
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text17
  3101  001348                     __ptext17:
  3102                           	opt stack 0
  3103  001348                     ___ftpack:
  3104                           	opt stack 28
  3105                           
  3106                           ;incstack = 0
  3107  001348  5004               	movf	___ftpack@exp,w,c
  3108  00134A  B4D8               	btfsc	status,2,c
  3109  00134C  D005               	goto	u1060
  3110  00134E  5001               	movf	___ftpack@arg,w,c
  3111  001350  1002               	iorwf	___ftpack@arg+1,w,c
  3112  001352  1003               	iorwf	___ftpack@arg+2,w,c
  3113  001354  A4D8               	btfss	status,2,c
  3114  001356  D00C               	goto	l372
  3115  001358                     u1060:
  3116  001358  0E00               	movlw	0
  3117  00135A  6E01               	movwf	?___ftpack,c
  3118  00135C  0E00               	movlw	0
  3119  00135E  6E02               	movwf	?___ftpack+1,c
  3120  001360  0E00               	movlw	0
  3121  001362  6E03               	movwf	?___ftpack+2,c
  3122  001364  0012               	return	
  3123  001366  2A04               	incf	___ftpack@exp,f,c
  3124  001368  90D8               	bcf	status,0,c
  3125  00136A  3203               	rrcf	___ftpack@arg+2,f,c
  3126  00136C  3202               	rrcf	___ftpack@arg+1,f,c
  3127  00136E  3201               	rrcf	___ftpack@arg,f,c
  3128  001370                     l372:
  3129  001370  0E00               	movlw	0
  3130  001372  1401               	andwf	___ftpack@arg,w,c
  3131  001374  6E06               	movwf	??___ftpack& (0+255),c
  3132  001376  0E00               	movlw	0
  3133  001378  1402               	andwf	___ftpack@arg+1,w,c
  3134  00137A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3135  00137C  0EFE               	movlw	254
  3136  00137E  1403               	andwf	___ftpack@arg+2,w,c
  3137  001380  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3138  001382  5006               	movf	??___ftpack,w,c
  3139  001384  1007               	iorwf	??___ftpack+1,w,c
  3140  001386  1008               	iorwf	??___ftpack+2,w,c
  3141  001388  B4D8               	btfsc	status,2,c
  3142  00138A  D00C               	goto	l375
  3143  00138C  D7EC               	goto	l373
  3144  00138E  2A04               	incf	___ftpack@exp,f,c
  3145  001390  0E01               	movlw	1
  3146  001392  2601               	addwf	___ftpack@arg,f,c
  3147  001394  0E00               	movlw	0
  3148  001396  2202               	addwfc	___ftpack@arg+1,f,c
  3149  001398  0E00               	movlw	0
  3150  00139A  2203               	addwfc	___ftpack@arg+2,f,c
  3151  00139C  90D8               	bcf	status,0,c
  3152  00139E  3203               	rrcf	___ftpack@arg+2,f,c
  3153  0013A0  3202               	rrcf	___ftpack@arg+1,f,c
  3154  0013A2  3201               	rrcf	___ftpack@arg,f,c
  3155  0013A4                     l375:
  3156  0013A4  0E00               	movlw	0
  3157  0013A6  1401               	andwf	___ftpack@arg,w,c
  3158  0013A8  6E06               	movwf	??___ftpack& (0+255),c
  3159  0013AA  0E00               	movlw	0
  3160  0013AC  1402               	andwf	___ftpack@arg+1,w,c
  3161  0013AE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3162  0013B0  0EFF               	movlw	255
  3163  0013B2  1403               	andwf	___ftpack@arg+2,w,c
  3164  0013B4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3165  0013B6  5006               	movf	??___ftpack,w,c
  3166  0013B8  1007               	iorwf	??___ftpack+1,w,c
  3167  0013BA  1008               	iorwf	??___ftpack+2,w,c
  3168  0013BC  B4D8               	btfsc	status,2,c
  3169  0013BE  D006               	goto	l378
  3170  0013C0  D7E6               	goto	l376
  3171  0013C2  0604               	decf	___ftpack@exp,f,c
  3172  0013C4  90D8               	bcf	status,0,c
  3173  0013C6  3601               	rlcf	___ftpack@arg,f,c
  3174  0013C8  3602               	rlcf	___ftpack@arg+1,f,c
  3175  0013CA  3603               	rlcf	___ftpack@arg+2,f,c
  3176  0013CC                     l378:
  3177  0013CC  BE02               	btfsc	___ftpack@arg+1,7,c
  3178  0013CE  D003               	goto	u1100
  3179  0013D0  0E02               	movlw	2
  3180  0013D2  6004               	cpfslt	___ftpack@exp,c
  3181  0013D4  D7F6               	goto	l379
  3182  0013D6                     u1100:
  3183  0013D6  A004               	btfss	___ftpack@exp,0,c
  3184  0013D8  9E02               	bcf	___ftpack@arg+1,7,c
  3185  0013DA  90D8               	bcf	status,0,c
  3186  0013DC  3204               	rrcf	___ftpack@exp,f,c
  3187  0013DE  5004               	movf	___ftpack@exp,w,c
  3188  0013E0  1203               	iorwf	___ftpack@arg+2,f,c
  3189  0013E2  5005               	movf	___ftpack@sign,w,c
  3190  0013E4  A4D8               	btfss	status,2,c
  3191  0013E6  8E03               	bsf	___ftpack@arg+2,7,c
  3192  0013E8  C001  F001         	movff	___ftpack@arg,?___ftpack
  3193  0013EC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  3194  0013F0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  3195  0013F4  0012               	return	
  3196  0013F6                     __end_of___ftpack:
  3197                           	opt stack 0
  3198                           tblptru	equ	0xFF8
  3199                           tblptrh	equ	0xFF7
  3200                           tblptrl	equ	0xFF6
  3201                           tablat	equ	0xFF5
  3202                           prodh	equ	0xFF4
  3203                           prodl	equ	0xFF3
  3204                           wreg	equ	0xFE8
  3205                           indf2	equ	0xFDF
  3206                           postinc2	equ	0xFDE
  3207                           postdec2	equ	0xFDD
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _UART_Write *****************
  3213 ;; Defined at:
  3214 ;;		line 22 in file "UART.h"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  data            1    wreg     unsigned char 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  data            1    0[COMRAM] unsigned char 
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  1    wreg      void 
  3221 ;; Registers used:
  3222 ;;		wreg
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3228 ;;      Params:         0       0       0       0       0       0       0       0       0
  3229 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3231 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3232 ;;Total ram usage:        1 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; This function calls:
  3235 ;;		Nothing
  3236 ;; This function is called by:
  3237 ;;		_main
  3238 ;;		_UART_Write_Text
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           	psect	text18
  3243  001718                     __ptext18:
  3244                           	opt stack 0
  3245  001718                     _UART_Write:
  3246                           	opt stack 30
  3247                           
  3248                           ;incstack = 0
  3249                           ;UART_Write@data stored from wreg
  3250  001718  6E01               	movwf	UART_Write@data,c
  3251  00171A                     
  3252                           ;UART.h: 23: while (!TRMT);
  3253  00171A  A2AC               	btfss	4012,1,c	;volatile
  3254  00171C  D7FE               	goto	l1034
  3255                           
  3256                           ;UART.h: 24: TXREG = data;
  3257  00171E  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  3258  001722  0012               	return		;funcret
  3259  001724                     __end_of_UART_Write:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           wreg	equ	0xFE8
  3268                           indf2	equ	0xFDF
  3269                           postinc2	equ	0xFDE
  3270                           postdec2	equ	0xFDD
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function _UART_Init *****************
  3276 ;; Defined at:
  3277 ;;		line 1 in file "UART.h"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  baudrate        4   14[COMRAM] const long 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  x               2   26[COMRAM] unsigned int 
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      unsigned char 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2, status,0, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3291 ;;      Params:         4       0       0       0       0       0       0       0       0
  3292 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3293 ;;      Temps:          8       0       0       0       0       0       0       0       0
  3294 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3295 ;;Total ram usage:       14 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    1
  3298 ;; This function calls:
  3299 ;;		___aldiv
  3300 ;; This function is called by:
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text19
  3306  000F68                     __ptext19:
  3307                           	opt stack 0
  3308  000F68                     _UART_Init:
  3309                           	opt stack 29
  3310                           
  3311                           ;UART.h: 2: unsigned int x;
  3312                           ;UART.h: 3: x = (8000000 - baudrate * 64) / (baudrate * 64);
  3313                           
  3314                           ;incstack = 0
  3315  000F68  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  3316  000F6C  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  3317  000F70  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  3318  000F74  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  3319  000F78  0E06               	movlw	6
  3320  000F7A                     u1375:
  3321  000F7A  90D8               	bcf	status,0,c
  3322  000F7C  3613               	rlcf	??_UART_Init,f,c
  3323  000F7E  3614               	rlcf	??_UART_Init+1,f,c
  3324  000F80  3615               	rlcf	??_UART_Init+2,f,c
  3325  000F82  3616               	rlcf	??_UART_Init+3,f,c
  3326  000F84  2EE8               	decfsz	wreg,f,c
  3327  000F86  D7F9               	goto	u1375
  3328  000F88  1E13               	comf	??_UART_Init,f,c
  3329  000F8A  1E14               	comf	??_UART_Init+1,f,c
  3330  000F8C  1E15               	comf	??_UART_Init+2,f,c
  3331  000F8E  1E16               	comf	??_UART_Init+3,f,c
  3332  000F90  2A13               	incf	??_UART_Init,f,c
  3333  000F92  0E00               	movlw	0
  3334  000F94  2214               	addwfc	??_UART_Init+1,f,c
  3335  000F96  2215               	addwfc	??_UART_Init+2,f,c
  3336  000F98  2216               	addwfc	??_UART_Init+3,f,c
  3337  000F9A  0E00               	movlw	0
  3338  000F9C  2413               	addwf	??_UART_Init,w,c
  3339  000F9E  6E01               	movwf	___aldiv@dividend,c
  3340  000FA0  0E12               	movlw	18
  3341  000FA2  2014               	addwfc	??_UART_Init+1,w,c
  3342  000FA4  6E02               	movwf	___aldiv@dividend+1,c
  3343  000FA6  0E7A               	movlw	122
  3344  000FA8  2015               	addwfc	??_UART_Init+2,w,c
  3345  000FAA  6E03               	movwf	___aldiv@dividend+2,c
  3346  000FAC  0E00               	movlw	0
  3347  000FAE  2016               	addwfc	??_UART_Init+3,w,c
  3348  000FB0  6E04               	movwf	___aldiv@dividend+3,c
  3349  000FB2  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  3350  000FB6  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  3351  000FBA  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  3352  000FBE  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  3353  000FC2  0E06               	movlw	6
  3354  000FC4                     u1385:
  3355  000FC4  90D8               	bcf	status,0,c
  3356  000FC6  3617               	rlcf	??_UART_Init+4,f,c
  3357  000FC8  3618               	rlcf	??_UART_Init+5,f,c
  3358  000FCA  3619               	rlcf	??_UART_Init+6,f,c
  3359  000FCC  361A               	rlcf	??_UART_Init+7,f,c
  3360  000FCE  2EE8               	decfsz	wreg,f,c
  3361  000FD0  D7F9               	goto	u1385
  3362  000FD2  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  3363  000FD6  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  3364  000FDA  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  3365  000FDE  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  3366  000FE2  EC3E  F009         	call	___aldiv	;wreg free
  3367  000FE6  C001  F01B         	movff	?___aldiv,UART_Init@x
  3368  000FEA  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  3369                           
  3370                           ;UART.h: 4: if (x > 255)
  3371  000FEE  041C               	decf	UART_Init@x+1,w,c
  3372  000FF0  A0D8               	btfss	status,0,c
  3373  000FF2  D044               	goto	l39
  3374                           
  3375                           ;UART.h: 5: {
  3376                           ;UART.h: 6: x = (8000000 - baudrate * 16) / (baudrate * 16);
  3377  000FF4  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  3378  000FF8  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  3379  000FFC  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  3380  001000  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  3381  001004  0E04               	movlw	4
  3382  001006                     u1405:
  3383  001006  90D8               	bcf	status,0,c
  3384  001008  3613               	rlcf	??_UART_Init,f,c
  3385  00100A  3614               	rlcf	??_UART_Init+1,f,c
  3386  00100C  3615               	rlcf	??_UART_Init+2,f,c
  3387  00100E  3616               	rlcf	??_UART_Init+3,f,c
  3388  001010  2EE8               	decfsz	wreg,f,c
  3389  001012  D7F9               	goto	u1405
  3390  001014  1E13               	comf	??_UART_Init,f,c
  3391  001016  1E14               	comf	??_UART_Init+1,f,c
  3392  001018  1E15               	comf	??_UART_Init+2,f,c
  3393  00101A  1E16               	comf	??_UART_Init+3,f,c
  3394  00101C  2A13               	incf	??_UART_Init,f,c
  3395  00101E  0E00               	movlw	0
  3396  001020  2214               	addwfc	??_UART_Init+1,f,c
  3397  001022  2215               	addwfc	??_UART_Init+2,f,c
  3398  001024  2216               	addwfc	??_UART_Init+3,f,c
  3399  001026  0E00               	movlw	0
  3400  001028  2413               	addwf	??_UART_Init,w,c
  3401  00102A  6E01               	movwf	___aldiv@dividend,c
  3402  00102C  0E12               	movlw	18
  3403  00102E  2014               	addwfc	??_UART_Init+1,w,c
  3404  001030  6E02               	movwf	___aldiv@dividend+1,c
  3405  001032  0E7A               	movlw	122
  3406  001034  2015               	addwfc	??_UART_Init+2,w,c
  3407  001036  6E03               	movwf	___aldiv@dividend+2,c
  3408  001038  0E00               	movlw	0
  3409  00103A  2016               	addwfc	??_UART_Init+3,w,c
  3410  00103C  6E04               	movwf	___aldiv@dividend+3,c
  3411  00103E  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  3412  001042  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  3413  001046  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  3414  00104A  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  3415  00104E  0E04               	movlw	4
  3416  001050                     u1415:
  3417  001050  90D8               	bcf	status,0,c
  3418  001052  3617               	rlcf	??_UART_Init+4,f,c
  3419  001054  3618               	rlcf	??_UART_Init+5,f,c
  3420  001056  3619               	rlcf	??_UART_Init+6,f,c
  3421  001058  361A               	rlcf	??_UART_Init+7,f,c
  3422  00105A  2EE8               	decfsz	wreg,f,c
  3423  00105C  D7F9               	goto	u1415
  3424  00105E  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  3425  001062  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  3426  001066  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  3427  00106A  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  3428  00106E  EC3E  F009         	call	___aldiv	;wreg free
  3429  001072  C001  F01B         	movff	?___aldiv,UART_Init@x
  3430  001076  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  3431                           
  3432                           ;UART.h: 7: BRGH = 1;
  3433  00107A  84AC               	bsf	4012,2,c	;volatile
  3434  00107C                     l39:
  3435                           
  3436                           ;UART.h: 8: }
  3437                           ;UART.h: 9: if (x < 256) {
  3438  00107C  041C               	decf	UART_Init@x+1,w,c
  3439  00107E  B0D8               	btfsc	status,0,c
  3440  001080  0012               	return	
  3441                           
  3442                           ;UART.h: 10: SPBRG = x;
  3443  001082  C01B  FFAF         	movff	UART_Init@x,4015	;volatile
  3444                           
  3445                           ;UART.h: 11: SYNC = 0;
  3446  001086  98AC               	bcf	4012,4,c	;volatile
  3447                           
  3448                           ;UART.h: 12: SPEN = 1;
  3449  001088  8EAB               	bsf	4011,7,c	;volatile
  3450                           
  3451                           ;UART.h: 13: TRISC7 = 1;
  3452  00108A  8E94               	bsf	3988,7,c	;volatile
  3453                           
  3454                           ;UART.h: 14: TRISC6 = 1;
  3455  00108C  8C94               	bsf	3988,6,c	;volatile
  3456                           
  3457                           ;UART.h: 15: CREN = 1;
  3458  00108E  88AB               	bsf	4011,4,c	;volatile
  3459                           
  3460                           ;UART.h: 16: TXEN = 1;
  3461  001090  8AAC               	bsf	4012,5,c	;volatile
  3462                           
  3463                           ;UART.h: 17: return 1;
  3464                           ;	Return value of _UART_Init is never used
  3465  001092  0012               	return	
  3466  001094                     __end_of_UART_Init:
  3467                           	opt stack 0
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           wreg	equ	0xFE8
  3475                           indf2	equ	0xFDF
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           fsr2h	equ	0xFDA
  3479                           fsr2l	equ	0xFD9
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function ___aldiv *****************
  3483 ;; Defined at:
  3484 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  dividend        4    0[COMRAM] long 
  3487 ;;  divisor         4    4[COMRAM] long 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  quotient        4   10[COMRAM] long 
  3490 ;;  sign            1    9[COMRAM] unsigned char 
  3491 ;;  counter         1    8[COMRAM] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  4    0[COMRAM] long 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3501 ;;      Params:         8       0       0       0       0       0       0       0       0
  3502 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3504 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3505 ;;Total ram usage:       14 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; This function calls:
  3508 ;;		Nothing
  3509 ;; This function is called by:
  3510 ;;		_UART_Init
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           	psect	text20
  3515  00127C                     __ptext20:
  3516                           	opt stack 0
  3517  00127C                     ___aldiv:
  3518                           	opt stack 29
  3519                           
  3520                           ;incstack = 0
  3521  00127C  0E00               	movlw	0
  3522  00127E  6E0A               	movwf	___aldiv@sign,c
  3523  001280  AE08               	btfss	___aldiv@divisor+3,7,c
  3524  001282  D00A               	goto	l213
  3525  001284  1E08               	comf	___aldiv@divisor+3,f,c
  3526  001286  1E07               	comf	___aldiv@divisor+2,f,c
  3527  001288  1E06               	comf	___aldiv@divisor+1,f,c
  3528  00128A  6C05               	negf	___aldiv@divisor,c
  3529  00128C  0E00               	movlw	0
  3530  00128E  2206               	addwfc	___aldiv@divisor+1,f,c
  3531  001290  2207               	addwfc	___aldiv@divisor+2,f,c
  3532  001292  2208               	addwfc	___aldiv@divisor+3,f,c
  3533  001294  0E01               	movlw	1
  3534  001296  6E0A               	movwf	___aldiv@sign,c
  3535  001298                     l213:
  3536  001298  AE04               	btfss	___aldiv@dividend+3,7,c
  3537  00129A  D00A               	goto	l214
  3538  00129C  1E04               	comf	___aldiv@dividend+3,f,c
  3539  00129E  1E03               	comf	___aldiv@dividend+2,f,c
  3540  0012A0  1E02               	comf	___aldiv@dividend+1,f,c
  3541  0012A2  6C01               	negf	___aldiv@dividend,c
  3542  0012A4  0E00               	movlw	0
  3543  0012A6  2202               	addwfc	___aldiv@dividend+1,f,c
  3544  0012A8  2203               	addwfc	___aldiv@dividend+2,f,c
  3545  0012AA  2204               	addwfc	___aldiv@dividend+3,f,c
  3546  0012AC  0E01               	movlw	1
  3547  0012AE  1A0A               	xorwf	___aldiv@sign,f,c
  3548  0012B0                     l214:
  3549  0012B0  0E00               	movlw	0
  3550  0012B2  6E0B               	movwf	___aldiv@quotient,c
  3551  0012B4  0E00               	movlw	0
  3552  0012B6  6E0C               	movwf	___aldiv@quotient+1,c
  3553  0012B8  0E00               	movlw	0
  3554  0012BA  6E0D               	movwf	___aldiv@quotient+2,c
  3555  0012BC  0E00               	movlw	0
  3556  0012BE  6E0E               	movwf	___aldiv@quotient+3,c
  3557  0012C0  5005               	movf	___aldiv@divisor,w,c
  3558  0012C2  1006               	iorwf	___aldiv@divisor+1,w,c
  3559  0012C4  1007               	iorwf	___aldiv@divisor+2,w,c
  3560  0012C6  1008               	iorwf	___aldiv@divisor+3,w,c
  3561  0012C8  B4D8               	btfsc	status,2,c
  3562  0012CA  D02A               	goto	l221
  3563  0012CC  0E01               	movlw	1
  3564  0012CE  6E09               	movwf	___aldiv@counter,c
  3565  0012D0  D006               	goto	l216
  3566  0012D2  90D8               	bcf	status,0,c
  3567  0012D4  3605               	rlcf	___aldiv@divisor,f,c
  3568  0012D6  3606               	rlcf	___aldiv@divisor+1,f,c
  3569  0012D8  3607               	rlcf	___aldiv@divisor+2,f,c
  3570  0012DA  3608               	rlcf	___aldiv@divisor+3,f,c
  3571  0012DC  2A09               	incf	___aldiv@counter,f,c
  3572  0012DE                     l216:
  3573  0012DE  AE08               	btfss	___aldiv@divisor+3,7,c
  3574  0012E0  D7F8               	goto	l217
  3575  0012E2                     u1160:
  3576  0012E2  90D8               	bcf	status,0,c
  3577  0012E4  360B               	rlcf	___aldiv@quotient,f,c
  3578  0012E6  360C               	rlcf	___aldiv@quotient+1,f,c
  3579  0012E8  360D               	rlcf	___aldiv@quotient+2,f,c
  3580  0012EA  360E               	rlcf	___aldiv@quotient+3,f,c
  3581  0012EC  5005               	movf	___aldiv@divisor,w,c
  3582  0012EE  5C01               	subwf	___aldiv@dividend,w,c
  3583  0012F0  5006               	movf	___aldiv@divisor+1,w,c
  3584  0012F2  5802               	subwfb	___aldiv@dividend+1,w,c
  3585  0012F4  5007               	movf	___aldiv@divisor+2,w,c
  3586  0012F6  5803               	subwfb	___aldiv@dividend+2,w,c
  3587  0012F8  5008               	movf	___aldiv@divisor+3,w,c
  3588  0012FA  5804               	subwfb	___aldiv@dividend+3,w,c
  3589  0012FC  A0D8               	btfss	status,0,c
  3590  0012FE  D009               	goto	l220
  3591  001300  5005               	movf	___aldiv@divisor,w,c
  3592  001302  5E01               	subwf	___aldiv@dividend,f,c
  3593  001304  5006               	movf	___aldiv@divisor+1,w,c
  3594  001306  5A02               	subwfb	___aldiv@dividend+1,f,c
  3595  001308  5007               	movf	___aldiv@divisor+2,w,c
  3596  00130A  5A03               	subwfb	___aldiv@dividend+2,f,c
  3597  00130C  5008               	movf	___aldiv@divisor+3,w,c
  3598  00130E  5A04               	subwfb	___aldiv@dividend+3,f,c
  3599  001310  800B               	bsf	___aldiv@quotient,0,c
  3600  001312                     l220:
  3601  001312  90D8               	bcf	status,0,c
  3602  001314  3208               	rrcf	___aldiv@divisor+3,f,c
  3603  001316  3207               	rrcf	___aldiv@divisor+2,f,c
  3604  001318  3206               	rrcf	___aldiv@divisor+1,f,c
  3605  00131A  3205               	rrcf	___aldiv@divisor,f,c
  3606  00131C  2E09               	decfsz	___aldiv@counter,f,c
  3607  00131E  D7E1               	goto	u1160
  3608  001320                     l221:
  3609  001320  500A               	movf	___aldiv@sign,w,c
  3610  001322  B4D8               	btfsc	status,2,c
  3611  001324  D008               	goto	l222
  3612  001326  1E0E               	comf	___aldiv@quotient+3,f,c
  3613  001328  1E0D               	comf	___aldiv@quotient+2,f,c
  3614  00132A  1E0C               	comf	___aldiv@quotient+1,f,c
  3615  00132C  6C0B               	negf	___aldiv@quotient,c
  3616  00132E  0E00               	movlw	0
  3617  001330  220C               	addwfc	___aldiv@quotient+1,f,c
  3618  001332  220D               	addwfc	___aldiv@quotient+2,f,c
  3619  001334  220E               	addwfc	___aldiv@quotient+3,f,c
  3620  001336                     l222:
  3621  001336  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  3622  00133A  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  3623  00133E  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  3624  001342  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  3625  001346  0012               	return	
  3626  001348                     __end_of___aldiv:
  3627                           	opt stack 0
  3628                           tblptru	equ	0xFF8
  3629                           tblptrh	equ	0xFF7
  3630                           tblptrl	equ	0xFF6
  3631                           tablat	equ	0xFF5
  3632                           prodh	equ	0xFF4
  3633                           prodl	equ	0xFF3
  3634                           wreg	equ	0xFE8
  3635                           indf2	equ	0xFDF
  3636                           postinc2	equ	0xFDE
  3637                           postdec2	equ	0xFDD
  3638                           fsr2h	equ	0xFDA
  3639                           fsr2l	equ	0xFD9
  3640                           status	equ	0xFD8
  3641                           tblptru	equ	0xFF8
  3642                           tblptrh	equ	0xFF7
  3643                           tblptrl	equ	0xFF6
  3644                           tablat	equ	0xFF5
  3645                           prodh	equ	0xFF4
  3646                           prodl	equ	0xFF3
  3647                           wreg	equ	0xFE8
  3648                           indf2	equ	0xFDF
  3649                           postinc2	equ	0xFDE
  3650                           postdec2	equ	0xFDD
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655                           	psect	rparam
  3656  0000                     tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           wreg	equ	0xFE8
  3663                           indf2	equ	0xFDF
  3664                           postinc2	equ	0xFDE
  3665                           postdec2	equ	0xFDD
  3666                           fsr2h	equ	0xFDA
  3667                           fsr2l	equ	0xFD9
  3668                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    10
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     70      72
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> main@stepx(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->___ftadd
    _trunc->___altoft
    ___altoft->___fttol
    _sprintf->___fttol
    ___lwmod->___lwdiv
    ___ftmul->___ftpack
    ___ftge->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   18262
                                             35 COMRAM    35    35      0
                    _UART_Data_Ready
                          _UART_Init
                          _UART_Read
                         _UART_Write
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___fttol
                             ___wmul
                            _sprintf
                               _step
                          _stopcheck
                              _trunc
 ---------------------------------------------------------------------------------
 (1) _trunc                                                8     5      3    3651
                                             25 COMRAM     8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _frexp                                                7     2      5     360
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     404
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2680
                                             15 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _stopcheck                                            0     0      0       0
                    _UART_Data_Ready
                          _UART_Read
 ---------------------------------------------------------------------------------
 (2) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _step                                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    17      6    1254
                                             15 COMRAM    14     8      6
                            ___fttol (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    3222
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     744
                                             12 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftadd                                             12     6      6    4014
                                             23 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2861
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           14    10      4     836
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Data_Ready
   _UART_Init
     ___aldiv
   _UART_Read
   _UART_Write
   ___awtoft
     ___ftpack
   ___ftadd
     ___ftmul (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftge
     ___awtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
   ___fttol
   ___wmul
   _sprintf
     ___fttol (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
   _step
   _stopcheck
     _UART_Data_Ready
     _UART_Read
   _trunc
     ___altoft
       ___ftpack
       ___fttol (ARG)
     ___fttol
     _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     46      48       1       75.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      48      20        0.0%
DATA                 0      0      48       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 05 13:36:07 2017

            ___altoft@exp 0018             ___altoft@sign 0019                        l39 107C  
                      l80 1706                        l90 088C                        l91 089C  
                      l85 0870                        l78 1702                        l94 08EA  
                      l87 0C62                        l95 08AE                        l96 08BE  
                      l88 087C                        l89 08A0                        l98 09BE  
                      l99 0982       ___wmul@multiplicand 0003               __CFG_BORV$3 000000  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000              ___ftadd@exp1 0023              ___ftadd@exp2 0022  
            ___ftadd@sign 0021                       l100 0944                       l110 0AD4  
                     l112 0C1E                       l104 09CC                       l121 0B92  
                     l105 09DC                       l122 0BEA                       l115 0B0C  
                     l107 0A8C                       l220 1312                       l140 0E44  
                     l116 0B64                       l108 0A50                       l221 1320  
                     l213 1298                       l125 0C50                       l222 1336  
                     l214 12B0                       l126 0C5C                       l118 0C3C  
                     l216 12DE                       l152 0EE2                       l217 12D2  
                     l153 0F3A                       l154 0EE8                       l146 0E6E  
                     l242 152C                       l403 0CC6                       l139 0E2A  
                     l243 1520                       l412 0D56                       l148 0E96  
                     l430 0DCA                       l431 0DFA                       l407 0CF0  
                     l353 167A                       l417 0D4C                       l426 0D8A  
                     l418 0D42                       l427 0D80                       l451 11B0  
                     l372 1370                       l444 1426                       l373 1366  
                     l429 0DAE                       l445 1456                       l453 11D8  
                     l454 120A                       l375 13A4                       l455 121A  
                     l376 138E                       l480 115A                       l472 10C0  
                     l457 1232                       l561 15F0                       l481 114E  
                     l378 13CC                       l458 1242                       l562 15E8  
                     l474 1136                       l379 13C2                       l571 163A  
                     l483 1176                       l475 1126                       l572 1632  
                     l708 15D0                       l565 1610                       l733 14A2  
                     l566 161A                       l575 1652                       l576 165C  
            __CFG_CPB$OFF 000000              __CFG_CPD$OFF 000000              __CFG_BOR$OFF 000000  
                     wreg 000FE8              __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000  
                    l1034 171A                      l1460 1482                      l1712 0E9A  
                    STR_1 080B                      _BRGH 007D62                      _CREN 007D5C  
                    u1100 13D6                      u2000 0C16                      u1211 10A4  
                    u1060 1358                      u1300 15F4                      u1230 10DE  
                    u1160 12E2                      u1330 163E                      u1235 10D6  
                    u1405 1006                      u2037 094E                      u1510 0F42  
                    u1270 1160                      u1415 1050                      u2047 099E  
                    u1600 0CE2                      u1520 0F5A                      u1360 14CA  
                    u2057 16A6                      u1531 0C84                      u2067 16B8  
                    u1700 0D92                      u1541 0C98                      u1630 0D20  
                    u1375 0F7A                      u1368 14CC                      u1385 0FC4  
                    u1570 0CB8                      u1490 0EC6                      u1741 1198  
                    u1670 0D5E                      u1761 11C0                      u1860 08A4  
                    u1890 08EE                      _RCIF 007CF5                      _SPEN 007D5F  
            __CFG_WDTPS$1 000000                      _TRMT 007D61                      _TXEN 007D65  
                    _SYNC 007D64                      _main 0810              ___ftpack@arg 0001  
            ___ftpack@exp 0004                      fsr2h 000FDA                      indf2 000FDF  
                    fsr2l 000FD9                      _step 169E                      prodh 000FF4  
                    prodl 000FF3                      start 0000             __CFG_IESO$OFF 000000  
            ___ftmul@cntr 0016              ___param_bank 000000              ___ftmul@sign 0017  
            ___fttol@exp1 000F              ___fttol@lval 000B             __CFG_PLLDIV$1 000000  
          __CFG_CCP2MX$ON 000000           __end_of___aldiv 1348                     ?_main 0001  
         __end_of___ftadd 0E20                     ?_step 0001           __end_of___ftmul 127C  
         __end_of___fttol 1188           __end_of___lwdiv 1624           __end_of___lwmod 1666  
                   _RCREG 000FAE                     _SPBRG 000FAF             __CFG_USBDIV$1 000000  
                   _TXREG 000FAD             __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000  
           __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000               ?_UART_Write 0001  
      __size_of_UART_Init 012C        __size_of_UART_Read 0008             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000  
           ___awtoft@sign 000C           __end_of_dpowers 080B                     _frexp 1486  
                   _errno 0047             ___ftpack@sign 0005                     main@i 003C  
                   main@k 0035                     main@u 003A                     _trunc 1576  
                   tablat 000FF5                     status 000FD8           __end_of_sprintf 0F68  
          __CFG_ICPRT$OFF 000000            __CFG_MCLRE$OFF 000000           __initialization 170A  
            __end_of_main 0C74              __end_of_step 16C4                    ??_main 0024  
           ___fttol@sign1 000A                    ??_step 0001             __activetblptr 000002  
                  ?_frexp 0001          __end_of___altoft 1576          __end_of___awtoft 169E  
        __end_of___ftpack 13F6                    ?_trunc 001A                    _OSCCON 000FD3  
                  _TRISC6 007CA6                    _TRISC7 007CA7            __CFG_VREGEN$ON 000000  
          __CFG_XINST$OFF 000000         __end_of_UART_Init 1094         __end_of_UART_Read 172C  
                  ___ftge 13F6       __size_of_UART_Write 000C                 ??___aldiv 0009  
                  ___wmul 16C4                 ??___ftadd 001E            __CFG_STVREN$ON 000000  
               ??___ftmul 000F                 ??___fttol 0005                 ??___lwdiv 0005  
               ??___lwmod 000C     ___ftmul@f3_as_product 0013              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
               ??_sprintf 0016                    trunc@i 001D                    trunc@x 001A  
              __accesstop 0060   __end_of__initialization 170E                ___altoft@c 0010  
         __CFG_PBADEN$OFF 000000                ___ftadd@f1 0018                ___ftadd@f2 001B  
              ___ftge@ff1 000D                ___ftge@ff2 0010             ___rparam_used 000001  
              ___awtoft@c 0009                ___ftmul@f1 0009                ___ftmul@f2 000C  
              ___fttol@f1 0001            __pcstackCOMRAM 0001             __end_of_frexp 14FE  
           __end_of_trunc 15D2                   ??_frexp 0006                   ??_trunc 001D  
__size_of_UART_Data_Ready 0008                   ?___ftge 000D                   ?___wmul 0001  
               ?___altoft 0010                 ?___awtoft 0009                 ?___ftpack 0001  
            ??_UART_Write 0001        __size_of_stopcheck 0020                   __Hparam 0000  
                 __Lparam 0000                   ___aldiv 127C           __size_of___ftge 0090  
                 ___ftadd 0C74           __size_of___wmul 0026        __end_of_UART_Write 1724  
                 ___ftmul 1188                   ___fttol 1094                   ___lwdiv 15D2  
                 ___lwmod 1624              __psmallconst 0800                ??___altoft 0014  
                 __pcinit 170A                ??___awtoft 000C                ??___ftpack 0006  
                 __ramtop 0800                   __ptext0 0810                   __ptext1 1576  
                 __ptext2 1486                   __ptext3 1094                   __ptext4 14FE  
                 __ptext5 16EA                   __ptext6 1724                   __ptext7 172C  
                 __ptext8 169E                   __ptext9 0E20                   _dpowers 0801  
        ___aldiv@dividend 0001                   main@dir 0033                   _sprintf 0E20  
                 main@pos 0043            main@resolucion 0037      end_of_initialization 170E  
           __Lmediumconst 0000          ___aldiv@quotient 000B                   postdec2 000FDD  
                 postinc2 000FDE         ??_UART_Data_Ready 0001                 _UART_Init 0F68  
               _UART_Read 1724                 _PORTDbits 000F83         __end_of_stopcheck 170A  
          UART_Write@data 0001                 _TRISDbits 000F95               ___ftmul@exp 0012  
          __end_of___ftge 1486            __end_of___wmul 16EA                ?_UART_Init 000F  
              ?_UART_Read 0001       start_initialization 170A                frexp@value 0001  
                ??___ftge 0013                  ??___wmul 0005          __CFG_LPT1OSC$OFF 000000  
       __size_of___altoft 0078         __size_of___awtoft 0038         __size_of___ftpack 00AE  
             __pbssCOMRAM 0047               sprintf@flag 0019               sprintf@prec 001A  
        ___lwdiv@dividend 0001                  ?___aldiv 0001                  ?___ftadd 0018  
                ?___ftmul 0009                  ?___fttol 0001                  ?___lwdiv 0001  
                ?___lwmod 0008               ??_UART_Init 0013               ??_UART_Read 0001  
             __smallconst 0800          ___lwdiv@quotient 0005                  ?_sprintf 0010  
          __size_of_frexp 0078                UART_Init@x 001B            __size_of_trunc 005C  
         ___aldiv@divisor 0005           ___aldiv@counter 0009            ___wmul@product 0005  
         _UART_Data_Ready 172C         UART_Init@baudrate 000F         ___wmul@multiplier 0001  
               main@steps 003E                 main@stepx 0029                 _stopcheck 16EA  
               frexp@eptr 0004                  __Hrparam 0000                  __Lrparam 0000  
        __size_of___aldiv 00CC          __size_of___ftadd 01AC                  ___altoft 14FE  
        __size_of___ftmul 00F4          __size_of___fttol 00F4          __size_of___lwdiv 0052  
        __size_of___lwmod 0042                  ___awtoft 1666                  ___ftpack 1348  
              sprintf@val 001B                ?_stopcheck 0001           ___lwdiv@divisor 0003  
         ___lwdiv@counter 0007                  __ptext10 1624                  __ptext11 15D2  
                __ptext20 127C                  __ptext12 16C4                  __ptext13 1188  
                __ptext14 13F6                  __ptext15 0C74                  __ptext16 1666  
                __ptext17 1348                  __ptext18 1718                  __ptext19 0F68  
 __end_of_UART_Data_Ready 1734          __size_of_sprintf 0148                trunc@expon 0020  
           __size_of_main 0464             __size_of_step 0026                  main@move 0041  
                main@stop 0046     __CFG_CPUDIV$OSC1_PLL2 000000                 sprintf@ap 0017  
               sprintf@sp 0010          ___lwmod@dividend 0008       __CFG_FOSC$INTOSC_EC 000000  
                sprintf@c 001D                  sprintf@f 0012           ___lwmod@divisor 000A  
         ___lwmod@counter 000C               ??_stopcheck 0001              ___aldiv@sign 000A  
              _UART_Write 1718          ?_UART_Data_Ready 0001  
