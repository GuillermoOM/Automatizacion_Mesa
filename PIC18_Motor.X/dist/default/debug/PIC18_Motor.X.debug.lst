

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Nov 29 12:50:47 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.44
    23                           ; Generated 14/09/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	smallconst
    58  000800                     __psmallconst:
    59                           	opt stack 0
    60  000800  00                 	db	0
    61  000801                     _dpowers:
    62                           	opt stack 0
    63  000801  0001               	dw	1
    64  000803  000A               	dw	10
    65  000805  0064               	dw	100
    66  000807  03E8               	dw	1000
    67  000809  2710               	dw	10000
    68  00080B                     __end_of_dpowers:
    69                           	opt stack 0
    70  0000                     _TRISDbits	set	3989
    71  0000                     _PORTDbits	set	3971
    72  0000                     _TRISC6	set	31910
    73  0000                     _TRISC7	set	31911
    74  0000                     _OSCCON	set	4051
    75  0000                     _RCREG	set	4014
    76  0000                     _TXREG	set	4013
    77  0000                     _SPBRG	set	4015
    78  0000                     _RCIF	set	31989
    79  0000                     _TRMT	set	32097
    80  0000                     _TXEN	set	32101
    81  0000                     _CREN	set	32092
    82  0000                     _SPEN	set	32095
    83  0000                     _SYNC	set	32100
    84  0000                     _BRGH	set	32098
    85  00080B                     STR_1:
    86  00080B  25                 	db	37
    87  00080C  64                 	db	100	;'d'
    88  00080D  00                 	db	0
    89                           
    90                           ; #config settings
    91  00080E  00                 	db	0	; dummy byte at the end
    92  0000                     
    93                           	psect	cinit
    94  000D8A                     __pcinit:
    95                           	opt stack 0
    96  000D8A                     start_initialization:
    97                           	opt stack 0
    98  000D8A                     __initialization:
    99                           	opt stack 0
   100  000D8A                     end_of_initialization:
   101                           	opt stack 0
   102  000D8A                     __end_of__initialization:
   103                           	opt stack 0
   104  000D8A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   105  000D8C  6EF8               	movwf	tblptru,c
   106  000D8E  0100               	movlb	0
   107  000D90  EF08  F004         	goto	_main	;jump to C main() function
   108                           tblptru	equ	0xFF8
   109                           
   110                           	psect	cstackCOMRAM
   111  000001                     __pcstackCOMRAM:
   112                           	opt stack 0
   113  000001                     ??_step:
   114  000001                     ?___lwdiv:
   115                           	opt stack 0
   116  000001                     ?___aldiv:
   117                           	opt stack 0
   118  000001                     UART_Write@data:
   119                           	opt stack 0
   120  000001                     ___lwdiv@dividend:
   121                           	opt stack 0
   122  000001                     ___aldiv@dividend:
   123                           	opt stack 0
   124                           
   125                           ; 4 bytes @ 0x0
   126  000001                     	ds	2
   127  000003                     ___lwdiv@divisor:
   128                           	opt stack 0
   129                           
   130                           ; 2 bytes @ 0x2
   131  000003                     	ds	2
   132  000005                     ___lwdiv@quotient:
   133                           	opt stack 0
   134  000005                     ___aldiv@divisor:
   135                           	opt stack 0
   136                           
   137                           ; 4 bytes @ 0x4
   138  000005                     	ds	2
   139  000007                     ___lwdiv@counter:
   140                           	opt stack 0
   141                           
   142                           ; 1 bytes @ 0x6
   143  000007                     	ds	1
   144  000008                     ?___lwmod:
   145                           	opt stack 0
   146  000008                     ___lwmod@dividend:
   147                           	opt stack 0
   148                           
   149                           ; 2 bytes @ 0x7
   150  000008                     	ds	1
   151  000009                     ___aldiv@counter:
   152                           	opt stack 0
   153                           
   154                           ; 1 bytes @ 0x8
   155  000009                     	ds	1
   156  00000A                     ___aldiv@sign:
   157                           	opt stack 0
   158  00000A                     ___lwmod@divisor:
   159                           	opt stack 0
   160                           
   161                           ; 2 bytes @ 0x9
   162  00000A                     	ds	1
   163  00000B                     ___aldiv@quotient:
   164                           	opt stack 0
   165                           
   166                           ; 4 bytes @ 0xA
   167  00000B                     	ds	1
   168  00000C                     ___lwmod@counter:
   169                           	opt stack 0
   170                           
   171                           ; 1 bytes @ 0xB
   172  00000C                     	ds	1
   173  00000D                     ?_sprintf:
   174                           	opt stack 0
   175  00000D                     sprintf@sp:
   176                           	opt stack 0
   177                           
   178                           ; 2 bytes @ 0xC
   179  00000D                     	ds	2
   180  00000F                     sprintf@f:
   181                           	opt stack 0
   182  00000F                     UART_Init@baudrate:
   183                           	opt stack 0
   184                           
   185                           ; 4 bytes @ 0xE
   186  00000F                     	ds	4
   187  000013                     ??_sprintf:
   188  000013                     ??_UART_Init:
   189                           
   190                           ; 1 bytes @ 0x12
   191  000013                     	ds	1
   192  000014                     sprintf@ap:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0x13
   196  000014                     	ds	2
   197  000016                     sprintf@flag:
   198                           	opt stack 0
   199                           
   200                           ; 1 bytes @ 0x15
   201  000016                     	ds	1
   202  000017                     sprintf@prec:
   203                           	opt stack 0
   204                           
   205                           ; 1 bytes @ 0x16
   206  000017                     	ds	1
   207  000018                     sprintf@val:
   208                           	opt stack 0
   209                           
   210                           ; 2 bytes @ 0x17
   211  000018                     	ds	2
   212  00001A                     sprintf@c:
   213                           	opt stack 0
   214                           
   215                           ; 1 bytes @ 0x19
   216  00001A                     	ds	1
   217  00001B                     UART_Init@x:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x1A
   221  00001B                     	ds	2
   222  00001D                     main@stepx:
   223                           	opt stack 0
   224                           
   225                           ; 10 bytes @ 0x1C
   226  00001D                     	ds	10
   227  000027                     main@resolucion:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x26
   231  000027                     	ds	2
   232  000029                     main@steps:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x28
   236  000029                     	ds	2
   237  00002B                     main@i:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x2A
   241  00002B                     	ds	2
   242  00002D                     main@k:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x2C
   246  00002D                     	ds	2
   247  00002F                     main@stop:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x2E
   251  00002F                     	ds	1
   252                           tblptru	equ	0xFF8
   253                           
   254 ;;
   255 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   256 ;;
   257 ;; *************** function _main *****************
   258 ;; Defined at:
   259 ;;		line 23 in file "main.c"
   260 ;; Parameters:    Size  Location     Type
   261 ;;		None
   262 ;; Auto vars:     Size  Location     Type
   263 ;;  k               2   44[COMRAM] int 
   264 ;;  i               2   42[COMRAM] int 
   265 ;;  stepx          10   28[COMRAM] unsigned char [10]
   266 ;;  steps           2   40[COMRAM] int 
   267 ;;  resolucion      2   38[COMRAM] int 
   268 ;;  stop            1   46[COMRAM] unsigned char 
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   273 ;; Tracked objects:
   274 ;;		On entry : 0/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   278 ;;      Params:         0       0       0       0       0       0       0       0       0
   279 ;;      Locals:        19       0       0       0       0       0       0       0       0
   280 ;;      Temps:          0       0       0       0       0       0       0       0       0
   281 ;;      Totals:        19       0       0       0       0       0       0       0       0
   282 ;;Total ram usage:       19 bytes
   283 ;; Hardware stack levels required when called:    2
   284 ;; This function calls:
   285 ;;		_UART_Data_Ready
   286 ;;		_UART_Init
   287 ;;		_UART_Read
   288 ;;		_UART_Write
   289 ;;		_sprintf
   290 ;;		_step
   291 ;;		_stopcheck
   292 ;; This function is called by:
   293 ;;		Startup code after reset
   294 ;; This function uses a non-reentrant model
   295 ;;
   296                           
   297                           	psect	text0
   298  000810                     __ptext0:
   299                           	opt stack 0
   300  000810                     _main:
   301                           	opt stack 29
   302                           
   303                           ;main.c: 24: int steps = 0;
   304                           
   305                           ;incstack = 0
   306  000810  0E00               	movlw	0
   307  000812  6E2A               	movwf	main@steps+1,c
   308  000814  0E00               	movlw	0
   309  000816  6E29               	movwf	main@steps,c
   310                           
   311                           ;main.c: 25: int resolucion = 1;
   312  000818  0E00               	movlw	0
   313  00081A  6E28               	movwf	main@resolucion+1,c
   314  00081C  0E01               	movlw	1
   315  00081E  6E27               	movwf	main@resolucion,c
   316                           
   317                           ;main.c: 26: char stop = 0;
   318  000820  0E00               	movlw	0
   319  000822  6E2F               	movwf	main@stop,c
   320                           
   321                           ;main.c: 27: char stepx[10];
   322                           ;main.c: 28: OSCCON = 0b01111110;
   323  000824  0E7E               	movlw	126
   324  000826  6ED3               	movwf	4051,c	;volatile
   325                           
   326                           ;main.c: 29: TRISDbits.RD3 = 1;
   327  000828  8695               	bsf	3989,3,c	;volatile
   328                           
   329                           ;main.c: 30: TRISDbits.RD2 = 1;
   330  00082A  8495               	bsf	3989,2,c	;volatile
   331                           
   332                           ;main.c: 31: TRISDbits.RD1 = 0;
   333  00082C  9295               	bcf	3989,1,c	;volatile
   334                           
   335                           ;main.c: 32: TRISDbits.RD0 = 0;
   336  00082E  9095               	bcf	3989,0,c	;volatile
   337                           
   338                           ;main.c: 33: UART_Init(9600);
   339  000830  0E80               	movlw	128
   340  000832  6E0F               	movwf	UART_Init@baudrate,c
   341  000834  0E25               	movlw	37
   342  000836  6E10               	movwf	UART_Init@baudrate+1,c
   343  000838  0E00               	movlw	0
   344  00083A  6E11               	movwf	UART_Init@baudrate+2,c
   345  00083C  0E00               	movlw	0
   346  00083E  6E12               	movwf	UART_Init@baudrate+3,c
   347  000840  EC54  F005         	call	_UART_Init	;wreg free
   348  000844                     
   349                           ;main.c: 36: if (UART_Data_Ready()) {
   350  000844  ECCE  F006         	call	_UART_Data_Ready	;wreg free
   351  000848  0900               	iorlw	0
   352  00084A  A4D8               	btfss	status,2,c
   353  00084C  D080               	goto	l85
   354  00084E  D7FA               	goto	l83
   355  000850                     
   356                           ;main.c: 39: steps = 0;
   357  000850  0E00               	movlw	0
   358  000852  6E2A               	movwf	main@steps+1,c
   359  000854  0E00               	movlw	0
   360  000856  6E29               	movwf	main@steps,c
   361                           
   362                           ;main.c: 40: PORTDbits.RD0 = 1;
   363  000858  8083               	bsf	3971,0,c	;volatile
   364                           
   365                           ;main.c: 41: while (!PORTDbits.RD2) {
   366  00085A  D00A               	goto	l87
   367  00085C                     
   368                           ;main.c: 42: if (stopcheck()) {
   369  00085C  ECAF  F006         	call	_stopcheck	;wreg free
   370  000860  0900               	iorlw	0
   371  000862  B4D8               	btfsc	status,2,c
   372  000864  D003               	goto	l89
   373                           
   374                           ;main.c: 43: stop = 1;
   375  000866  0E01               	movlw	1
   376  000868  6E2F               	movwf	main@stop,c
   377                           
   378                           ;main.c: 44: break;
   379  00086A  D004               	goto	u760
   380  00086C                     l89:
   381                           
   382                           ;main.c: 45: }
   383                           ;main.c: 46: step();
   384  00086C  EC9A  F006         	call	_step	;wreg free
   385  000870                     l87:
   386  000870  A483               	btfss	3971,2,c	;volatile
   387  000872  D7F4               	goto	l88
   388  000874                     u760:
   389                           
   390                           ;main.c: 47: }
   391                           ;main.c: 48: PORTDbits.RD0 = 0;
   392  000874  9083               	bcf	3971,0,c	;volatile
   393                           
   394                           ;main.c: 49: if (!stop) {
   395  000876  502F               	movf	main@stop,w,c
   396  000878  B4D8               	btfsc	status,2,c
   397  00087A  D00F               	goto	l92
   398  00087C  D039               	goto	u810
   399  00087E                     
   400                           ;main.c: 51: if (stopcheck()) {
   401  00087E  ECAF  F006         	call	_stopcheck	;wreg free
   402  000882  0900               	iorlw	0
   403  000884  B4D8               	btfsc	status,2,c
   404  000886  D003               	goto	l94
   405                           
   406                           ;main.c: 52: stop = 1;
   407  000888  0E01               	movlw	1
   408  00088A  6E2F               	movwf	main@stop,c
   409                           
   410                           ;main.c: 53: break;
   411  00088C  D008               	goto	u790
   412  00088E                     l94:
   413                           
   414                           ;main.c: 54: }
   415                           ;main.c: 55: step();
   416  00088E  EC9A  F006         	call	_step	;wreg free
   417                           
   418                           ;main.c: 56: steps += resolucion;
   419  000892  5027               	movf	main@resolucion,w,c
   420  000894  2629               	addwf	main@steps,f,c
   421  000896  5028               	movf	main@resolucion+1,w,c
   422  000898  222A               	addwfc	main@steps+1,f,c
   423  00089A                     l92:
   424  00089A  A683               	btfss	3971,3,c	;volatile
   425  00089C  D7F0               	goto	l93
   426  00089E                     u790:
   427                           
   428                           ;main.c: 57: }
   429                           ;main.c: 58: sprintf(stepx, "%d", steps);
   430  00089E  0E1D               	movlw	low main@stepx
   431  0008A0  6E0D               	movwf	sprintf@sp,c
   432  0008A2  0E00               	movlw	high main@stepx
   433  0008A4  6E0E               	movwf	sprintf@sp+1,c
   434  0008A6  0E0B               	movlw	low STR_1
   435  0008A8  6E0F               	movwf	sprintf@f,c
   436  0008AA  0E08               	movlw	high STR_1
   437  0008AC  6E10               	movwf	sprintf@f+1,c
   438  0008AE  C029  F011         	movff	main@steps,?_sprintf+4
   439  0008B2  C02A  F012         	movff	main@steps+1,?_sprintf+5
   440  0008B6  ECB0  F004         	call	_sprintf	;wreg free
   441                           
   442                           ;main.c: 59: UART_Write('d');
   443  0008BA  0E64               	movlw	100
   444  0008BC  ECBF  F006         	call	_UART_Write
   445                           
   446                           ;main.c: 60: for (int k = 0; k < 10; k++)UART_Write(stepx[k]);
   447  0008C0  0E00               	movlw	0
   448  0008C2  6E2E               	movwf	main@k+1,c
   449  0008C4  0E00               	movlw	0
   450  0008C6  6E2D               	movwf	main@k,c
   451  0008C8                     l1262:
   452  0008C8  BE2E               	btfsc	main@k+1,7,c
   453  0008CA  D006               	goto	l96
   454  0008CC  502E               	movf	main@k+1,w,c
   455  0008CE  E110               	bnz	l1272
   456  0008D0  0E0A               	movlw	10
   457  0008D2  5C2D               	subwf	main@k,w,c
   458  0008D4  B0D8               	btfsc	status,0,c
   459  0008D6  D00C               	goto	u810
   460  0008D8                     l96:
   461  0008D8  0E1D               	movlw	low main@stepx
   462  0008DA  242D               	addwf	main@k,w,c
   463  0008DC  6ED9               	movwf	fsr2l,c
   464  0008DE  0E00               	movlw	high main@stepx
   465  0008E0  202E               	addwfc	main@k+1,w,c
   466  0008E2  6EDA               	movwf	fsr2h,c
   467  0008E4  50DF               	movf	indf2,w,c
   468  0008E6  ECBF  F006         	call	_UART_Write
   469  0008EA  4A2D               	infsnz	main@k,f,c
   470  0008EC  2A2E               	incf	main@k+1,f,c
   471  0008EE  D7EC               	goto	l1262
   472  0008F0                     u810:
   473  0008F0                     l1272:
   474                           
   475                           ;main.c: 61: }
   476                           ;main.c: 62: if (stop)UART_Write('e');
   477  0008F0  502F               	movf	main@stop,w,c
   478  0008F2  B4D8               	btfsc	status,2,c
   479  0008F4  D029               	goto	l105
   480  0008F6  0E65               	movlw	101
   481  0008F8  ECBF  F006         	call	_UART_Write
   482  0008FC  D025               	goto	l105
   483  0008FE                     
   484                           ;main.c: 66: for (int i = 0; i < 5; i++) {
   485  0008FE  0E00               	movlw	0
   486  000900  6E2C               	movwf	main@i+1,c
   487  000902  0E00               	movlw	0
   488  000904  6E2B               	movwf	main@i,c
   489  000906                     l1280:
   490  000906  BE2C               	btfsc	main@i+1,7,c
   491  000908  D006               	goto	l101
   492  00090A  502C               	movf	main@i+1,w,c
   493  00090C  E111               	bnz	l1294
   494  00090E  0E05               	movlw	5
   495  000910  5C2B               	subwf	main@i,w,c
   496  000912  B0D8               	btfsc	status,0,c
   497  000914  D00D               	goto	u850
   498  000916                     l101:
   499                           
   500                           ;main.c: 67: step();
   501  000916  EC9A  F006         	call	_step	;wreg free
   502                           
   503                           ;main.c: 68: if (stopcheck()) {
   504  00091A  ECAF  F006         	call	_stopcheck	;wreg free
   505  00091E  0900               	iorlw	0
   506  000920  B4D8               	btfsc	status,2,c
   507  000922  D003               	goto	l103
   508                           
   509                           ;main.c: 69: stop = 1;
   510  000924  0E01               	movlw	1
   511  000926  6E2F               	movwf	main@stop,c
   512                           
   513                           ;main.c: 70: break;
   514  000928  D003               	goto	u850
   515  00092A                     l103:
   516  00092A  4A2B               	infsnz	main@i,f,c
   517  00092C  2A2C               	incf	main@i+1,f,c
   518  00092E  D7EB               	goto	l1280
   519  000930                     u850:
   520  000930                     l1294:
   521                           
   522                           ;main.c: 71: }
   523                           ;main.c: 72: }
   524                           ;main.c: 73: if (!stop)UART_Write('d');
   525  000930  502F               	movf	main@stop,w,c
   526  000932  A4D8               	btfss	status,2,c
   527  000934  D003               	goto	l104
   528  000936  0E64               	movlw	100
   529  000938  ECBF  F006         	call	_UART_Write
   530  00093C                     l104:
   531                           
   532                           ;main.c: 74: if (stop)UART_Write('e');
   533  00093C  502F               	movf	main@stop,w,c
   534  00093E  B4D8               	btfsc	status,2,c
   535  000940  D003               	goto	l105
   536  000942  0E65               	movlw	101
   537  000944  ECBF  F006         	call	_UART_Write
   538  000948                     l105:
   539                           
   540                           ;main.c: 75: stop = 0;
   541  000948  0E00               	movlw	0
   542  00094A  6E2F               	movwf	main@stop,c
   543                           
   544                           ;main.c: 77: }
   545                           
   546                           ;main.c: 76: break;
   547  00094C  D77B               	goto	l83
   548  00094E                     l85:
   549  00094E  ECCA  F006         	call	_UART_Read	;wreg free
   550                           
   551                           ; Switch size 1, requested type "space"
   552                           ; Number of cases is 2, Range of values is 97 to 99
   553                           ; switch strategies available:
   554                           ; Name         Instructions Cycles
   555                           ; simple_byte            7     4 (average)
   556                           ;	Chosen strategy is simple_byte
   557  000952  0A61               	xorlw	97	; case 97
   558  000954  B4D8               	btfsc	status,2,c
   559  000956  D7D3               	goto	l100
   560  000958  0A02               	xorlw	2	; case 99
   561  00095A  B4D8               	btfsc	status,2,c
   562  00095C  D779               	goto	l86
   563  00095E  D772               	goto	l83
   564  000960                     __end_of_main:
   565                           	opt stack 0
   566                           tblptru	equ	0xFF8
   567                           indf2	equ	0xFDF
   568                           fsr2h	equ	0xFDA
   569                           fsr2l	equ	0xFD9
   570                           status	equ	0xFD8
   571                           
   572 ;; *************** function _stopcheck *****************
   573 ;; Defined at:
   574 ;;		line 14 in file "main.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      unsigned char 
   581 ;; Registers used:
   582 ;;		wreg, status,2, cstack
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   588 ;;      Params:         0       0       0       0       0       0       0       0       0
   589 ;;      Locals:         0       0       0       0       0       0       0       0       0
   590 ;;      Temps:          0       0       0       0       0       0       0       0       0
   591 ;;      Totals:         0       0       0       0       0       0       0       0       0
   592 ;;Total ram usage:        0 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; Hardware stack levels required when called:    1
   595 ;; This function calls:
   596 ;;		_UART_Data_Ready
   597 ;;		_UART_Read
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text1
   604  000D5E                     __ptext1:
   605                           	opt stack 0
   606  000D5E                     _stopcheck:
   607                           	opt stack 29
   608                           
   609                           ;main.c: 15: if (UART_Data_Ready()) {
   610                           
   611                           ;incstack = 0
   612  000D5E  ECCE  F006         	call	_UART_Data_Ready	;wreg free
   613  000D62  0900               	iorlw	0
   614  000D64  B4D8               	btfsc	status,2,c
   615  000D66  D009               	goto	l78
   616                           
   617                           ;main.c: 16: if (UART_Read() == 's') {
   618  000D68  ECCA  F006         	call	_UART_Read	;wreg free
   619  000D6C  0A73               	xorlw	115
   620  000D6E  A4D8               	btfss	status,2,c
   621  000D70  D002               	goto	l76
   622                           
   623                           ;main.c: 17: return 1;
   624  000D72  0E01               	movlw	1
   625  000D74  0012               	return	
   626  000D76                     l76:
   627  000D76  0E00               	movlw	0
   628  000D78  0012               	return	
   629  000D7A                     l78:
   630                           
   631                           ;main.c: 19: }
   632                           ;main.c: 20: return 0;
   633  000D7A  0E00               	movlw	0
   634  000D7C  0012               	return	
   635  000D7E                     __end_of_stopcheck:
   636                           	opt stack 0
   637                           tblptru	equ	0xFF8
   638                           indf2	equ	0xFDF
   639                           fsr2h	equ	0xFDA
   640                           fsr2l	equ	0xFD9
   641                           status	equ	0xFD8
   642                           
   643 ;; *************** function _UART_Read *****************
   644 ;; Defined at:
   645 ;;		line 40 in file "UART.h"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      unsigned char 
   652 ;; Registers used:
   653 ;;		wreg, status,2
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   659 ;;      Params:         0       0       0       0       0       0       0       0       0
   660 ;;      Locals:         0       0       0       0       0       0       0       0       0
   661 ;;      Temps:          0       0       0       0       0       0       0       0       0
   662 ;;      Totals:         0       0       0       0       0       0       0       0       0
   663 ;;Total ram usage:        0 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_stopcheck
   669 ;;		_main
   670 ;;		_UART_Read_Text
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text2
   675  000D94                     __ptext2:
   676                           	opt stack 0
   677  000D94                     _UART_Read:
   678                           	opt stack 29
   679                           
   680                           ;UART.h: 41: while (!RCIF);
   681                           
   682                           ;incstack = 0
   683  000D94  AA9E               	btfss	3998,5,c	;volatile
   684  000D96  D7FE               	goto	_UART_Read
   685                           
   686                           ;UART.h: 42: return RCREG;
   687  000D98  50AE               	movf	4014,w,c	;volatile
   688  000D9A  0012               	return	
   689  000D9C                     __end_of_UART_Read:
   690                           	opt stack 0
   691                           tblptru	equ	0xFF8
   692                           indf2	equ	0xFDF
   693                           fsr2h	equ	0xFDA
   694                           fsr2l	equ	0xFD9
   695                           status	equ	0xFD8
   696                           
   697 ;; *************** function _UART_Data_Ready *****************
   698 ;; Defined at:
   699 ;;		line 36 in file "UART.h"
   700 ;; Parameters:    Size  Location     Type
   701 ;;		None
   702 ;; Auto vars:     Size  Location     Type
   703 ;;		None
   704 ;; Return value:  Size  Location     Type
   705 ;;                  1    wreg      unsigned char 
   706 ;; Registers used:
   707 ;;		wreg
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   713 ;;      Params:         0       0       0       0       0       0       0       0       0
   714 ;;      Locals:         0       0       0       0       0       0       0       0       0
   715 ;;      Temps:          0       0       0       0       0       0       0       0       0
   716 ;;      Totals:         0       0       0       0       0       0       0       0       0
   717 ;;Total ram usage:        0 bytes
   718 ;; Hardware stack levels used:    1
   719 ;; This function calls:
   720 ;;		Nothing
   721 ;; This function is called by:
   722 ;;		_stopcheck
   723 ;;		_main
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           	psect	text3
   728  000D9C                     __ptext3:
   729                           	opt stack 0
   730  000D9C                     _UART_Data_Ready:
   731                           	opt stack 29
   732                           
   733                           ;UART.h: 37: return RCIF;
   734                           
   735                           ;incstack = 0
   736  000D9C  0E00               	movlw	0
   737  000D9E  BA9E               	btfsc	3998,5,c	;volatile
   738  000DA0  0E01               	movlw	1
   739  000DA2  0012               	return	
   740  000DA4                     __end_of_UART_Data_Ready:
   741                           	opt stack 0
   742                           tblptru	equ	0xFF8
   743                           indf2	equ	0xFDF
   744                           fsr2h	equ	0xFDA
   745                           fsr2l	equ	0xFD9
   746                           status	equ	0xFD8
   747                           
   748 ;; *************** function _step *****************
   749 ;; Defined at:
   750 ;;		line 9 in file "main.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;		None
   755 ;; Return value:  Size  Location     Type
   756 ;;                  1    wreg      void 
   757 ;; Registers used:
   758 ;;		wreg, status,2, status,0
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   764 ;;      Params:         0       0       0       0       0       0       0       0       0
   765 ;;      Locals:         0       0       0       0       0       0       0       0       0
   766 ;;      Temps:          1       0       0       0       0       0       0       0       0
   767 ;;      Totals:         1       0       0       0       0       0       0       0       0
   768 ;;Total ram usage:        1 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; This function calls:
   771 ;;		Nothing
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text4
   778  000D34                     __ptext4:
   779                           	opt stack 0
   780  000D34                     _step:
   781                           	opt stack 30
   782                           
   783                           ;main.c: 10: PORTDbits.RD1 = ~PORTDbits.RD1;
   784                           
   785                           ;incstack = 0
   786  000D34  A283               	btfss	3971,1,c	;volatile
   787  000D36  D002               	goto	u210
   788  000D38  0E01               	movlw	1
   789  000D3A  D001               	goto	u216
   790  000D3C                     u210:
   791  000D3C  0E00               	movlw	0
   792  000D3E                     u216:
   793  000D3E  0AFF               	xorlw	255
   794  000D40  6E01               	movwf	??_step& (0+255),c
   795  000D42  4601               	rlncf	??_step,f,c
   796  000D44  5083               	movf	3971,w,c	;volatile
   797  000D46  1801               	xorwf	??_step,w,c
   798  000D48  0BFD               	andlw	-3
   799  000D4A  1801               	xorwf	??_step,w,c
   800  000D4C  6E83               	movwf	3971,c	;volatile
   801                           
   802                           ;main.c: 11: _delay((unsigned long)((1)*(8000000/4000.0)));
   803  000D4E  0E03               	movlw	3
   804  000D50  6E01               	movwf	??_step& (0+255),c
   805  000D52  0E98               	movlw	152
   806  000D54                     u887:
   807  000D54  2EE8               	decfsz	wreg,f,c
   808  000D56  D7FE               	bra	u887
   809  000D58  2E01               	decfsz	??_step& (0+255),f,c
   810  000D5A  D7FC               	bra	u887
   811  000D5C  0012               	return		;funcret
   812  000D5E                     __end_of_step:
   813                           	opt stack 0
   814                           tblptru	equ	0xFF8
   815                           wreg	equ	0xFE8
   816                           indf2	equ	0xFDF
   817                           fsr2h	equ	0xFDA
   818                           fsr2l	equ	0xFD9
   819                           status	equ	0xFD8
   820                           
   821 ;; *************** function _sprintf *****************
   822 ;; Defined at:
   823 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;  sp              2   12[COMRAM] PTR unsigned char 
   826 ;;		 -> main@stepx(10), 
   827 ;;  f               2   14[COMRAM] PTR const unsigned char 
   828 ;;		 -> STR_1(3), 
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  tmpval          4    0        struct .
   831 ;;  cp              3    0        PTR const unsigned char 
   832 ;;  val             2   23[COMRAM] unsigned int 
   833 ;;  ap              2   19[COMRAM] PTR void [1]
   834 ;;		 -> ?_sprintf(2), 
   835 ;;  len             2    0        unsigned int 
   836 ;;  c               1   25[COMRAM] char 
   837 ;;  prec            1   22[COMRAM] char 
   838 ;;  flag            1   21[COMRAM] unsigned char 
   839 ;; Return value:  Size  Location     Type
   840 ;;                  2   12[COMRAM] int 
   841 ;; Registers used:
   842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   848 ;;      Params:         6       0       0       0       0       0       0       0       0
   849 ;;      Locals:         7       0       0       0       0       0       0       0       0
   850 ;;      Temps:          1       0       0       0       0       0       0       0       0
   851 ;;      Totals:        14       0       0       0       0       0       0       0       0
   852 ;;Total ram usage:       14 bytes
   853 ;; Hardware stack levels used:    1
   854 ;; Hardware stack levels required when called:    1
   855 ;; This function calls:
   856 ;;		___lwdiv
   857 ;;		___lwmod
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text5
   864  000960                     __ptext5:
   865                           	opt stack 0
   866  000960                     _sprintf:
   867                           	opt stack 29
   868                           
   869                           ;doprnt.c: 494: va_list ap;
   870                           ;doprnt.c: 499: signed char c;
   871                           ;doprnt.c: 506: signed char prec;
   872                           ;doprnt.c: 508: unsigned char flag;
   873                           ;doprnt.c: 523: union {
   874                           ;doprnt.c: 524: unsigned long vd;
   875                           ;doprnt.c: 525: double integ;
   876                           ;doprnt.c: 526: } tmpval;
   877                           ;doprnt.c: 528: unsigned int val;
   878                           ;doprnt.c: 529: unsigned len;
   879                           ;doprnt.c: 530: const char * cp;
   880                           ;doprnt.c: 533: *ap = __va_start();
   881                           
   882                           ;incstack = 0
   883  000960  0E11               	movlw	low (?_sprintf+4)
   884  000962  6E14               	movwf	sprintf@ap,c
   885  000964  0E00               	movlw	high (?_sprintf+4)
   886  000966  6E15               	movwf	sprintf@ap+1,c
   887                           
   888                           ;doprnt.c: 536: while(c = *f++) {
   889  000968  D08C               	goto	u720
   890  00096A                     
   891                           ;doprnt.c: 538: if(c != '%')
   892  00096A  0E25               	movlw	37
   893  00096C  181A               	xorwf	sprintf@c,w,c
   894  00096E  B4D8               	btfsc	status,2,c
   895  000970  D009               	goto	l119
   896                           
   897                           ;doprnt.c: 540: {
   898                           ;doprnt.c: 541: ((*sp++ = (c)));
   899  000972  C00D  FFD9         	movff	sprintf@sp,fsr2l
   900  000976  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   901  00097A  C01A  FFDF         	movff	sprintf@c,indf2
   902  00097E  4A0D               	infsnz	sprintf@sp,f,c
   903  000980  2A0E               	incf	sprintf@sp+1,f,c
   904                           
   905                           ;doprnt.c: 542: continue;
   906  000982  D07F               	goto	u720
   907  000984                     l119:
   908                           
   909                           ;doprnt.c: 543: }
   910                           ;doprnt.c: 548: flag = 0;
   911  000984  0E00               	movlw	0
   912  000986  6E16               	movwf	sprintf@flag,c
   913                           
   914                           ;doprnt.c: 822: }
   915                           
   916                           ;doprnt.c: 813: continue;
   917                           
   918                           ;doprnt.c: 802: default:
   919                           
   920                           ;doprnt.c: 698: case 'i':
   921                           ;doprnt.c: 699: break;
   922                           
   923                           ;doprnt.c: 697: case 'd':
   924                           
   925                           ;doprnt.c: 638: goto alldone;
   926                           
   927                           ;doprnt.c: 637: case 0:
   928                           
   929                           ;doprnt.c: 635: switch(c = *f++) {
   930  000988  C00F  FFF6         	movff	sprintf@f,tblptrl
   931  00098C  C010  FFF7         	movff	sprintf@f+1,tblptrh
   932  000990  4A0F               	infsnz	sprintf@f,f,c
   933  000992  2A10               	incf	sprintf@f+1,f,c
   934  000994                     	if	0	;tblptru may be non-zero
   935  000994                     	endif
   936  000994                     	if	0	;tblptru may be non-zero
   937  000994                     	endif
   938  000994  0008               	tblrd		*
   939  000996  CFF5 F01A          	movff	tablat,sprintf@c
   940  00099A  501A               	movf	sprintf@c,w,c
   941                           
   942                           ; Switch size 1, requested type "space"
   943                           ; Number of cases is 3, Range of values is 0 to 105
   944                           ; switch strategies available:
   945                           ; Name         Instructions Cycles
   946                           ; simple_byte           10     6 (average)
   947                           ;	Chosen strategy is simple_byte
   948  00099C  0A00               	xorlw	0	; case 0
   949  00099E  B4D8               	btfsc	status,2,c
   950  0009A0  D07C               	goto	u730
   951  0009A2  0A64               	xorlw	100	; case 100
   952  0009A4  B4D8               	btfsc	status,2,c
   953  0009A6  D003               	goto	l125
   954  0009A8  0A0D               	xorlw	13	; case 105
   955  0009AA  A4D8               	btfss	status,2,c
   956  0009AC  D06A               	goto	u720
   957  0009AE                     l125:
   958                           
   959                           ;doprnt.c: 1253: {
   960                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   961  0009AE  C014  FFD9         	movff	sprintf@ap,fsr2l
   962  0009B2  C015  FFDA         	movff	sprintf@ap+1,fsr2h
   963  0009B6  CFDE F018          	movff	postinc2,sprintf@val
   964  0009BA  CFDD F019          	movff	postdec2,sprintf@val+1
   965  0009BE  0E02               	movlw	2
   966  0009C0  2614               	addwf	sprintf@ap,f,c
   967  0009C2  0E00               	movlw	0
   968  0009C4  2215               	addwfc	sprintf@ap+1,f,c
   969                           
   970                           ;doprnt.c: 1261: if((int)val < 0) {
   971  0009C6  AE19               	btfss	sprintf@val+1,7,c
   972  0009C8  D006               	goto	l127
   973                           
   974                           ;doprnt.c: 1262: flag |= 0x03;
   975  0009CA  0E03               	movlw	3
   976  0009CC  1216               	iorwf	sprintf@flag,f,c
   977                           
   978                           ;doprnt.c: 1263: val = -val;
   979  0009CE  6C18               	negf	sprintf@val,c
   980  0009D0  1E19               	comf	sprintf@val+1,f,c
   981  0009D2  B0D8               	btfsc	status,0,c
   982  0009D4  2A19               	incf	sprintf@val+1,f,c
   983  0009D6                     l127:
   984                           
   985                           ;doprnt.c: 1264: }
   986                           ;doprnt.c: 1266: }
   987                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   988  0009D6  0E01               	movlw	1
   989  0009D8  6E1A               	movwf	sprintf@c,c
   990  0009DA                     l1180:
   991  0009DA  0E05               	movlw	5
   992  0009DC  181A               	xorwf	sprintf@c,w,c
   993  0009DE  B4D8               	btfsc	status,2,c
   994  0009E0  D012               	goto	u700
   995                           
   996                           ;doprnt.c: 1306: if(val < dpowers[c])
   997  0009E2  501A               	movf	sprintf@c,w,c
   998  0009E4  0D02               	mullw	2
   999  0009E6  0E01               	movlw	low _dpowers
  1000  0009E8  24F3               	addwf	prodl,w,c
  1001  0009EA  6EF6               	movwf	tblptrl,c
  1002  0009EC  0E08               	movlw	high _dpowers
  1003  0009EE  20F4               	addwfc	prodh,w,c
  1004  0009F0  6EF7               	movwf	tblptrh,c
  1005  0009F2                     	if	0	;There are less than 3 active tblptr bytes
  1006  0009F2                     	endif
  1007  0009F2  0009               	tblrd		*+
  1008  0009F4  50F5               	movf	tablat,w,c
  1009  0009F6  5C18               	subwf	sprintf@val,w,c
  1010  0009F8  0009               	tblrd		*+
  1011  0009FA  50F5               	movf	tablat,w,c
  1012  0009FC  5819               	subwfb	sprintf@val+1,w,c
  1013  0009FE  A0D8               	btfss	status,0,c
  1014  000A00  D002               	goto	u700
  1015                           
  1016                           ;doprnt.c: 1307: break;
  1017  000A02  2A1A               	incf	sprintf@c,f,c
  1018  000A04  D7EA               	goto	l1180
  1019  000A06                     u700:
  1020                           
  1021                           ;doprnt.c: 1422: {
  1022                           ;doprnt.c: 1438: if(flag & 0x03)
  1023  000A06  C016  F013         	movff	sprintf@flag,??_sprintf
  1024  000A0A  0E03               	movlw	3
  1025  000A0C  1613               	andwf	??_sprintf,f,c
  1026  000A0E  B4D8               	btfsc	status,2,c
  1027  000A10  D008               	goto	l131
  1028                           
  1029                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1030  000A12  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1031  000A16  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1032  000A1A  0E2D               	movlw	45
  1033  000A1C  6EDF               	movwf	indf2,c
  1034  000A1E  4A0D               	infsnz	sprintf@sp,f,c
  1035  000A20  2A0E               	incf	sprintf@sp+1,f,c
  1036  000A22                     l131:
  1037                           
  1038                           ;doprnt.c: 1469: }
  1039                           ;doprnt.c: 1472: prec = c;
  1040  000A22  C01A  F017         	movff	sprintf@c,sprintf@prec
  1041                           
  1042                           ;doprnt.c: 1474: while(prec--) {
  1043  000A26  D029               	goto	l132
  1044  000A28                     
  1045                           ;doprnt.c: 1478: {
  1046                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1047  000A28  5017               	movf	sprintf@prec,w,c
  1048  000A2A  0D02               	mullw	2
  1049  000A2C  0E01               	movlw	low _dpowers
  1050  000A2E  24F3               	addwf	prodl,w,c
  1051  000A30  6EF6               	movwf	tblptrl,c
  1052  000A32  0E08               	movlw	high _dpowers
  1053  000A34  20F4               	addwfc	prodh,w,c
  1054  000A36  6EF7               	movwf	tblptrh,c
  1055  000A38                     	if	0	;There are less than 3 active tblptr bytes
  1056  000A38                     	endif
  1057  000A38  0009               	tblrd		*+
  1058  000A3A  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1059  000A3E  000A               	tblrd		*-
  1060  000A40  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1061  000A44  C018  F001         	movff	sprintf@val,___lwdiv@dividend
  1062  000A48  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1063  000A4C  EC50  F006         	call	___lwdiv	;wreg free
  1064  000A50  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1065  000A54  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1066  000A58  0E00               	movlw	0
  1067  000A5A  6E0B               	movwf	___lwmod@divisor+1,c
  1068  000A5C  0E0A               	movlw	10
  1069  000A5E  6E0A               	movwf	___lwmod@divisor,c
  1070  000A60  EC79  F006         	call	___lwmod	;wreg free
  1071  000A64  5008               	movf	?___lwmod,w,c
  1072  000A66  0F30               	addlw	48
  1073  000A68  6E1A               	movwf	sprintf@c,c
  1074                           
  1075                           ;doprnt.c: 1523: }
  1076                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1077  000A6A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1078  000A6E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1079  000A72  C01A  FFDF         	movff	sprintf@c,indf2
  1080  000A76  4A0D               	infsnz	sprintf@sp,f,c
  1081  000A78  2A0E               	incf	sprintf@sp+1,f,c
  1082  000A7A                     l132:
  1083  000A7A  0617               	decf	sprintf@prec,f,c
  1084  000A7C  2817               	incf	sprintf@prec,w,c
  1085  000A7E  A4D8               	btfss	status,2,c
  1086  000A80  D7D3               	goto	l133
  1087  000A82                     u720:
  1088  000A82  C00F  FFF6         	movff	sprintf@f,tblptrl
  1089  000A86  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1090  000A8A  4A0F               	infsnz	sprintf@f,f,c
  1091  000A8C  2A10               	incf	sprintf@f+1,f,c
  1092  000A8E                     	if	0	;tblptru may be non-zero
  1093  000A8E                     	endif
  1094  000A8E                     	if	0	;tblptru may be non-zero
  1095  000A8E                     	endif
  1096  000A8E  0008               	tblrd		*
  1097  000A90  CFF5 F01A          	movff	tablat,sprintf@c
  1098  000A94  501A               	movf	sprintf@c,w,c
  1099  000A96  A4D8               	btfss	status,2,c
  1100  000A98  D768               	goto	l118
  1101  000A9A                     u730:
  1102                           
  1103                           ;doprnt.c: 1538: *sp = 0;
  1104                           
  1105                           ;doprnt.c: 1525: }
  1106                           ;doprnt.c: 1533: }
  1107                           ;doprnt.c: 1535: alldone:
  1108  000A9A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1109  000A9E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1110  000AA2  0E00               	movlw	0
  1111  000AA4  6EDF               	movwf	indf2,c
  1112  000AA6  0012               	return	
  1113  000AA8                     __end_of_sprintf:
  1114                           	opt stack 0
  1115                           tblptru	equ	0xFF8
  1116                           tblptrh	equ	0xFF7
  1117                           tblptrl	equ	0xFF6
  1118                           tablat	equ	0xFF5
  1119                           prodh	equ	0xFF4
  1120                           prodl	equ	0xFF3
  1121                           wreg	equ	0xFE8
  1122                           indf2	equ	0xFDF
  1123                           postinc2	equ	0xFDE
  1124                           postdec2	equ	0xFDD
  1125                           fsr2h	equ	0xFDA
  1126                           fsr2l	equ	0xFD9
  1127                           status	equ	0xFD8
  1128                           
  1129 ;; *************** function ___lwmod *****************
  1130 ;; Defined at:
  1131 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;  dividend        2    7[COMRAM] unsigned int 
  1134 ;;  divisor         2    9[COMRAM] unsigned int 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;  counter         1   11[COMRAM] unsigned char 
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  2    7[COMRAM] unsigned int 
  1139 ;; Registers used:
  1140 ;;		wreg, status,2, status,0
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1146 ;;      Params:         4       0       0       0       0       0       0       0       0
  1147 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1149 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1150 ;;Total ram usage:        5 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_sprintf
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text6
  1160  000CF2                     __ptext6:
  1161                           	opt stack 0
  1162  000CF2                     ___lwmod:
  1163                           	opt stack 29
  1164                           
  1165                           ;incstack = 0
  1166  000CF2  500A               	movf	___lwmod@divisor,w,c
  1167  000CF4  100B               	iorwf	___lwmod@divisor+1,w,c
  1168  000CF6  B4D8               	btfsc	status,2,c
  1169  000CF8  D018               	goto	l555
  1170  000CFA  0E01               	movlw	1
  1171  000CFC  6E0C               	movwf	___lwmod@counter,c
  1172  000CFE  D004               	goto	l550
  1173  000D00  90D8               	bcf	status,0,c
  1174  000D02  360A               	rlcf	___lwmod@divisor,f,c
  1175  000D04  360B               	rlcf	___lwmod@divisor+1,f,c
  1176  000D06  2A0C               	incf	___lwmod@counter,f,c
  1177  000D08                     l550:
  1178  000D08  AE0B               	btfss	___lwmod@divisor+1,7,c
  1179  000D0A  D7FA               	goto	l551
  1180  000D0C                     u580:
  1181  000D0C  500A               	movf	___lwmod@divisor,w,c
  1182  000D0E  5C08               	subwf	___lwmod@dividend,w,c
  1183  000D10  500B               	movf	___lwmod@divisor+1,w,c
  1184  000D12  5809               	subwfb	___lwmod@dividend+1,w,c
  1185  000D14  A0D8               	btfss	status,0,c
  1186  000D16  D004               	goto	l554
  1187  000D18  500A               	movf	___lwmod@divisor,w,c
  1188  000D1A  5E08               	subwf	___lwmod@dividend,f,c
  1189  000D1C  500B               	movf	___lwmod@divisor+1,w,c
  1190  000D1E  5A09               	subwfb	___lwmod@dividend+1,f,c
  1191  000D20                     l554:
  1192  000D20  90D8               	bcf	status,0,c
  1193  000D22  320B               	rrcf	___lwmod@divisor+1,f,c
  1194  000D24  320A               	rrcf	___lwmod@divisor,f,c
  1195  000D26  2E0C               	decfsz	___lwmod@counter,f,c
  1196  000D28  D7F1               	goto	u580
  1197  000D2A                     l555:
  1198  000D2A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1199  000D2E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1200  000D32  0012               	return		;funcret
  1201  000D34                     __end_of___lwmod:
  1202                           	opt stack 0
  1203                           tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           prodh	equ	0xFF4
  1208                           prodl	equ	0xFF3
  1209                           wreg	equ	0xFE8
  1210                           indf2	equ	0xFDF
  1211                           postinc2	equ	0xFDE
  1212                           postdec2	equ	0xFDD
  1213                           fsr2h	equ	0xFDA
  1214                           fsr2l	equ	0xFD9
  1215                           status	equ	0xFD8
  1216                           
  1217 ;; *************** function ___lwdiv *****************
  1218 ;; Defined at:
  1219 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;  dividend        2    0[COMRAM] unsigned int 
  1222 ;;  divisor         2    2[COMRAM] unsigned int 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;  quotient        2    4[COMRAM] unsigned int 
  1225 ;;  counter         1    6[COMRAM] unsigned char 
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  2    0[COMRAM] unsigned int 
  1228 ;; Registers used:
  1229 ;;		wreg, status,2, status,0
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1235 ;;      Params:         4       0       0       0       0       0       0       0       0
  1236 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1238 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1239 ;;Total ram usage:        7 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; This function calls:
  1242 ;;		Nothing
  1243 ;; This function is called by:
  1244 ;;		_sprintf
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text7
  1249  000CA0                     __ptext7:
  1250                           	opt stack 0
  1251  000CA0                     ___lwdiv:
  1252                           	opt stack 29
  1253                           
  1254                           ;incstack = 0
  1255  000CA0  0E00               	movlw	0
  1256  000CA2  6E06               	movwf	___lwdiv@quotient+1,c
  1257  000CA4  0E00               	movlw	0
  1258  000CA6  6E05               	movwf	___lwdiv@quotient,c
  1259  000CA8  5003               	movf	___lwdiv@divisor,w,c
  1260  000CAA  1004               	iorwf	___lwdiv@divisor+1,w,c
  1261  000CAC  B4D8               	btfsc	status,2,c
  1262  000CAE  D01C               	goto	l545
  1263  000CB0  0E01               	movlw	1
  1264  000CB2  6E07               	movwf	___lwdiv@counter,c
  1265  000CB4  D004               	goto	l540
  1266  000CB6  90D8               	bcf	status,0,c
  1267  000CB8  3603               	rlcf	___lwdiv@divisor,f,c
  1268  000CBA  3604               	rlcf	___lwdiv@divisor+1,f,c
  1269  000CBC  2A07               	incf	___lwdiv@counter,f,c
  1270  000CBE                     l540:
  1271  000CBE  AE04               	btfss	___lwdiv@divisor+1,7,c
  1272  000CC0  D7FA               	goto	l541
  1273  000CC2                     u550:
  1274  000CC2  90D8               	bcf	status,0,c
  1275  000CC4  3605               	rlcf	___lwdiv@quotient,f,c
  1276  000CC6  3606               	rlcf	___lwdiv@quotient+1,f,c
  1277  000CC8  5003               	movf	___lwdiv@divisor,w,c
  1278  000CCA  5C01               	subwf	___lwdiv@dividend,w,c
  1279  000CCC  5004               	movf	___lwdiv@divisor+1,w,c
  1280  000CCE  5802               	subwfb	___lwdiv@dividend+1,w,c
  1281  000CD0  A0D8               	btfss	status,0,c
  1282  000CD2  D005               	goto	l544
  1283  000CD4  5003               	movf	___lwdiv@divisor,w,c
  1284  000CD6  5E01               	subwf	___lwdiv@dividend,f,c
  1285  000CD8  5004               	movf	___lwdiv@divisor+1,w,c
  1286  000CDA  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1287  000CDC  8005               	bsf	___lwdiv@quotient,0,c
  1288  000CDE                     l544:
  1289  000CDE  90D8               	bcf	status,0,c
  1290  000CE0  3204               	rrcf	___lwdiv@divisor+1,f,c
  1291  000CE2  3203               	rrcf	___lwdiv@divisor,f,c
  1292  000CE4  2E07               	decfsz	___lwdiv@counter,f,c
  1293  000CE6  D7ED               	goto	u550
  1294  000CE8                     l545:
  1295  000CE8  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1296  000CEC  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1297  000CF0  0012               	return		;funcret
  1298  000CF2                     __end_of___lwdiv:
  1299                           	opt stack 0
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           tblptrl	equ	0xFF6
  1303                           tablat	equ	0xFF5
  1304                           prodh	equ	0xFF4
  1305                           prodl	equ	0xFF3
  1306                           wreg	equ	0xFE8
  1307                           indf2	equ	0xFDF
  1308                           postinc2	equ	0xFDE
  1309                           postdec2	equ	0xFDD
  1310                           fsr2h	equ	0xFDA
  1311                           fsr2l	equ	0xFD9
  1312                           status	equ	0xFD8
  1313                           
  1314 ;; *************** function _UART_Write *****************
  1315 ;; Defined at:
  1316 ;;		line 22 in file "UART.h"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  data            1    wreg     unsigned char 
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  data            1    0[COMRAM] unsigned char 
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1330 ;;      Params:         0       0       0       0       0       0       0       0       0
  1331 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1333 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1334 ;;Total ram usage:        1 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;;		_UART_Write_Text
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text8
  1345  000D7E                     __ptext8:
  1346                           	opt stack 0
  1347  000D7E                     _UART_Write:
  1348                           	opt stack 30
  1349                           
  1350                           ;incstack = 0
  1351                           ;UART_Write@data stored from wreg
  1352  000D7E  6E01               	movwf	UART_Write@data,c
  1353  000D80                     
  1354                           ;UART.h: 23: while (!TRMT);
  1355  000D80  A2AC               	btfss	4012,1,c	;volatile
  1356  000D82  D7FE               	goto	l862
  1357                           
  1358                           ;UART.h: 24: TXREG = data;
  1359  000D84  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  1360  000D88  0012               	return		;funcret
  1361  000D8A                     __end_of_UART_Write:
  1362                           	opt stack 0
  1363                           tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           prodh	equ	0xFF4
  1368                           prodl	equ	0xFF3
  1369                           wreg	equ	0xFE8
  1370                           indf2	equ	0xFDF
  1371                           postinc2	equ	0xFDE
  1372                           postdec2	equ	0xFDD
  1373                           fsr2h	equ	0xFDA
  1374                           fsr2l	equ	0xFD9
  1375                           status	equ	0xFD8
  1376                           
  1377 ;; *************** function _UART_Init *****************
  1378 ;; Defined at:
  1379 ;;		line 1 in file "UART.h"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  baudrate        4   14[COMRAM] const long 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  x               2   26[COMRAM] unsigned int 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      unsigned char 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1393 ;;      Params:         4       0       0       0       0       0       0       0       0
  1394 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1395 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1396 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1397 ;;Total ram usage:       14 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    1
  1400 ;; This function calls:
  1401 ;;		___aldiv
  1402 ;; This function is called by:
  1403 ;;		_main
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text9
  1408  000AA8                     __ptext9:
  1409                           	opt stack 0
  1410  000AA8                     _UART_Init:
  1411                           	opt stack 29
  1412                           
  1413                           ;UART.h: 2: unsigned int x;
  1414                           ;UART.h: 3: x = (8000000 - baudrate * 64) / (baudrate * 64);
  1415                           
  1416                           ;incstack = 0
  1417  000AA8  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  1418  000AAC  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  1419  000AB0  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  1420  000AB4  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  1421  000AB8  0E06               	movlw	6
  1422  000ABA                     u605:
  1423  000ABA  90D8               	bcf	status,0,c
  1424  000ABC  3613               	rlcf	??_UART_Init,f,c
  1425  000ABE  3614               	rlcf	??_UART_Init+1,f,c
  1426  000AC0  3615               	rlcf	??_UART_Init+2,f,c
  1427  000AC2  3616               	rlcf	??_UART_Init+3,f,c
  1428  000AC4  2EE8               	decfsz	wreg,f,c
  1429  000AC6  D7F9               	goto	u605
  1430  000AC8  1E13               	comf	??_UART_Init,f,c
  1431  000ACA  1E14               	comf	??_UART_Init+1,f,c
  1432  000ACC  1E15               	comf	??_UART_Init+2,f,c
  1433  000ACE  1E16               	comf	??_UART_Init+3,f,c
  1434  000AD0  2A13               	incf	??_UART_Init,f,c
  1435  000AD2  0E00               	movlw	0
  1436  000AD4  2214               	addwfc	??_UART_Init+1,f,c
  1437  000AD6  2215               	addwfc	??_UART_Init+2,f,c
  1438  000AD8  2216               	addwfc	??_UART_Init+3,f,c
  1439  000ADA  0E00               	movlw	0
  1440  000ADC  2413               	addwf	??_UART_Init,w,c
  1441  000ADE  6E01               	movwf	___aldiv@dividend,c
  1442  000AE0  0E12               	movlw	18
  1443  000AE2  2014               	addwfc	??_UART_Init+1,w,c
  1444  000AE4  6E02               	movwf	___aldiv@dividend+1,c
  1445  000AE6  0E7A               	movlw	122
  1446  000AE8  2015               	addwfc	??_UART_Init+2,w,c
  1447  000AEA  6E03               	movwf	___aldiv@dividend+2,c
  1448  000AEC  0E00               	movlw	0
  1449  000AEE  2016               	addwfc	??_UART_Init+3,w,c
  1450  000AF0  6E04               	movwf	___aldiv@dividend+3,c
  1451  000AF2  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  1452  000AF6  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  1453  000AFA  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  1454  000AFE  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  1455  000B02  0E06               	movlw	6
  1456  000B04                     u615:
  1457  000B04  90D8               	bcf	status,0,c
  1458  000B06  3617               	rlcf	??_UART_Init+4,f,c
  1459  000B08  3618               	rlcf	??_UART_Init+5,f,c
  1460  000B0A  3619               	rlcf	??_UART_Init+6,f,c
  1461  000B0C  361A               	rlcf	??_UART_Init+7,f,c
  1462  000B0E  2EE8               	decfsz	wreg,f,c
  1463  000B10  D7F9               	goto	u615
  1464  000B12  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  1465  000B16  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  1466  000B1A  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  1467  000B1E  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  1468  000B22  ECEA  F005         	call	___aldiv	;wreg free
  1469  000B26  C001  F01B         	movff	?___aldiv,UART_Init@x
  1470  000B2A  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  1471                           
  1472                           ;UART.h: 4: if (x > 255)
  1473  000B2E  041C               	decf	UART_Init@x+1,w,c
  1474  000B30  A0D8               	btfss	status,0,c
  1475  000B32  D044               	goto	l37
  1476                           
  1477                           ;UART.h: 5: {
  1478                           ;UART.h: 6: x = (8000000 - baudrate * 16) / (baudrate * 16);
  1479  000B34  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  1480  000B38  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  1481  000B3C  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  1482  000B40  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  1483  000B44  0E04               	movlw	4
  1484  000B46                     u635:
  1485  000B46  90D8               	bcf	status,0,c
  1486  000B48  3613               	rlcf	??_UART_Init,f,c
  1487  000B4A  3614               	rlcf	??_UART_Init+1,f,c
  1488  000B4C  3615               	rlcf	??_UART_Init+2,f,c
  1489  000B4E  3616               	rlcf	??_UART_Init+3,f,c
  1490  000B50  2EE8               	decfsz	wreg,f,c
  1491  000B52  D7F9               	goto	u635
  1492  000B54  1E13               	comf	??_UART_Init,f,c
  1493  000B56  1E14               	comf	??_UART_Init+1,f,c
  1494  000B58  1E15               	comf	??_UART_Init+2,f,c
  1495  000B5A  1E16               	comf	??_UART_Init+3,f,c
  1496  000B5C  2A13               	incf	??_UART_Init,f,c
  1497  000B5E  0E00               	movlw	0
  1498  000B60  2214               	addwfc	??_UART_Init+1,f,c
  1499  000B62  2215               	addwfc	??_UART_Init+2,f,c
  1500  000B64  2216               	addwfc	??_UART_Init+3,f,c
  1501  000B66  0E00               	movlw	0
  1502  000B68  2413               	addwf	??_UART_Init,w,c
  1503  000B6A  6E01               	movwf	___aldiv@dividend,c
  1504  000B6C  0E12               	movlw	18
  1505  000B6E  2014               	addwfc	??_UART_Init+1,w,c
  1506  000B70  6E02               	movwf	___aldiv@dividend+1,c
  1507  000B72  0E7A               	movlw	122
  1508  000B74  2015               	addwfc	??_UART_Init+2,w,c
  1509  000B76  6E03               	movwf	___aldiv@dividend+2,c
  1510  000B78  0E00               	movlw	0
  1511  000B7A  2016               	addwfc	??_UART_Init+3,w,c
  1512  000B7C  6E04               	movwf	___aldiv@dividend+3,c
  1513  000B7E  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  1514  000B82  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  1515  000B86  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  1516  000B8A  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  1517  000B8E  0E04               	movlw	4
  1518  000B90                     u645:
  1519  000B90  90D8               	bcf	status,0,c
  1520  000B92  3617               	rlcf	??_UART_Init+4,f,c
  1521  000B94  3618               	rlcf	??_UART_Init+5,f,c
  1522  000B96  3619               	rlcf	??_UART_Init+6,f,c
  1523  000B98  361A               	rlcf	??_UART_Init+7,f,c
  1524  000B9A  2EE8               	decfsz	wreg,f,c
  1525  000B9C  D7F9               	goto	u645
  1526  000B9E  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  1527  000BA2  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  1528  000BA6  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  1529  000BAA  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  1530  000BAE  ECEA  F005         	call	___aldiv	;wreg free
  1531  000BB2  C001  F01B         	movff	?___aldiv,UART_Init@x
  1532  000BB6  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  1533                           
  1534                           ;UART.h: 7: BRGH = 1;
  1535  000BBA  84AC               	bsf	4012,2,c	;volatile
  1536  000BBC                     l37:
  1537                           
  1538                           ;UART.h: 8: }
  1539                           ;UART.h: 9: if (x < 256) {
  1540  000BBC  041C               	decf	UART_Init@x+1,w,c
  1541  000BBE  B0D8               	btfsc	status,0,c
  1542  000BC0  0012               	return	
  1543                           
  1544                           ;UART.h: 10: SPBRG = x;
  1545  000BC2  C01B  FFAF         	movff	UART_Init@x,4015	;volatile
  1546                           
  1547                           ;UART.h: 11: SYNC = 0;
  1548  000BC6  98AC               	bcf	4012,4,c	;volatile
  1549                           
  1550                           ;UART.h: 12: SPEN = 1;
  1551  000BC8  8EAB               	bsf	4011,7,c	;volatile
  1552                           
  1553                           ;UART.h: 13: TRISC7 = 1;
  1554  000BCA  8E94               	bsf	3988,7,c	;volatile
  1555                           
  1556                           ;UART.h: 14: TRISC6 = 1;
  1557  000BCC  8C94               	bsf	3988,6,c	;volatile
  1558                           
  1559                           ;UART.h: 15: CREN = 1;
  1560  000BCE  88AB               	bsf	4011,4,c	;volatile
  1561                           
  1562                           ;UART.h: 16: TXEN = 1;
  1563  000BD0  8AAC               	bsf	4012,5,c	;volatile
  1564                           
  1565                           ;UART.h: 17: return 1;
  1566                           ;	Return value of _UART_Init is never used
  1567  000BD2  0012               	return	
  1568  000BD4                     __end_of_UART_Init:
  1569                           	opt stack 0
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           prodh	equ	0xFF4
  1575                           prodl	equ	0xFF3
  1576                           wreg	equ	0xFE8
  1577                           indf2	equ	0xFDF
  1578                           postinc2	equ	0xFDE
  1579                           postdec2	equ	0xFDD
  1580                           fsr2h	equ	0xFDA
  1581                           fsr2l	equ	0xFD9
  1582                           status	equ	0xFD8
  1583                           
  1584 ;; *************** function ___aldiv *****************
  1585 ;; Defined at:
  1586 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;  dividend        4    0[COMRAM] long 
  1589 ;;  divisor         4    4[COMRAM] long 
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  quotient        4   10[COMRAM] long 
  1592 ;;  sign            1    9[COMRAM] unsigned char 
  1593 ;;  counter         1    8[COMRAM] unsigned char 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  4    0[COMRAM] long 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1603 ;;      Params:         8       0       0       0       0       0       0       0       0
  1604 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1606 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1607 ;;Total ram usage:       14 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_UART_Init
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text10
  1617  000BD4                     __ptext10:
  1618                           	opt stack 0
  1619  000BD4                     ___aldiv:
  1620                           	opt stack 29
  1621                           
  1622                           ;incstack = 0
  1623  000BD4  0E00               	movlw	0
  1624  000BD6  6E0A               	movwf	___aldiv@sign,c
  1625  000BD8  AE08               	btfss	___aldiv@divisor+3,7,c
  1626  000BDA  D00A               	goto	l192
  1627  000BDC  1E08               	comf	___aldiv@divisor+3,f,c
  1628  000BDE  1E07               	comf	___aldiv@divisor+2,f,c
  1629  000BE0  1E06               	comf	___aldiv@divisor+1,f,c
  1630  000BE2  6C05               	negf	___aldiv@divisor,c
  1631  000BE4  0E00               	movlw	0
  1632  000BE6  2206               	addwfc	___aldiv@divisor+1,f,c
  1633  000BE8  2207               	addwfc	___aldiv@divisor+2,f,c
  1634  000BEA  2208               	addwfc	___aldiv@divisor+3,f,c
  1635  000BEC  0E01               	movlw	1
  1636  000BEE  6E0A               	movwf	___aldiv@sign,c
  1637  000BF0                     l192:
  1638  000BF0  AE04               	btfss	___aldiv@dividend+3,7,c
  1639  000BF2  D00A               	goto	l193
  1640  000BF4  1E04               	comf	___aldiv@dividend+3,f,c
  1641  000BF6  1E03               	comf	___aldiv@dividend+2,f,c
  1642  000BF8  1E02               	comf	___aldiv@dividend+1,f,c
  1643  000BFA  6C01               	negf	___aldiv@dividend,c
  1644  000BFC  0E00               	movlw	0
  1645  000BFE  2202               	addwfc	___aldiv@dividend+1,f,c
  1646  000C00  2203               	addwfc	___aldiv@dividend+2,f,c
  1647  000C02  2204               	addwfc	___aldiv@dividend+3,f,c
  1648  000C04  0E01               	movlw	1
  1649  000C06  1A0A               	xorwf	___aldiv@sign,f,c
  1650  000C08                     l193:
  1651  000C08  0E00               	movlw	0
  1652  000C0A  6E0B               	movwf	___aldiv@quotient,c
  1653  000C0C  0E00               	movlw	0
  1654  000C0E  6E0C               	movwf	___aldiv@quotient+1,c
  1655  000C10  0E00               	movlw	0
  1656  000C12  6E0D               	movwf	___aldiv@quotient+2,c
  1657  000C14  0E00               	movlw	0
  1658  000C16  6E0E               	movwf	___aldiv@quotient+3,c
  1659  000C18  5005               	movf	___aldiv@divisor,w,c
  1660  000C1A  1006               	iorwf	___aldiv@divisor+1,w,c
  1661  000C1C  1007               	iorwf	___aldiv@divisor+2,w,c
  1662  000C1E  1008               	iorwf	___aldiv@divisor+3,w,c
  1663  000C20  B4D8               	btfsc	status,2,c
  1664  000C22  D02A               	goto	l200
  1665  000C24  0E01               	movlw	1
  1666  000C26  6E09               	movwf	___aldiv@counter,c
  1667  000C28  D006               	goto	l195
  1668  000C2A  90D8               	bcf	status,0,c
  1669  000C2C  3605               	rlcf	___aldiv@divisor,f,c
  1670  000C2E  3606               	rlcf	___aldiv@divisor+1,f,c
  1671  000C30  3607               	rlcf	___aldiv@divisor+2,f,c
  1672  000C32  3608               	rlcf	___aldiv@divisor+3,f,c
  1673  000C34  2A09               	incf	___aldiv@counter,f,c
  1674  000C36                     l195:
  1675  000C36  AE08               	btfss	___aldiv@divisor+3,7,c
  1676  000C38  D7F8               	goto	l196
  1677  000C3A                     u510:
  1678  000C3A  90D8               	bcf	status,0,c
  1679  000C3C  360B               	rlcf	___aldiv@quotient,f,c
  1680  000C3E  360C               	rlcf	___aldiv@quotient+1,f,c
  1681  000C40  360D               	rlcf	___aldiv@quotient+2,f,c
  1682  000C42  360E               	rlcf	___aldiv@quotient+3,f,c
  1683  000C44  5005               	movf	___aldiv@divisor,w,c
  1684  000C46  5C01               	subwf	___aldiv@dividend,w,c
  1685  000C48  5006               	movf	___aldiv@divisor+1,w,c
  1686  000C4A  5802               	subwfb	___aldiv@dividend+1,w,c
  1687  000C4C  5007               	movf	___aldiv@divisor+2,w,c
  1688  000C4E  5803               	subwfb	___aldiv@dividend+2,w,c
  1689  000C50  5008               	movf	___aldiv@divisor+3,w,c
  1690  000C52  5804               	subwfb	___aldiv@dividend+3,w,c
  1691  000C54  A0D8               	btfss	status,0,c
  1692  000C56  D009               	goto	l199
  1693  000C58  5005               	movf	___aldiv@divisor,w,c
  1694  000C5A  5E01               	subwf	___aldiv@dividend,f,c
  1695  000C5C  5006               	movf	___aldiv@divisor+1,w,c
  1696  000C5E  5A02               	subwfb	___aldiv@dividend+1,f,c
  1697  000C60  5007               	movf	___aldiv@divisor+2,w,c
  1698  000C62  5A03               	subwfb	___aldiv@dividend+2,f,c
  1699  000C64  5008               	movf	___aldiv@divisor+3,w,c
  1700  000C66  5A04               	subwfb	___aldiv@dividend+3,f,c
  1701  000C68  800B               	bsf	___aldiv@quotient,0,c
  1702  000C6A                     l199:
  1703  000C6A  90D8               	bcf	status,0,c
  1704  000C6C  3208               	rrcf	___aldiv@divisor+3,f,c
  1705  000C6E  3207               	rrcf	___aldiv@divisor+2,f,c
  1706  000C70  3206               	rrcf	___aldiv@divisor+1,f,c
  1707  000C72  3205               	rrcf	___aldiv@divisor,f,c
  1708  000C74  2E09               	decfsz	___aldiv@counter,f,c
  1709  000C76  D7E1               	goto	u510
  1710  000C78                     l200:
  1711  000C78  500A               	movf	___aldiv@sign,w,c
  1712  000C7A  B4D8               	btfsc	status,2,c
  1713  000C7C  D008               	goto	l201
  1714  000C7E  1E0E               	comf	___aldiv@quotient+3,f,c
  1715  000C80  1E0D               	comf	___aldiv@quotient+2,f,c
  1716  000C82  1E0C               	comf	___aldiv@quotient+1,f,c
  1717  000C84  6C0B               	negf	___aldiv@quotient,c
  1718  000C86  0E00               	movlw	0
  1719  000C88  220C               	addwfc	___aldiv@quotient+1,f,c
  1720  000C8A  220D               	addwfc	___aldiv@quotient+2,f,c
  1721  000C8C  220E               	addwfc	___aldiv@quotient+3,f,c
  1722  000C8E                     l201:
  1723  000C8E  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  1724  000C92  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  1725  000C96  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  1726  000C9A  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  1727  000C9E  0012               	return	
  1728  000CA0                     __end_of___aldiv:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           tblptrh	equ	0xFF7
  1732                           tblptrl	equ	0xFF6
  1733                           tablat	equ	0xFF5
  1734                           prodh	equ	0xFF4
  1735                           prodl	equ	0xFF3
  1736                           wreg	equ	0xFE8
  1737                           indf2	equ	0xFDF
  1738                           postinc2	equ	0xFDE
  1739                           postdec2	equ	0xFDD
  1740                           fsr2h	equ	0xFDA
  1741                           fsr2l	equ	0xFD9
  1742                           status	equ	0xFD8
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           prodh	equ	0xFF4
  1748                           prodl	equ	0xFF3
  1749                           wreg	equ	0xFE8
  1750                           indf2	equ	0xFDF
  1751                           postinc2	equ	0xFDE
  1752                           postdec2	equ	0xFDD
  1753                           fsr2h	equ	0xFDA
  1754                           fsr2l	equ	0xFD9
  1755                           status	equ	0xFD8
  1756                           
  1757                           	psect	rparam
  1758  0000                     tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           prodh	equ	0xFF4
  1763                           prodl	equ	0xFF3
  1764                           wreg	equ	0xFE8
  1765                           indf2	equ	0xFDF
  1766                           postinc2	equ	0xFDE
  1767                           postdec2	equ	0xFDD
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      47
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> main@stepx(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_UART_Init
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    2414
                                             28 COMRAM    19    19      0
                    _UART_Data_Ready
                          _UART_Init
                          _UART_Read
                         _UART_Write
                            _sprintf
                               _step
                          _stopcheck
 ---------------------------------------------------------------------------------
 (1) _stopcheck                                            0     0      0       0
                    _UART_Data_Ready
                          _UART_Read
 ---------------------------------------------------------------------------------
 (2) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _step                                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    17      6    1254
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           14    10      4     836
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Data_Ready
   _UART_Init
     ___aldiv
   _UART_Read
   _UART_Write
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _step
   _stopcheck
     _UART_Data_Ready
     _UART_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     2F      2F       1       49.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BANK3               EF      0       0      10        0.0%
ABS                  0      0       0      11        0.0%
BITBANK3            EF      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Nov 29 12:50:47 2017

                      l37 0BBC                        l83 0844                        l76 0D76  
                      l92 089A                        l85 094E                        l93 087E  
                      l78 0D7A                        l94 088E                        l86 0850  
                      l87 0870                        l96 08D8                        l88 085C  
                      l89 086C               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
                     l100 08FE                       l101 0916                       l103 092A  
                     l200 0C78                       l104 093C                       l201 0C8E  
                     l105 0948                       l131 0A22                       l132 0A7A  
                     l133 0A28                       l125 09AE                       l118 096A  
                     l127 09D6                       l119 0984                       l192 0BF0  
                     l193 0C08                       l195 0C36                       l196 0C2A  
                     l540 0CBE                       l541 0CB6                       l550 0D08  
                     l199 0C6A                       l551 0D00                       l544 0CDE  
                     l545 0CE8                       l554 0D20                       l555 0D2A  
                     l862 0D80              __CFG_CPB$OFF 000000                       u210 0D3C  
                     u216 0D3E                       u510 0C3A              __CFG_CPD$OFF 000000  
                     u700 0A06                       u605 0ABA                       u550 0CC2  
                     u615 0B04                       u720 0A82                       u730 0A9A  
                     u810 08F0                       u635 0B46                       u580 0D0C  
                     u645 0B90                       u760 0874                       u850 0930  
                     u790 089E                       u887 0D54              __CFG_BOR$OFF 000000  
                     wreg 000FE8              __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000  
                    l1180 09DA                      l1262 08C8                      l1280 0906  
                    l1272 08F0                      l1294 0930                      STR_1 080B  
                    _BRGH 007D62                      _CREN 007D5C                      _RCIF 007CF5  
                    _SPEN 007D5F              __CFG_WDTPS$1 000000                      _TRMT 007D61  
                    _TXEN 007D65                      _SYNC 007D64                      _main 0810  
                    fsr2h 000FDA                      indf2 000FDF                      fsr2l 000FD9  
                    _step 0D34                      prodh 000FF4                      prodl 000FF3  
                    start 0002             __CFG_IESO$OFF 000000              ___param_bank 000000  
           __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000           __end_of___aldiv 0CA0  
                   ?_main 0001                     ?_step 0001           __end_of___lwdiv 0CF2  
         __end_of___lwmod 0D34                     _RCREG 000FAE                     _SPBRG 000FAF  
           __CFG_USBDIV$1 000000                     _TXREG 000FAD             __CFG_PWRT$OFF 000000  
           __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000  
           __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
             ?_UART_Write 0001        __size_of_UART_Init 012C        __size_of_UART_Read 0008  
           __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000  
          __CFG_EBTRB$OFF 000000           __end_of_dpowers 080B                     main@i 002B  
                   main@k 002D                     tablat 000FF5                     status 000FD8  
         __end_of_sprintf 0AA8            __CFG_ICPRT$OFF 000000            __CFG_MCLRE$OFF 000000  
         __initialization 0D8A              __end_of_main 0960              __end_of_step 0D5E  
                  ??_main 001D                    ??_step 0001             __activetblptr 000002  
                  _OSCCON 000FD3                    _TRISC6 007CA6                    _TRISC7 007CA7  
          __CFG_VREGEN$ON 000000            __CFG_XINST$OFF 000000         __end_of_UART_Init 0BD4  
       __end_of_UART_Read 0D9C       __size_of_UART_Write 000C                 ??___aldiv 0009  
          __CFG_STVREN$ON 000000                 ??___lwdiv 0005                 ??___lwmod 000C  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                 ??_sprintf 0013                __accesstop 0060  
 __end_of__initialization 0D8A           __CFG_PBADEN$OFF 000000             ___rparam_used 000001  
          __pcstackCOMRAM 0001  __size_of_UART_Data_Ready 0008              ??_UART_Write 0001  
      __size_of_stopcheck 0020                   __Hparam 0000                   __Lparam 0000  
                 ___aldiv 0BD4        __end_of_UART_Write 0D8A                   ___lwdiv 0CA0  
                 ___lwmod 0CF2              __psmallconst 0800                   __pcinit 0D8A  
                 __ramtop 0800                   __ptext0 0810                   __ptext1 0D5E  
                 __ptext2 0D94                   __ptext3 0D9C                   __ptext4 0D34  
                 __ptext5 0960                   __ptext6 0CF2                   __ptext7 0CA0  
                 __ptext8 0D7E                   __ptext9 0AA8                   _dpowers 0801  
        ___aldiv@dividend 0001                   _sprintf 0960            main@resolucion 0027  
    end_of_initialization 0D8A             __Lmediumconst 0000          ___aldiv@quotient 000B  
                 postdec2 000FDD                   postinc2 000FDE         ??_UART_Data_Ready 0001  
               _UART_Init 0AA8                 _UART_Read 0D94                 _PORTDbits 000F83  
       __end_of_stopcheck 0D7E            UART_Write@data 0001                 _TRISDbits 000F95  
              ?_UART_Init 000F                ?_UART_Read 0001       start_initialization 0D8A  
        __CFG_LPT1OSC$OFF 000000               sprintf@flag 0016               sprintf@prec 0017  
        ___lwdiv@dividend 0001                  ?___aldiv 0001                  ?___lwdiv 0001  
                ?___lwmod 0008               ??_UART_Init 0013               ??_UART_Read 0001  
             __smallconst 0800          ___lwdiv@quotient 0005                  ?_sprintf 000D  
              UART_Init@x 001B           ___aldiv@divisor 0005           ___aldiv@counter 0009  
         _UART_Data_Ready 0D9C         UART_Init@baudrate 000F                 main@steps 0029  
               main@stepx 001D                 _stopcheck 0D5E                  __Hrparam 0000  
                __Lrparam 0000          __size_of___aldiv 00CC          __size_of___lwdiv 0052  
        __size_of___lwmod 0042                sprintf@val 0018                ?_stopcheck 0001  
         ___lwdiv@divisor 0003           ___lwdiv@counter 0007                  __ptext10 0BD4  
 __end_of_UART_Data_Ready 0DA4          __size_of_sprintf 0148             __size_of_main 0150  
           __size_of_step 002A                  main@stop 002F     __CFG_CPUDIV$OSC1_PLL2 000000  
               sprintf@ap 0014                 sprintf@sp 000D          ___lwmod@dividend 0008  
     __CFG_FOSC$INTOSC_EC 000000                  sprintf@c 001A                  sprintf@f 000F  
         ___lwmod@divisor 000A           ___lwmod@counter 000C               ??_stopcheck 0001  
            ___aldiv@sign 000A                _UART_Write 0D7E          ?_UART_Data_Ready 0001  
